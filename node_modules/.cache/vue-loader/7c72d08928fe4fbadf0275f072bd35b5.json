{"remainingRequest":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/dialogs/ImageConverter.vue?vue&type=template&id=2043ea99&","dependencies":[{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/dialogs/ImageConverter.vue","mtime":1550714101558},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\n      \"div\",\n      {\n        staticClass: \"dialog stable\",\n        staticStyle: { display: \"none\" },\n        attrs: { id: \"imageConverter\" }\n      },\n      [\n        _c(\"div\", { attrs: { id: \"convertImageButtons\" } }, [\n          _c(\"button\", {\n            staticClass: \"icon-upload\",\n            attrs: {\n              id: \"convertImageLoad\",\n              onmouseover: \"tip('Load image to convert')\"\n            }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-adjust\",\n            attrs: {\n              id: \"convertAutoLum\",\n              onmouseover: \"tip('Auto-assign colors based on liminosity')\"\n            }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-brush\",\n            attrs: {\n              id: \"convertAutoHue\",\n              onmouseover: \"tip('Auto-assign colors based on hue')\"\n            }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-minus-squared\",\n            attrs: {\n              id: \"convertColorsMinus\",\n              onmouseover:\n                \"tip('Reduce the number of colors. Minimal number is 3')\"\n            }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-plus-squared\",\n            attrs: {\n              id: \"convertColorsPlus\",\n              onmouseover:\n                \"tip('Increase the number of colors. Maximum number is 256')\"\n            }\n          }),\n          _c(\"input\", {\n            staticStyle: { display: \"none\" },\n            attrs: { id: \"convertColors\", value: \"12\" }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-eye\",\n            attrs: { id: \"convertImageGrid\", onmouseover: \"tip('Toggle grid')\" }\n          }),\n          _c(\"button\", {\n            staticClass: \"icon-clone\",\n            attrs: {\n              id: \"convertOverlayButton\",\n              onmouseover: \"tip('Change overlay opacity')\"\n            }\n          }),\n          _c(\"input\", {\n            staticStyle: { display: \"none\" },\n            attrs: {\n              id: \"convertOverlay\",\n              onmouseover: \"tip('Change overlay opacity')\",\n              type: \"range\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.01\",\n              value: \"0\"\n            }\n          }),\n          _c(\n            \"span\",\n            {\n              staticStyle: { display: \"none\" },\n              attrs: {\n                id: \"convertOverlayValue\",\n                onmouseover: \"tip('Overlay opacity')\"\n              }\n            },\n            [_vm._v(\"0\")]\n          ),\n          _c(\"button\", {\n            staticClass: \"icon-check\",\n            attrs: {\n              id: \"convertComplete\",\n              onmouseover:\n                \"tip('Complete conversion. All unassigned colors will be considered as ocean')\"\n            }\n          })\n        ]),\n        _c(\"div\", { attrs: { id: \"colorsSelect\" } }, [\n          _c(\"div\", { attrs: { id: \"colorScheme\" } }),\n          _c(\"span\", { attrs: { id: \"colorsSelectValue\" } }, [_vm._v(\"0\")])\n        ]),\n        _c(\n          \"div\",\n          { staticStyle: { display: \"none\" }, attrs: { id: \"colorsAssigned\" } },\n          [_c(\"label\", [_vm._v(\"Assigned colors: \")]), _c(\"br\")]\n        ),\n        _c(\n          \"div\",\n          {\n            staticStyle: { display: \"none\" },\n            attrs: { id: \"colorsUnassigned\" }\n          },\n          [_c(\"label\", [_vm._v(\"Unassigned colors: \")]), _c(\"br\")]\n        )\n      ]\n    )\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}