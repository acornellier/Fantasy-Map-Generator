{"remainingRequest":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/options/Options.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/options/Options.vue","mtime":1550935726527},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as $ from 'jquery'\nimport * as d3 from 'd3'\nimport LayoutContent from './LayoutContent.vue'\nimport StyleContent from './StyleContent.vue'\nimport OptionsContent from './OptionsContent.vue'\nimport CustomizeContent from './CustomizeContent.vue'\nimport AboutContent from './AboutContent.vue'\nimport Stickied from './Stickied.vue'\n\nfunction getHex(radius, type) {\n  let x0 = 0, y0 = 0\n  let s = type === 'pointyHex' ? 0 : Math.PI / -6\n  let thirdPi = Math.PI / 3\n  let angles = [s, s + thirdPi, s + 2 * thirdPi, s + 3 * thirdPi, s + 4 * thirdPi, s + 5 * thirdPi]\n  return angles.map(function(angle) {\n    const x1 = Math.sin(angle) * radius,\n      y1 = -Math.cos(angle) * radius,\n      dx = x1 - x0,\n      dy = y1 - y0\n    x0 = x1, y0 = y1\n    return [dx, dy]\n  })\n}\n\nfunction getHexGridPoints(size, type) {\n  let points = []\n  const rt3 = Math.sqrt(3)\n  const off = type === 'pointyHex' ? rt3 * size / 2 : size * 3 / 2\n  const ySpace = type === 'pointyHex' ? size * 3 / 2 : rt3 * size / 2\n  const xSpace = type === 'pointyHex' ? rt3 * size : size * 3\n  for (let y = 0, l = 0; y < graphHeight; y += ySpace, l++) {\n    for (let x = l % 2 ? 0 : off; x < graphWidth; x += xSpace) {\n      points.push([x, y])\n    }\n  }\n  return points\n}\n\nexport default {\n  name: 'Options',\n  components: {\n    LayoutContent,\n    StyleContent,\n    OptionsContent,\n    CustomizeContent,\n    AboutContent,\n    Stickied,\n  },\n  mounted() {\n    $('#optionsContainer').draggable({handle: '.drag-trigger', snap: 'svg', snapMode: 'both'})\n    $('#optionsContainer *').on('mouseout', function() {\n      let tooltip = document.getElementById('tooltip')\n      tooltip.innerHTML = tooltip.getAttribute('data-main')\n    })\n\n    // Toggle Options pane\n    $('#optionsTrigger').on('click', function() {\n      let tooltip = document.getElementById('tooltip')\n      if (tooltip.getAttribute('data-main') === 'Ð¡lick the arrow button to open options') {\n        tooltip.setAttribute('data-main', '')\n        tooltip.innerHTML = ''\n        localStorage.setItem('disable_click_arrow_tooltip', true)\n      }\n      if ($('#options').css('display') === 'none') {\n        $('#regenerate').hide()\n        $('#options').fadeIn()\n        $('#layoutTab').click()\n        $('#optionsTrigger').removeClass('icon-right-open glow').addClass('icon-left-open')\n      } else {\n        $('#options').fadeOut()\n        $('#optionsTrigger').removeClass('icon-left-open').addClass('icon-right-open')\n      }\n    })\n    $('#collapsible').hover(function() {\n      if ($('#optionsTrigger').hasClass('glow')) return\n      if ($('#options').css('display') === 'none') {\n        $('#regenerate').show()\n        $('#optionsTrigger').removeClass('glow')\n      }\n    }, function() {\n      $('#regenerate').hide()\n    })\n\n    // lock / unlock option randomization\n    $('#options i[class^=\\'icon-lock\\']').click(function() {\n      $(this).toggleClass('icon-lock icon-lock-open')\n      const locked = +$(this).hasClass('icon-lock')\n      $(this).attr('data-locked', locked)\n      const option = (this.id).slice(4, -5).toLowerCase()\n      const value = $('#' + option + 'Input').val()\n      if (locked) {localStorage.setItem(option, value)} else {localStorage.removeItem(option)}\n    })\n  },\n  methods: {\n    updateLabelGroups() { this.$emit('updateLabelGroups') },\n    applyDefaultStyle() { this.$emit('applyDefaultStyle') },\n    toggleHeight() { this.$emit('toggleHeight') },\n    toggleOverlay() {\n      const overlay = d3.select('svg').select('#viewbox').select('#overlay')\n      if (overlay.selectAll('*').size() !== 0)\n        overlay.selectAll('*').remove()\n\n      const type = $('#styleOverlayType').value\n      let size = +$('#styleOverlaySize').value\n      if (type === 'pointyHex' || type === 'flatHex') {\n        let points = getHexGridPoints(size, type)\n        let hex = 'm' + getHex(size, type).slice(0, 4).join('l')\n        let d = points.map(function(p) {return 'M' + p + hex}).join('')\n        overlay.append('path').attr('d', d)\n      } else if (type === 'square') {\n        const x = d3.range(size, svgWidth, size)\n        const y = d3.range(size, svgHeight, size)\n        overlay.append('g').selectAll('line').data(x).enter().append('line')\n               .attr('x1', function(d) {return d})\n               .attr('x2', function(d) {return d})\n               .attr('y1', 0).attr('y2', svgHeight)\n        overlay.append('g').selectAll('line').data(y).enter().append('line')\n               .attr('y1', function(d) {return d})\n               .attr('y2', function(d) {return d})\n               .attr('x1', 0).attr('x2', svgWidth)\n      } else {\n        const tr = `translate(80 80) scale(${size / 20})`\n        d3.select('#rose').attr('transform', tr)\n        overlay.append('use').attr('xlink:href', '#rose')\n      }\n      // overlay.call(d3.drag().on('start', elementDrag))\n\n      if ($('#styleOverlayType').value === 'windrose') {\n        $('#styleOverlaySizeFriendly').innerHTML = ''\n        return\n      }\n      if ($('#styleOverlayType').value === 'pointyHex' || $('#styleOverlayType').value === 'flatHex')\n        size *= Math.cos(30 * Math.PI / 180) * 2\n      $('#styleOverlaySizeFriendly').value = '(' + Math.round(size * $('#distanceScale').value) + ' ' + $('#distanceUnit').value + ')'\n    }\n  }\n}\n",{"version":3,"sources":["Options.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Options.vue","sourceRoot":"src/components/options","sourcesContent":["<template>\n<div id=\"optionsContainer\">\n  <div id=\"collapsible\">\n    <button id=\"optionsTrigger\" onmouseover=\"tip('Click to toggle options. Hotkey: O')\"\n            class=\"options icon-right-open glow\"/>\n    <button id=\"regenerate\" onmouseover=\"tip('Click to generate a new map. Hotkey: F6')\"\n            class=\"options\">\n      New Map!\n    </button>\n  </div>\n  <div id=\"options\">\n    <div class=\"drag-trigger\" onmouseover=\"tip('Drag to move options pane')\"/>\n    <div class=\"tab\">\n      <button id=\"layoutTab\" onmouseover=\"tip('Click to open layout menu')\" class=\"options\">\n        Layout\n      </button>\n      <button id=\"styleTab\" onmouseover=\"tip('Click to style menu')\" class=\"options\">\n        Style\n      </button>\n      <button id=\"optionsTab\" onmouseover=\"tip('Click to change generation options')\"\n              class=\"options\">\n        Options\n      </button>\n      <button id=\"customizeTab\" onmouseover=\"tip('Click to open customization menu')\"\n              class=\"options\">\n        Customize\n      </button>\n      <button id=\"aboutTab\" onmouseover=\"tip('Click to see Generator info')\" class=\"options\">\n        ?\n      </button>\n    </div>\n    <LayoutContent\n      @toggleOverlay=\"toggleOverlay\"\n      @toggleHeight=\"toggleHeight\"\n    />\n    <StyleContent\n      @updateLabelGroups=\"updateLabelGroups\"\n      @applyDefaultStyle=\"applyDefaultStyle\"\n      @toggleHeight=\"toggleHeight\"\n    />\n    <OptionsContent/>\n    <CustomizeContent/>\n    <AboutContent/>\n    <Stickied/>\n  </div>\n</div>\n</template>\n\n<script>\nimport * as $ from 'jquery'\nimport * as d3 from 'd3'\nimport LayoutContent from './LayoutContent.vue'\nimport StyleContent from './StyleContent.vue'\nimport OptionsContent from './OptionsContent.vue'\nimport CustomizeContent from './CustomizeContent.vue'\nimport AboutContent from './AboutContent.vue'\nimport Stickied from './Stickied.vue'\n\nfunction getHex(radius, type) {\n  let x0 = 0, y0 = 0\n  let s = type === 'pointyHex' ? 0 : Math.PI / -6\n  let thirdPi = Math.PI / 3\n  let angles = [s, s + thirdPi, s + 2 * thirdPi, s + 3 * thirdPi, s + 4 * thirdPi, s + 5 * thirdPi]\n  return angles.map(function(angle) {\n    const x1 = Math.sin(angle) * radius,\n      y1 = -Math.cos(angle) * radius,\n      dx = x1 - x0,\n      dy = y1 - y0\n    x0 = x1, y0 = y1\n    return [dx, dy]\n  })\n}\n\nfunction getHexGridPoints(size, type) {\n  let points = []\n  const rt3 = Math.sqrt(3)\n  const off = type === 'pointyHex' ? rt3 * size / 2 : size * 3 / 2\n  const ySpace = type === 'pointyHex' ? size * 3 / 2 : rt3 * size / 2\n  const xSpace = type === 'pointyHex' ? rt3 * size : size * 3\n  for (let y = 0, l = 0; y < graphHeight; y += ySpace, l++) {\n    for (let x = l % 2 ? 0 : off; x < graphWidth; x += xSpace) {\n      points.push([x, y])\n    }\n  }\n  return points\n}\n\nexport default {\n  name: 'Options',\n  components: {\n    LayoutContent,\n    StyleContent,\n    OptionsContent,\n    CustomizeContent,\n    AboutContent,\n    Stickied,\n  },\n  mounted() {\n    $('#optionsContainer').draggable({handle: '.drag-trigger', snap: 'svg', snapMode: 'both'})\n    $('#optionsContainer *').on('mouseout', function() {\n      let tooltip = document.getElementById('tooltip')\n      tooltip.innerHTML = tooltip.getAttribute('data-main')\n    })\n\n    // Toggle Options pane\n    $('#optionsTrigger').on('click', function() {\n      let tooltip = document.getElementById('tooltip')\n      if (tooltip.getAttribute('data-main') === 'Ð¡lick the arrow button to open options') {\n        tooltip.setAttribute('data-main', '')\n        tooltip.innerHTML = ''\n        localStorage.setItem('disable_click_arrow_tooltip', true)\n      }\n      if ($('#options').css('display') === 'none') {\n        $('#regenerate').hide()\n        $('#options').fadeIn()\n        $('#layoutTab').click()\n        $('#optionsTrigger').removeClass('icon-right-open glow').addClass('icon-left-open')\n      } else {\n        $('#options').fadeOut()\n        $('#optionsTrigger').removeClass('icon-left-open').addClass('icon-right-open')\n      }\n    })\n    $('#collapsible').hover(function() {\n      if ($('#optionsTrigger').hasClass('glow')) return\n      if ($('#options').css('display') === 'none') {\n        $('#regenerate').show()\n        $('#optionsTrigger').removeClass('glow')\n      }\n    }, function() {\n      $('#regenerate').hide()\n    })\n\n    // lock / unlock option randomization\n    $('#options i[class^=\\'icon-lock\\']').click(function() {\n      $(this).toggleClass('icon-lock icon-lock-open')\n      const locked = +$(this).hasClass('icon-lock')\n      $(this).attr('data-locked', locked)\n      const option = (this.id).slice(4, -5).toLowerCase()\n      const value = $('#' + option + 'Input').val()\n      if (locked) {localStorage.setItem(option, value)} else {localStorage.removeItem(option)}\n    })\n  },\n  methods: {\n    updateLabelGroups() { this.$emit('updateLabelGroups') },\n    applyDefaultStyle() { this.$emit('applyDefaultStyle') },\n    toggleHeight() { this.$emit('toggleHeight') },\n    toggleOverlay() {\n      const overlay = d3.select('svg').select('#viewbox').select('#overlay')\n      if (overlay.selectAll('*').size() !== 0)\n        overlay.selectAll('*').remove()\n\n      const type = $('#styleOverlayType').value\n      let size = +$('#styleOverlaySize').value\n      if (type === 'pointyHex' || type === 'flatHex') {\n        let points = getHexGridPoints(size, type)\n        let hex = 'm' + getHex(size, type).slice(0, 4).join('l')\n        let d = points.map(function(p) {return 'M' + p + hex}).join('')\n        overlay.append('path').attr('d', d)\n      } else if (type === 'square') {\n        const x = d3.range(size, svgWidth, size)\n        const y = d3.range(size, svgHeight, size)\n        overlay.append('g').selectAll('line').data(x).enter().append('line')\n               .attr('x1', function(d) {return d})\n               .attr('x2', function(d) {return d})\n               .attr('y1', 0).attr('y2', svgHeight)\n        overlay.append('g').selectAll('line').data(y).enter().append('line')\n               .attr('y1', function(d) {return d})\n               .attr('y2', function(d) {return d})\n               .attr('x1', 0).attr('x2', svgWidth)\n      } else {\n        const tr = `translate(80 80) scale(${size / 20})`\n        d3.select('#rose').attr('transform', tr)\n        overlay.append('use').attr('xlink:href', '#rose')\n      }\n      // overlay.call(d3.drag().on('start', elementDrag))\n\n      if ($('#styleOverlayType').value === 'windrose') {\n        $('#styleOverlaySizeFriendly').innerHTML = ''\n        return\n      }\n      if ($('#styleOverlayType').value === 'pointyHex' || $('#styleOverlayType').value === 'flatHex')\n        size *= Math.cos(30 * Math.PI / 180) * 2\n      $('#styleOverlaySizeFriendly').value = '(' + Math.round(size * $('#distanceScale').value) + ' ' + $('#distanceUnit').value + ')'\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}