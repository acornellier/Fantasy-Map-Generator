{"remainingRequest":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/babel-loader/lib/index.js!/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/FantasyMapGenerator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/src/components/FantasyMapGenerator.vue","mtime":1550936225548},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/cache-loader/dist/cjs.js","mtime":1550636236327},{"path":"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _slicedToArray from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Promise from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _Number$isInteger from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/number/is-integer\";\nimport _parseInt from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport _String$fromCodePoint from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/string/from-code-point\";\nimport \"core-js/modules/es6.string.code-point-at\";\nimport _parseFloat from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/parse-float\";\nimport _Set from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _Number$isFinite from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/number/is-finite\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.sort\";\nimport _JSON$stringify from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _typeof from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.math.hypot\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.math.trunc\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _Date$now from \"/Users/acornellier/git/Fantasy-Map-Generator/vue/node_modules/@babel/runtime-corejs2/core-js/date/now\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport seedrandom from 'seedrandom';\nimport * as d3 from 'd3';\nimport * as d3chromatic from 'd3-scale-chromatic';\nimport * as polylabel from 'polylabel';\nimport * as quantize from 'quantize';\nimport * as PriorityQueue from 'js-priority-queue';\nimport * as $ from 'jquery';\nimport 'jquery-ui-bundle';\nimport 'jquery-ui-bundle/jquery-ui.css';\nimport * as _ from 'lodash';\nimport { toHEX, round, si, getInteger, GFontToDataURI, ifDefined } from './utils';\nimport Dialogs from './dialogs/Dialogs.vue';\nimport Graphic from './Graphic.vue';\nimport Options from './options/Options.vue';\n/* eslint-disable */\n\nexport default {\n  name: 'FantasyMapGenerator',\n  mounted: function mounted() {\n    fantasyMap();\n  },\n  components: {\n    Dialogs: Dialogs,\n    Graphic: Graphic,\n    Options: Options\n  },\n  methods: {\n    updateLabelGroups: function updateLabelGroups() {\n      _updateLabelGroups();\n    },\n    applyDefaultStyle: function applyDefaultStyle() {\n      _applyDefaultStyle();\n    },\n    toggleHeight: function toggleHeight() {\n      _toggleHeight();\n    }\n  }\n};\n'use strict'; // consants\n\n\nvar ICONS = [// emoticons in FF:\n['2693', '⚓', 'Anchor'], ['26EA', '⛪', 'Church'], ['1F3EF', '🏯', 'Japanese Castle'], ['1F3F0', '🏰', 'Castle'], ['1F5FC', '🗼', 'Tower'], ['1F3E0', '🏠', 'House'], ['1F3AA', '🎪', 'Tent'], ['1F3E8', '🏨', 'Hotel'], ['1F4B0', '💰', 'Money bag'], ['1F4A8', '💨', 'Dashing away'], ['1F334', '🌴', 'Palm'], ['1F335', '🌵', 'Cactus'], ['1F33E', '🌾', 'Sheaf'], ['1F5FB', '🗻', 'Mountain'], ['1F30B', '🌋', 'Volcano'], ['1F40E', '🐎', 'Horse'], ['1F434', '🐴', 'Horse Face'], ['1F42E', '🐮', 'Cow'], ['1F43A', '🐺', 'Wolf Face'], ['1F435', '🐵', 'Monkey face'], ['1F437', '🐷', 'Pig face'], ['1F414', '🐔', 'Chiken'], ['1F411', '🐑', 'Eve'], ['1F42B', '🐫', 'Camel'], ['1F418', '🐘', 'Elephant'], ['1F422', '🐢', 'Turtle'], ['1F40C', '🐌', 'Snail'], ['1F40D', '🐍', 'Snake'], ['1F433', '🐳', 'Whale'], ['1F42C', '🐬', 'Dolphin'], ['1F420', '🐟', 'Fish'], ['1F432', '🐲', 'Dragon Head'], ['1F479', '👹', 'Ogre'], ['1F47B', '👻', 'Ghost'], ['1F47E', '👾', 'Alien'], ['1F480', '💀', 'Skull'], ['1F374', '🍴', 'Fork and knife'], ['1F372', '🍲', 'Food'], ['1F35E', '🍞', 'Bread'], ['1F357', '🍗', 'Poultry leg'], ['1F347', '🍇', 'Grapes'], ['1F34F', '🍏', 'Apple'], ['1F352', '🍒', 'Cherries'], ['1F36F', '🍯', 'Honey pot'], ['1F37A', '🍺', 'Beer'], ['1F377', '🍷', 'Wine glass'], ['1F3BB', '🎻', 'Violin'], ['1F3B8', '🎸', 'Guitar'], ['26A1', '⚡', 'Electricity'], ['1F320', '🌠', 'Shooting star'], ['1F319', '🌙', 'Crescent moon'], ['1F525', '🔥', 'Fire'], ['1F4A7', '💧', 'Droplet'], ['1F30A', '🌊', 'Wave'], ['231B', '⌛', 'Hourglass'], ['1F3C6', '🏆', 'Goblet'], ['26F2', '⛲', 'Fountain'], ['26F5', '⛵', 'Sailboat'], ['26FA', '⛺', 'Tend'], ['1F489', '💉', 'Syringe'], ['1F4D6', '📚', 'Books'], ['1F3AF', '🎯', 'Archery'], ['1F52E', '🔮', 'Magic ball'], ['1F3AD', '🎭', 'Performing arts'], ['1F3A8', '🎨', 'Artist palette'], ['1F457', '👗', 'Dress'], ['1F451', '👑', 'Crown'], ['1F48D', '💍', 'Ring'], ['1F48E', '💎', 'Gem'], ['1F514', '🔔', 'Bell'], ['1F3B2', '🎲', 'Die'], // black and white icons in FF:\n['26A0', '⚠', 'Alert'], ['2317', '⌗', 'Hash'], ['2318', '⌘', 'POI'], ['2307', '⌇', 'Wavy'], ['21E6', '⇦', 'Left arrow'], ['21E7', '⇧', 'Top arrow'], ['21E8', '⇨', 'Right arrow'], ['21E9', '⇩', 'Left arrow'], ['21F6', '⇶', 'Three arrows'], ['2699', '⚙', 'Gear'], ['269B', '⚛', 'Atom'], ['0024', '$', 'Dollar'], ['2680', '⚀', 'Die1'], ['2681', '⚁', 'Die2'], ['2682', '⚂', 'Die3'], ['2683', '⚃', 'Die4'], ['2684', '⚄', 'Die5'], ['2685', '⚅', 'Die6'], ['26B4', '⚴', 'Pallas'], ['26B5', '⚵', 'Juno'], ['26B6', '⚶', 'Vesta'], ['26B7', '⚷', 'Chiron'], ['26B8', '⚸', 'Lilith'], ['263F', '☿', 'Mercury'], ['2640', '♀', 'Venus'], ['2641', '♁', 'Earth'], ['2642', '♂', 'Mars'], ['2643', '♃', 'Jupiter'], ['2644', '♄', 'Saturn'], ['2645', '♅', 'Uranus'], ['2646', '♆', 'Neptune'], ['2647', '♇', 'Pluto'], ['26B3', '⚳', 'Ceres'], ['2654', '♔', 'Chess king'], ['2655', '♕', 'Chess queen'], ['2656', '♖', 'Chess rook'], ['2657', '♗', 'Chess bishop'], ['2658', '♘', 'Chess knight'], ['2659', '♙', 'Chess pawn'], ['2660', '♠', 'Spade'], ['2663', '♣', 'Club'], ['2665', '♥', 'Heart'], ['2666', '♦', 'Diamond'], ['2698', '⚘', 'Flower'], ['2625', '☥', 'Ankh'], ['2626', '☦', 'Orthodox'], ['2627', '☧', 'Chi Rho'], ['2628', '☨', 'Lorraine'], ['2629', '☩', 'Jerusalem'], ['2670', '♰', 'Syriac cross'], ['2020', '†', 'Dagger'], ['262A', '☪', 'Muslim'], ['262D', '☭', 'Soviet'], ['262E', '☮', 'Peace'], ['262F', '☯', 'Yin yang'], ['26A4', '⚤', 'Heterosexuality'], ['26A2', '⚢', 'Female homosexuality'], ['26A3', '⚣', 'Male homosexuality'], ['26A5', '⚥', 'Male and female'], ['26AD', '⚭', 'Rings'], ['2690', '⚐', 'White flag'], ['2691', '⚑', 'Black flag'], ['263C', '☼', 'Sun'], ['263E', '☾', 'Moon'], ['2668', '♨', 'Hot springs'], ['2600', '☀', 'Black sun'], ['2601', '☁', 'Cloud'], ['2602', '☂', 'Umbrella'], ['2603', '☃', 'Snowman'], ['2604', '☄', 'Comet'], ['2605', '★', 'Black star'], ['2606', '☆', 'White star'], ['269D', '⚝', 'Outlined star'], ['2618', '☘', 'Shamrock'], ['21AF', '↯', 'Lightning'], ['269C', '⚜', 'FleurDeLis'], ['2622', '☢', 'Radiation'], ['2623', '☣', 'Biohazard'], ['2620', '☠', 'Skull'], ['2638', '☸', 'Dharma'], ['2624', '☤', 'Caduceus'], ['2695', '⚕', 'Aeculapius staff'], ['269A', '⚚', 'Hermes staff'], ['2697', '⚗', 'Alembic'], ['266B', '♫', 'Music'], ['2702', '✂', 'Scissors'], ['2696', '⚖', 'Scales'], ['2692', '⚒', 'Hammer and pick'], ['2694', '⚔', 'Swords']];\nvar FONTS = ['Almendra+SC', 'Georgia', 'Times+New+Roman', 'Comic+Sans+MS', 'Lucida+Sans+Unicode', 'Courier+New'];\nvar VOWELS = 'aeiouy'; // global variables\n\nvar svg;\nvar defs;\nvar viewbox;\nvar ocean;\nvar oceanLayers;\nvar oceanPattern;\nvar landmass;\nvar terrs;\nvar grid;\nvar overlay;\nvar rivers;\nvar terrain;\nvar cults;\nvar regions;\nvar borders;\nvar stateBorders;\nvar neutralBorders;\nvar lakes;\nvar routes;\nvar roads;\nvar trails;\nvar searoutes;\nvar coastline;\nvar labels;\nvar burgLabels;\nvar icons;\nvar burgIcons;\nvar markers;\nvar ruler;\nvar debug;\nvar seed;\nvar params;\nvar voronoi;\nvar diagram;\nvar polygons;\nvar spacing;\nvar points = [];\nvar heights;\nvar modules = [];\nvar customization = 0;\nvar history = [];\nvar historyStage = 0;\nvar elSelected;\nvar autoResize = true;\nvar graphSize;\nvar cells = [];\nvar land = [];\nvar riversData = [];\nvar manors = [];\nvar states = [];\nvar features = [];\nvar notes = [];\nvar queue = [];\nvar defaultCultures = [];\nvar cultures = [];\nvar chain = [];\nvar nameBases = [];\nvar nameBase = [];\nvar cultureTree; // global methods\n// download map as SVG or PNG file\n\nfunction saveAsImage(type) {\n  console.time('saveAsImage');\n  var webSafe = ['Georgia', 'Times+New+Roman', 'Comic+Sans+MS', 'Lucida+Sans+Unicode', 'Courier+New', 'Verdana', 'Arial', 'Impact']; // get non-standard fonts used for labels to fetch them from web\n\n  var fontsInUse = []; // to store fonts currently in use\n\n  labels.selectAll('g').each(function (d) {\n    var font = d3.select(this).attr('data-font');\n    if (!font) return;\n    if (webSafe.indexOf(font) !== -1) return; // do not fetch web-safe fonts\n\n    if (fontsInUse.indexOf(font) === -1) fontsInUse.push(font);\n  });\n  var fontsToLoad = 'https://fonts.googleapis.com/css?family=' + fontsInUse.join('|'); // clone svg\n\n  var cloneEl = document.getElementsByTagName('svg')[0].cloneNode(true);\n  cloneEl.id = 'fantasyMap';\n  document.getElementsByTagName('body')[0].appendChild(cloneEl);\n  var clone = d3.select('#fantasyMap'); // rteset transform for svg\n\n  if (type === 'svg') {\n    clone.attr('width', graphWidth).attr('height', graphHeight);\n    clone.select('#viewbox').attr('transform', null);\n\n    if (svgWidth !== graphWidth || svgHeight !== graphHeight) {\n      // move scale bar to right bottom corner\n      var el = clone.select('#scaleBar');\n      if (!el.size()) return;\n      var bbox = el.select('rect').node().getBBox();\n      var tr = [graphWidth - bbox.width, graphHeight - (bbox.height - 10)];\n      el.attr('transform', 'translate(' + Math.round(tr[0]) + ',' + Math.round(tr[1]) + ')');\n    } // to fix use elements sizing\n\n\n    clone.selectAll('use').each(function () {\n      var size = this.parentNode.getAttribute('size') || 1;\n      this.setAttribute('width', size + 'px');\n      this.setAttribute('height', size + 'px');\n    }); // clean attributes\n    //clone.selectAll(\"*\").each(function() {\n    //  const attributes = this.attributes;\n    //  for (let i = 0; i < attributes.length; i++) {\n    //    const attr = attributes[i];\n    //    if (attr.value === \"\" || attr.name.includes(\"data\")) {\n    //      this.removeAttribute(attr.name);\n    //    }\n    //  }\n    //});\n  } // for each g element get inline style\n\n\n  var emptyG = clone.append('g').node();\n  var defaultStyles = window.getComputedStyle(emptyG); // show hidden labels but in reduced size\n\n  clone.select('#labels').selectAll('.hidden').each(function (e) {\n    var size = d3.select(this).attr('font-size');\n    d3.select(this).classed('hidden', false).attr('font-size', _.round(size * 0.4, 2));\n  }); // save group css to style attribute\n\n  clone.selectAll('g, #ruler > g > *, #scaleBar > text').each(function (d) {\n    var compStyle = window.getComputedStyle(this);\n    var style = '';\n\n    for (var i = 0; i < compStyle.length; i++) {\n      var key = compStyle[i];\n      var value = compStyle.getPropertyValue(key); // Firefox mask hack\n\n      if (key === 'mask-image' && value !== defaultStyles.getPropertyValue(key)) {\n        style += 'mask-image: url(\\'#shape\\');';\n        continue;\n      }\n\n      if (key === 'cursor') continue; // cursor should be default\n\n      if (this.hasAttribute(key)) continue; // don't add style if there is the same attribute\n\n      if (value === defaultStyles.getPropertyValue(key)) continue;\n      style += key + ':' + value + ';';\n    }\n\n    if (style != '') this.setAttribute('style', style);\n  });\n  emptyG.remove(); // load fonts as dataURI so they will be available in downloaded svg/png\n\n  GFontToDataURI(fontsToLoad).then(function (cssRules) {\n    clone.select('defs').append('style').text(cssRules.join('\\n'));\n    var svg_xml = new XMLSerializer().serializeToString(clone.node());\n    clone.remove();\n    var blob = new Blob([svg_xml], {\n      type: 'image/svg+xml;charset=utf-8'\n    });\n    var url = window.URL.createObjectURL(blob);\n    var link = document.createElement('a');\n    link.target = '_blank';\n\n    if (type === 'png') {\n      var ratio = svgHeight / svgWidth;\n      canvas.width = svgWidth * pngResolutionInput.value;\n      canvas.height = svgHeight * pngResolutionInput.value;\n      var img = new Image();\n      img.src = url;\n\n      img.onload = function () {\n        window.URL.revokeObjectURL(url);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        link.download = 'fantasy_map_' + _Date$now() + '.png';\n        canvas.toBlob(function (blob) {\n          link.href = window.URL.createObjectURL(blob);\n          document.body.appendChild(link);\n          link.click();\n          window.setTimeout(function () {\n            window.URL.revokeObjectURL(link.href);\n          }, 5000);\n        });\n        canvas.style.opacity = 0;\n        canvas.width = svgWidth;\n        canvas.height = svgHeight;\n      };\n    } else {\n      link.download = 'fantasy_map_' + _Date$now() + '.svg';\n      link.href = url;\n      document.body.appendChild(link);\n      link.click();\n    }\n\n    console.timeEnd('saveAsImage');\n    window.setTimeout(function () {\n      window.URL.revokeObjectURL(url);\n    }, 5000);\n  });\n} // get user-friendly (real-world) height value from map data\n\n\nfunction getFriendlyHeight(h) {\n  var exponent = +heightExponent.value;\n  var unit = heightUnit.value;\n  var unitRatio = 1; // default calculations are in meters\n\n  if (unit === 'ft') unitRatio = 3.28; // if foot\n\n  if (unit === 'f') unitRatio = 0.5468; // if fathom\n\n  var height = -990;\n  if (h >= 20) height = Math.pow(h - 18, exponent);\n  if (h < 20 && h > 0) height = (h - 20) / h * 50;\n  return h + ' (' + Math.round(height * unitRatio) + ' ' + unit + ')';\n} // Get cell info on mouse move (useful for debugging)\n\n\nfunction moved() {\n  var point = d3.mouse(this);\n  var i = diagram.find(point[0], point[1]).index; // update cellInfo\n\n  if (i) {\n    var p = cells[i]; // get cell\n\n    infoX.innerHTML = Math.round(point[0]);\n    infoY.innerHTML = Math.round(point[1]);\n    infoCell.innerHTML = i;\n    infoArea.innerHTML = ifDefined(p.area, 'n/a', 2);\n\n    if (customization === 1) {\n      infoHeight.innerHTML = getFriendlyHeight(heights[i]);\n    } else {\n      infoHeight.innerHTML = getFriendlyHeight(p.height);\n    }\n\n    infoFlux.innerHTML = ifDefined(p.flux, 'n/a', 2);\n    var country = p.region === undefined ? 'n/a' : p.region === 'neutral' ? 'neutral' : states[p.region].name + ' (' + p.region + ')';\n    infoCountry.innerHTML = country;\n    var culture = ifDefined(p.culture) !== 'no' ? cultures[p.culture].name + ' (' + p.culture + ')' : 'n/a';\n    infoCulture.innerHTML = culture;\n    infoPopulation.innerHTML = ifDefined(p.pop, 'n/a', 2);\n    infoBurg.innerHTML = ifDefined(p.manor) !== 'no' ? manors[p.manor].name + ' (' + p.manor + ')' : 'no';\n    var feature = features[p.fn];\n\n    if (feature !== undefined) {\n      var fType = feature.land ? 'Island' : feature.border ? 'Ocean' : 'Lake';\n      infoFeature.innerHTML = fType + ' (' + p.fn + ')';\n    } else {\n      infoFeature.innerHTML = 'n/a';\n    }\n  } // update tooltip\n\n\n  if (toggleTooltips.checked) {\n    tooltip.innerHTML = tooltip.getAttribute('data-main');\n    var tag = event.target.tagName;\n    var path = event.composedPath();\n    var group = path[path.length - 7].id;\n    var subgroup = path[path.length - 8].id;\n    if (group === 'rivers') tip('Click to open River Editor');\n    if (group === 'routes') tip('Click to open Route Editor');\n    if (group === 'terrain') tip('Click to open Relief Icon Editor');\n    if (group === 'labels') tip('Click to open Label Editor');\n    if (group === 'icons') tip('Click to open Icon Editor');\n    if (group === 'markers') tip('Click to open Marker Editor');\n\n    if (group === 'ruler') {\n      if (tag === 'path' || tag === 'line') tip('Drag to move the measurer');\n      if (tag === 'text') tip('Click to remove the measurer');\n      if (tag === 'circle') tip('Drag to adjust the measurer');\n    }\n\n    if (subgroup === 'burgIcons') tip('Click to open Burg Editor');\n    if (subgroup === 'burgLabels') tip('Click to open Burg Editor'); // show legend on hover (if any)\n\n    var id = event.target.id;\n    if (id === '') id = event.target.parentNode.id;\n    if (subgroup === 'burgLabels') id = 'burg' + event.target.getAttribute('data-id');\n    var note = notes.find(function (note) {\n      return note.id === id;\n    });\n    var legend = document.getElementById('legend');\n    var legendHeader = document.getElementById('legendHeader');\n    var legendBody = document.getElementById('legendBody');\n\n    if (note !== undefined && note.legend !== '') {\n      legend.style.display = 'block';\n      legendHeader.innerHTML = note.name;\n      legendBody.innerHTML = note.legend;\n    } else {\n      legend.style.display = 'none';\n      legendHeader.innerHTML = '';\n      legendBody.innerHTML = '';\n    }\n  } // draw line for ranges placing for heightmap Customization\n\n\n  if (customization === 1) {\n    var line = debug.selectAll('.line');\n\n    if (debug.selectAll('.tag').size() === 1) {\n      var x = +debug.select('.tag').attr('cx');\n      var y = +debug.select('.tag').attr('cy');\n\n      if (line.size()) {\n        line.attr('x1', x).attr('y1', y).attr('x2', point[0]).attr('y2', point[1]);\n      } else {\n        debug.insert('line', ':first-child').attr('class', 'line').attr('x1', x).attr('y1', y).attr('x2', point[0]).attr('y2', point[1]);\n      }\n    } else {\n      line.remove();\n    }\n  } // change radius circle for Customization\n\n\n  if (customization > 0) {\n    var brush = $('#brushesButtons > .pressed');\n    var brushId = brush.attr('id');\n    if (brushId === 'brushRange' || brushId === 'brushTrough') return;\n    if (customization !== 5 && !brush.length && !$('div.selected').length) return;\n    var radius = 0;\n\n    if (customization === 1) {\n      radius = brushRadius.value;\n\n      if (brushId === 'brushHill' || brushId === 'brushPit') {\n        radius = Math.pow(brushPower.value * 4, .5);\n      }\n    } else if (customization === 2) radius = countriesManuallyBrush.value;else if (customization === 4) radius = culturesManuallyBrush.value;else if (customization === 5) radius = reliefBulkRemoveRadius.value;\n\n    var r = _.round(6 / graphSize * radius, 1);\n\n    var clr = '#373737';\n\n    if (customization === 2) {\n      var state = +$('div.selected').attr('id').slice(5);\n      clr = states[state].color === 'neutral' ? 'white' : states[state].color;\n    }\n\n    if (customization === 4) {\n      var _culture = +$('div.selected').attr('id').slice(7);\n\n      clr = cultures[_culture].color;\n    }\n\n    moveCircle(point[0], point[1], r, clr);\n  }\n}\n\nfunction _updateLabelGroups() {\n  if ($('#styleElementSelect').value !== 'labels') return;\n  var cont = d3.select('#styleLabelGroupItems');\n  cont.selectAll('button').remove();\n  labels.selectAll('g').each(function () {\n    var el = d3.select(this);\n    var id = el.attr('id');\n    var name = id.charAt(0).toUpperCase() + id.substr(1);\n    var state = el.classed('hidden');\n    if (id === 'burgLabels') return;\n    cont.append('button').attr('id', id).text(name).classed('buttonoff', state).on('click', function () {\n      // toggle label group on click\n      if ($('#hideLabels').checked) $('#hideLabels').click();\n      var el = d3.select('#' + this.id);\n      var state = !el.classed('hidden');\n      el.classed('hidden', state);\n      d3.select(this).classed('buttonoff', state);\n    });\n  });\n}\n\nfunction _applyDefaultStyle() {\n  viewbox.on('touchmove mousemove', moved);\n  landmass.attr('opacity', 1).attr('fill', '#eef6fb');\n  coastline.attr('opacity', .5).attr('stroke', '#1f3846').attr('stroke-width', .7).attr('filter', 'url(#dropShadow)');\n  regions.attr('opacity', .4);\n  stateBorders.attr('opacity', .8).attr('stroke', '#56566d').attr('stroke-width', .7).attr('stroke-dasharray', '1.2 1.5').attr('stroke-linecap', 'butt');\n  neutralBorders.attr('opacity', .8).attr('stroke', '#56566d').attr('stroke-width', .5).attr('stroke-dasharray', '1 1.5').attr('stroke-linecap', 'butt');\n  cults.attr('opacity', .6);\n  rivers.attr('opacity', 1).attr('fill', '#5d97bb');\n  lakes.attr('opacity', .5).attr('fill', '#a6c1fd').attr('stroke', '#5f799d').attr('stroke-width', .7);\n  icons.selectAll('g').attr('opacity', 1).attr('fill', '#ffffff').attr('stroke', '#3e3e4b');\n  roads.attr('opacity', .9).attr('stroke', '#d06324').attr('stroke-width', .35).attr('stroke-dasharray', '1.5').attr('stroke-linecap', 'butt');\n  trails.attr('opacity', .9).attr('stroke', '#d06324').attr('stroke-width', .15).attr('stroke-dasharray', '.8 1.6').attr('stroke-linecap', 'butt');\n  searoutes.attr('opacity', .8).attr('stroke', '#ffffff').attr('stroke-width', .35).attr('stroke-dasharray', '1 2').attr('stroke-linecap', 'round');\n  grid.attr('opacity', 1).attr('stroke', '#808080').attr('stroke-width', .1);\n  ruler.attr('opacity', 1).style('display', 'none').attr('filter', 'url(#dropShadow)');\n  overlay.attr('opacity', .8).attr('stroke', '#808080').attr('stroke-width', .5);\n  markers.attr('filter', 'url(#dropShadow01)'); // ocean style\n\n  svg.style('background-color', '#000000');\n  ocean.attr('opacity', 1);\n  oceanLayers.select('rect').attr('fill', '#53679f');\n  oceanLayers.attr('filter', '');\n  oceanPattern.attr('opacity', 1);\n  oceanLayers.selectAll('path').attr('display', null);\n  styleOceanPattern.checked = true;\n  styleOceanLayers.checked = true;\n  labels.attr('opacity', 1).attr('stroke', '#3a3a3a').attr('stroke-width', 0);\n  var size = Math.round(8 - regionsInput.value / 20);\n  if (size < 3) size = 3;\n  burgLabels.select('#capitals').attr('fill', '#3e3e4b').attr('opacity', 1).attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC').attr('font-size', size).attr('data-size', size);\n  burgLabels.select('#towns').attr('fill', '#3e3e4b').attr('opacity', 1).attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC').attr('font-size', 3).attr('data-size', 4);\n  burgIcons.select('#capitals').attr('size', 1).attr('stroke-width', .24).attr('fill', '#ffffff').attr('stroke', '#3e3e4b').attr('fill-opacity', .7).attr('stroke-opacity', 1).attr('opacity', 1);\n  burgIcons.select('#towns').attr('size', .5).attr('stroke-width', .12).attr('fill', '#ffffff').attr('stroke', '#3e3e4b').attr('fill-opacity', .7).attr('stroke-opacity', 1).attr('opacity', 1);\n  size = Math.round(16 - regionsInput.value / 6);\n  if (size < 6) size = 6;\n  labels.select('#countries').attr('fill', '#3e3e4b').attr('opacity', 1).attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC').attr('font-size', size).attr('data-size', size);\n  icons.select('#capital-anchors').attr('fill', '#ffffff').attr('stroke', '#3e3e4b').attr('stroke-width', 1.2).attr('size', 2);\n  icons.select('#town-anchors').attr('fill', '#ffffff').attr('stroke', '#3e3e4b').attr('stroke-width', 1.2).attr('size', 1);\n} // draw the heightmap\n\n\nfunction _toggleHeight() {\n  var scheme = $('#styleSchemeInput').value;\n  var hColor = color;\n  if (scheme === 'light') hColor = d3.scaleSequential(d3chromatic.interpolateRdYlGn);\n  if (scheme === 'green') hColor = d3.scaleSequential(d3chromatic.interpolateGreens);\n  if (scheme === 'monochrome') hColor = d3.scaleSequential(d3chromatic.interpolateGreys);\n\n  if (!terrs.selectAll('path').size()) {\n    cells.map(function (i, d) {\n      var height = i.height;\n      if (height < 20 && !i.lake) return;\n\n      if (i.lake) {\n        var nHeights = i.neighbors.map(function (e) {\n          if (cells[e].height >= 20) return cells[e].height;\n        });\n        var mean = d3.mean(nHeights);\n        if (!mean) return;\n        height = Math.trunc(mean);\n        if (height < 20 || isNaN(height)) height = 20;\n      }\n\n      var clr = hColor((100 - height) / 100);\n      terrs.append('path').attr('d', 'M' + polygons[d].join('L') + 'Z').attr('fill', clr).attr('stroke', clr);\n    });\n  } else {\n    terrs.selectAll('path').remove();\n  }\n}\n\nfunction fantasyMap() {\n  var version = '0.60b';\n  document.title += ' v. ' + version; // Declare variables\n\n  svg = d3.select('svg');\n  defs = svg.select('#deftemp');\n  viewbox = svg.append('g').attr('id', 'viewbox');\n  ocean = viewbox.append('g').attr('id', 'ocean');\n  oceanLayers = ocean.append('g').attr('id', 'oceanLayers');\n  oceanPattern = ocean.append('g').attr('id', 'oceanPattern');\n  landmass = viewbox.append('g').attr('id', 'landmass');\n  terrs = viewbox.append('g').attr('id', 'terrs');\n  grid = viewbox.append('g').attr('id', 'grid');\n  overlay = viewbox.append('g').attr('id', 'overlay');\n  rivers = viewbox.append('g').attr('id', 'rivers');\n  terrain = viewbox.append('g').attr('id', 'terrain');\n  cults = viewbox.append('g').attr('id', 'cults');\n  regions = viewbox.append('g').attr('id', 'regions');\n  borders = viewbox.append('g').attr('id', 'borders');\n  stateBorders = borders.append('g').attr('id', 'stateBorders');\n  neutralBorders = borders.append('g').attr('id', 'neutralBorders');\n  lakes = viewbox.append('g').attr('id', 'lakes');\n  routes = viewbox.append('g').attr('id', 'routes');\n  roads = routes.append('g').attr('id', 'roads').attr('data-type', 'land');\n  trails = routes.append('g').attr('id', 'trails').attr('data-type', 'land');\n  searoutes = routes.append('g').attr('id', 'searoutes').attr('data-type', 'sea');\n  coastline = viewbox.append('g').attr('id', 'coastline');\n  labels = viewbox.append('g').attr('id', 'labels');\n  burgLabels = labels.append('g').attr('id', 'burgLabels');\n  icons = viewbox.append('g').attr('id', 'icons');\n  burgIcons = icons.append('g').attr('id', 'burgIcons');\n  markers = viewbox.append('g').attr('id', 'markers');\n  ruler = viewbox.append('g').attr('id', 'ruler');\n  debug = viewbox.append('g').attr('id', 'debug');\n  labels.append('g').attr('id', 'countries');\n  burgIcons.append('g').attr('id', 'capitals');\n  burgLabels.append('g').attr('id', 'capitals');\n  burgIcons.append('g').attr('id', 'towns');\n  burgLabels.append('g').attr('id', 'towns');\n  icons.append('g').attr('id', 'capital-anchors');\n  icons.append('g').attr('id', 'town-anchors');\n  terrain.append('g').attr('id', 'hills');\n  terrain.append('g').attr('id', 'mounts');\n  terrain.append('g').attr('id', 'swamps');\n  terrain.append('g').attr('id', 'forests'); // append ocean pattern\n\n  oceanPattern.append('rect').attr('fill', 'url(#oceanic)').attr('stroke', 'none');\n  oceanLayers.append('rect').attr('id', 'oceanBase'); // canvas element for raster images\n\n  var canvas = document.getElementById('canvas');\n  var ctx = canvas.getContext('2d'); // Color schemes\n\n  var color = d3.scaleSequential(d3chromatic.interpolateSpectral);\n  var colors8 = d3.scaleOrdinal(d3chromatic.schemeSet2);\n  var colors20 = d3.scaleOrdinal(d3.schemeCategory20); // D3 drag and zoom behavior\n\n  var scale = 1,\n      viewX = 0,\n      viewY = 0;\n  var zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', zoomed);\n  svg.call(zoom); // D3 Line generator variables\n\n  var lineGen = d3.line().x(function (d) {\n    return d.scX;\n  }).y(function (d) {\n    return d.scY;\n  }).curve(d3.curveCatmullRom);\n  applyStoredOptions();\n  graphWidth = +mapWidthInput.value; // voronoi graph extention, should be stable for each map\n\n  graphHeight = +mapHeightInput.value;\n  svgWidth = graphWidth;\n  svgHeight = graphHeight; // svg canvas resolution, can vary for each map\n  // toggle off loading screen and on menus\n\n  $('#loading, #initial').remove();\n  svg.style('background-color', '#000000');\n\n  if (localStorage.getItem('disable_click_arrow_tooltip')) {\n    tooltip.innerHTML = '';\n    tooltip.setAttribute('data-main', '');\n    $('#optionsTrigger').removeClass('glow');\n  }\n\n  $('#mapLayers').sortable({\n    items: 'li:not(.solid)',\n    cancel: '.solid',\n    update: moveLayer\n  });\n  $('#templateBody').sortable({\n    items: 'div:not(div[data-type=\\'Mountain\\'])'\n  });\n  $('#mapLayers, #templateBody').disableSelection();\n\n  function zoomed() {\n    var scaleDiff = Math.abs(scale - d3.event.transform.k);\n    scale = d3.event.transform.k;\n    viewX = d3.event.transform.x;\n    viewY = d3.event.transform.y;\n    viewbox.attr('transform', d3.event.transform); // rescale only if zoom is significally changed\n\n    if (scaleDiff > 0.001) {\n      invokeActiveZooming();\n      drawScaleBar();\n    }\n  } // Zoom to specific point (x,y - coods, z - scale, d - duration)\n\n\n  function zoomTo(x, y, z, d) {\n    var transform = d3.zoomIdentity.translate(x * -z + graphWidth / 2, y * -z + graphHeight / 2).scale(z);\n    svg.transition().duration(d).call(zoom.transform, transform);\n  } // Reset zoom to initial\n\n\n  function resetZoom(duration) {\n    zoom.transform(svg, d3.zoomIdentity);\n  } // Active zooming\n\n\n  function invokeActiveZooming() {\n    // toggle shade/blur filter on zoom\n    var filter = scale > 2.6 ? 'url(#blurFilter)' : 'url(#dropShadow)';\n    if (scale > 1.5 && scale <= 2.6) filter = null;\n    coastline.attr('filter', filter); // rescale lables on zoom (active zooming)\n\n    labels.selectAll('g').each(function (d) {\n      var el = d3.select(this);\n      if (el.attr('id') === 'burgLabels') return;\n      var desired = +el.attr('data-size');\n\n      var relative = _.round((desired + desired / scale) / 2, 2);\n\n      if (relative < 2) relative = 2;\n      el.attr('font-size', relative);\n\n      if ($('#hideLabels').checked) {\n        el.classed('hidden', relative * scale < 6);\n\n        _updateLabelGroups();\n      }\n    }); // rescale map markers\n\n    markers.selectAll('use').each(function (d) {\n      var el = d3.select(this);\n      var x = +el.attr('data-x'),\n          y = +el.attr('data-y');\n      var desired = +el.attr('data-size');\n      var size = desired * 5 + 25 / scale;\n      if (size < 1) size = 1;\n      el.attr('x', x - size / 2).attr('y', y - size).attr('width', size).attr('height', size);\n    });\n\n    if (ruler.size()) {\n      if (ruler.style('display') !== 'none') {\n        if (ruler.selectAll('g').size() < 1) {\n          return;\n        }\n\n        var factor = _.round(1 / Math.pow(scale, 0.3), 1);\n\n        ruler.selectAll('circle:not(.center)').attr('r', 2 * factor).attr('stroke-width', 0.5 * factor);\n        ruler.selectAll('circle.center').attr('r', 1.2 * factor).attr('stroke-width', 0.3 * factor);\n        ruler.selectAll('text').attr('font-size', 10 * factor);\n        ruler.selectAll('line, path').attr('stroke-width', factor);\n      }\n    }\n  }\n\n  addDragToUpload(); // Changelog dialog window\n\n  var storedVersion = localStorage.getItem('version'); // show message on load\n\n  if (storedVersion != version) {\n    alertMessage.innerHTML = \"<b>2018-29-23</b>:\\n    The <i>Fantasy Map Generator</i> is updated up to version <b>\".concat(version, \"</b>.\\n    Main changes:<br><br>\\n    <li>Map Markers</li>\\n    <li>Legend Editor (text notes)</li>\\n    <li>Bug fixes</li>\\n    <br>See a <a href='https://www.reddit.com/r/FantasyMapGenerator/comments/9iarje/update_new_version_is_published_v060b' target='_blank'>dedicated post</a> for the details.\\n    <br><br>\\n    <i>Join our <a href='https://www.reddit.com/r/FantasyMapGenerator/' target='_blank'>Reddit community</a>\\n    to share created maps, discuss the Generator, report bugs, ask questions and propose new features.\\n    You may also report bugs <a href='https://github.com/Azgaar/Fantasy-Map-Generator/issues' target='_blank'>here</a>.</i>\");\n    $('#alert').dialog({\n      resizable: false,\n      title: 'Fantasy Map Generator update',\n      width: 320,\n      buttons: {\n        'Don\\'t show again': function DonTShowAgain() {\n          localStorage.setItem('version', version);\n          $(this).dialog('close');\n        },\n        Close: function Close() {\n          $(this).dialog('close');\n        }\n      },\n      position: {\n        my: 'center',\n        at: 'center',\n        of: 'svg'\n      }\n    });\n  }\n\n  getSeed(); // get and set random generator seed\n\n  applyNamesData(); // apply default namesbase on load\n\n  generate(); // generate map on load\n\n  _applyDefaultStyle(); // apply style on load\n\n\n  focusOn(); // based on searchParams focus on point, cell or burg from MFCG\n\n  invokeActiveZooming(); // to hide what need to be hidden\n\n  function generate() {\n    console.group('Random map');\n    console.time('TOTAL');\n    applyMapSize();\n    randomizeOptions();\n    placePoints();\n    calculateVoronoi(points);\n    detectNeighbors();\n    drawScaleBar();\n    defineHeightmap();\n    markFeatures();\n    drawOcean();\n    elevateLakes();\n    resolveDepressionsPrimary();\n    reGraph();\n    resolveDepressionsSecondary();\n    flux();\n    addLakes();\n    drawCoastline();\n    drawRelief();\n    generateCultures();\n    manorsAndRegions();\n    cleanData();\n    console.timeEnd('TOTAL');\n    console.groupEnd('Random map');\n  } // get or generate map seed\n\n\n  function getSeed() {\n    var url = new URL(window.location.href);\n    params = url.searchParams;\n    seed = params.get('seed') || Math.floor(Math.random() * 1e9);\n    console.log(' seed: ' + seed);\n    $('#optionsSeed').value = seed;\n    seedrandom(seed);\n  } // generate new map seed\n\n\n  function changeSeed() {\n    seed = Math.floor(Math.random() * 1e9);\n    console.log(' seed: ' + seed);\n    $('#optionsSeed').value = seed;\n    seedrandom(seed);\n  } // load options from LocalStorage is any\n\n\n  function applyStoredOptions() {\n    if (localStorage.getItem('mapWidth') && localStorage.getItem('mapHeight')) {\n      mapWidthInput.value = localStorage.getItem('mapWidth');\n      mapHeightInput.value = localStorage.getItem('mapHeight');\n    } else {\n      mapWidthInput.value = window.innerWidth;\n      mapHeightInput.value = window.innerHeight;\n    }\n\n    if (localStorage.getItem('graphSize')) {\n      graphSize = localStorage.getItem('graphSize');\n      sizeInput.value = sizeOutput.value = graphSize;\n    } else {\n      graphSize = +sizeInput.value;\n    }\n\n    if (localStorage.getItem('template')) {\n      templateInput.value = localStorage.getItem('template');\n      lockTemplateInput.setAttribute('data-locked', 1);\n      lockTemplateInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('manors')) {\n      manorsInput.value = manorsOutput.value = localStorage.getItem('manors');\n      lockManorsInput.setAttribute('data-locked', 1);\n      lockManorsInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('regions')) {\n      regionsInput.value = regionsOutput.value = localStorage.getItem('regions');\n      lockRegionsInput.setAttribute('data-locked', 1);\n      lockRegionsInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('power')) {\n      powerInput.value = powerOutput.value = localStorage.getItem('power');\n      lockPowerInput.setAttribute('data-locked', 1);\n      lockPowerInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('neutral')) neutralInput.value = neutralOutput.value = localStorage.getItem('neutral');\n\n    if (localStorage.getItem('names')) {\n      namesInput.value = localStorage.getItem('names');\n      lockNamesInput.setAttribute('data-locked', 1);\n      lockNamesInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('cultures')) {\n      culturesInput.value = culturesOutput.value = localStorage.getItem('cultures');\n      lockCulturesInput.setAttribute('data-locked', 1);\n      lockCulturesInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('prec')) {\n      precInput.value = precOutput.value = localStorage.getItem('prec');\n      lockPrecInput.setAttribute('data-locked', 1);\n      lockPrecInput.className = 'icon-lock';\n    }\n\n    if (localStorage.getItem('swampiness')) swampinessInput.value = swampinessOutput.value = localStorage.getItem('swampiness');\n    if (localStorage.getItem('outlineLayers')) outlineLayersInput.value = localStorage.getItem('outlineLayers');\n\n    if (localStorage.getItem('pngResolution')) {\n      pngResolutionInput.value = localStorage.getItem('pngResolution');\n      pngResolutionOutput.value = pngResolutionInput.value + 'x';\n    }\n\n    if (localStorage.getItem('transparency')) {\n      transparencyInput.value = transparencyOutput.value = localStorage.getItem('transparency');\n      changeDialogsTransparency(transparencyInput.value);\n    } else {\n      changeDialogsTransparency(0);\n    }\n  }\n\n  function restoreDefaultOptions() {\n    // remove ALL saved data from LocalStorage\n    localStorage.clear(); // set defaut values\n\n    mapWidthInput.value = window.innerWidth;\n    mapHeightInput.value = window.innerHeight;\n    changeMapSize();\n    graphSize = sizeInput.value = sizeOutput.value = 1;\n    $('#options i[class^=\\'icon-lock\\']').each(function () {\n      this.setAttribute('data-locked', 0);\n      this.className = 'icon-lock-open';\n\n      if (this.id === 'lockNeutralInput' || this.id === 'lockSwampinessInput') {\n        this.setAttribute('data-locked', 1);\n        this.className = 'icon-lock';\n      }\n    });\n    neutralInput.value = neutralOutput.value = 200;\n    swampinessInput.value = swampinessOutput.value = 10;\n    outlineLayersInput.value = '-6,-3,-1';\n    transparencyInput.value = transparencyOutput.value = 0;\n    changeDialogsTransparency(0);\n    pngResolutionInput.value = 5;\n    pngResolutionOutput.value = '5x';\n    randomizeOptions();\n  } // apply names data from localStorage if available\n\n\n  function applyNamesData() {\n    applyDefaultNamesData();\n    defaultCultures = [{\n      name: 'Shwazen',\n      color: '#b3b3b3',\n      base: 0\n    }, {\n      name: 'Angshire',\n      color: '#fca463',\n      base: 1\n    }, {\n      name: 'Luari',\n      color: '#99acfb',\n      base: 2\n    }, {\n      name: 'Tallian',\n      color: '#a6d854',\n      base: 3\n    }, {\n      name: 'Toledi',\n      color: '#ffd92f',\n      base: 4\n    }, {\n      name: 'Slovian',\n      color: '#e5c494',\n      base: 5\n    }, {\n      name: 'Norse',\n      color: '#dca3e4',\n      base: 6\n    }, {\n      name: 'Elladian',\n      color: '#66c4a0',\n      base: 7\n    }, {\n      name: 'Latian',\n      color: '#ff7174',\n      base: 8\n    }, {\n      name: 'Soomi',\n      color: '#85c8fa',\n      base: 9\n    }, {\n      name: 'Koryo',\n      color: '#578880',\n      base: 10\n    }, {\n      name: 'Hantzu',\n      color: '#becb8d',\n      base: 11\n    }, {\n      name: 'Yamoto',\n      color: '#ffd9da',\n      base: 12\n    }];\n  } // apply default names data\n\n\n  function applyDefaultNamesData() {\n    nameBases = [// min; max; mean; common\n    {\n      name: 'German',\n      method: 'let-to-syl',\n      min: 4,\n      max: 11,\n      d: 'lt',\n      m: 0.1\n    }, // real: 3; 17; 8.6; 8\n    {\n      name: 'English',\n      method: 'let-to-syl',\n      min: 5,\n      max: 10,\n      d: '',\n      m: 0.3\n    }, // real: 4; 13; 7.9; 8\n    {\n      name: 'French',\n      method: 'let-to-syl',\n      min: 4,\n      max: 10,\n      d: 'lns',\n      m: 0.3\n    }, // real: 3; 15; 7.6; 6\n    {\n      name: 'Italian',\n      method: 'let-to-syl',\n      min: 4,\n      max: 11,\n      d: 'clrt',\n      m: 0.2\n    }, // real: 4; 14; 7.7; 7\n    {\n      name: 'Castillian',\n      method: 'let-to-syl',\n      min: 4,\n      max: 10,\n      d: 'lr',\n      m: 0\n    }, // real: 2; 13; 7.5; 8\n    {\n      name: 'Ruthenian',\n      method: 'let-to-syl',\n      min: 4,\n      max: 9,\n      d: '',\n      m: 0\n    }, // real: 3; 12; 7.1; 7\n    {\n      name: 'Nordic',\n      method: 'let-to-syl',\n      min: 5,\n      max: 9,\n      d: 'kln',\n      m: 0.1\n    }, // real: 3; 12; 7.5; 6\n    {\n      name: 'Greek',\n      method: 'let-to-syl',\n      min: 4,\n      max: 10,\n      d: 'ls',\n      m: 0.2\n    }, // real: 3; 14; 7.1; 6\n    {\n      name: 'Roman',\n      method: 'let-to-syl',\n      min: 5,\n      max: 10,\n      d: '',\n      m: 1\n    }, // real: 3; 15; 8.0; 7\n    {\n      name: 'Finnic',\n      method: 'let-to-syl',\n      min: 3,\n      max: 10,\n      d: 'aktu',\n      m: 0\n    }, // real: 3; 13; 7.5; 6\n    {\n      name: 'Korean',\n      method: 'let-to-syl',\n      min: 5,\n      max: 10,\n      d: '',\n      m: 0\n    }, // real: 3; 13; 6.8; 7\n    {\n      name: 'Chinese',\n      method: 'let-to-syl',\n      min: 5,\n      max: 9,\n      d: '',\n      m: 0\n    }, // real: 4; 11; 6.9; 6\n    {\n      name: 'Japanese',\n      method: 'let-to-syl',\n      min: 3,\n      max: 9,\n      d: '',\n      m: 0 // real: 2; 15; 6.8; 6\n\n    }];\n    nameBase = [['Achern', 'Aichhalden', 'Aitern', 'Albbruck', 'Alpirsbach', 'Altensteig', 'Althengstett', 'Appenweier', 'Auggen', 'Wildbad', 'Badenen', 'Badenweiler', 'Baiersbronn', 'Ballrechten', 'Bellingen', 'Berghaupten', 'Bernau', 'Biberach', 'Biederbach', 'Binzen', 'Birkendorf', 'Birkenfeld', 'Bischweier', 'Blumberg', 'Bollen', 'Bollschweil', 'Bonndorf', 'Bosingen', 'Braunlingen', 'Breisach', 'Breisgau', 'Breitnau', 'Brigachtal', 'Buchenbach', 'Buggingen', 'Buhl', 'Buhlertal', 'Calw', 'Dachsberg', 'Dobel', 'Donaueschingen', 'Dornhan', 'Dornstetten', 'Dottingen', 'Dunningen', 'Durbach', 'Durrheim', 'Ebhausen', 'Ebringen', 'Efringen', 'Egenhausen', 'Ehrenkirchen', 'Ehrsberg', 'Eimeldingen', 'Eisenbach', 'Elzach', 'Elztal', 'Emmendingen', 'Endingen', 'Engelsbrand', 'Enz', 'Enzklosterle', 'Eschbronn', 'Ettenheim', 'Ettlingen', 'Feldberg', 'Fischerbach', 'Fischingen', 'Fluorn', 'Forbach', 'Freiamt', 'Freiburg', 'Freudenstadt', 'Friedenweiler', 'Friesenheim', 'Frohnd', 'Furtwangen', 'Gaggenau', 'Geisingen', 'Gengenbach', 'Gernsbach', 'Glatt', 'Glatten', 'Glottertal', 'Gorwihl', 'Gottenheim', 'Grafenhausen', 'Grenzach', 'Griesbach', 'Gutach', 'Gutenbach', 'Hag', 'Haiterbach', 'Hardt', 'Harmersbach', 'Hasel', 'Haslach', 'Hausach', 'Hausen', 'Hausern', 'Heitersheim', 'Herbolzheim', 'Herrenalb', 'Herrischried', 'Hinterzarten', 'Hochenschwand', 'Hofen', 'Hofstetten', 'Hohberg', 'Horb', 'Horben', 'Hornberg', 'Hufingen', 'Ibach', 'Ihringen', 'Inzlingen', 'Kandern', 'Kappel', 'Kappelrodeck', 'Karlsbad', 'Karlsruhe', 'Kehl', 'Keltern', 'Kippenheim', 'Kirchzarten', 'Konigsfeld', 'Krozingen', 'Kuppenheim', 'Kussaberg', 'Lahr', 'Lauchringen', 'Lauf', 'Laufenburg', 'Lautenbach', 'Lauterbach', 'Lenzkirch', 'Liebenzell', 'Loffenau', 'Loffingen', 'Lorrach', 'Lossburg', 'Mahlberg', 'Malsburg', 'Malsch', 'March', 'Marxzell', 'Marzell', 'Maulburg', 'Monchweiler', 'Muhlenbach', 'Mullheim', 'Munstertal', 'Murg', 'Nagold', 'Neubulach', 'Neuenburg', 'Neuhausen', 'Neuried', 'Neuweiler', 'Niedereschach', 'Nordrach', 'Oberharmersbach', 'Oberkirch', 'Oberndorf', 'Oberbach', 'Oberried', 'Oberwolfach', 'Offenburg', 'Ohlsbach', 'Oppenau', 'Ortenberg', 'otigheim', 'Ottenhofen', 'Ottersweier', 'Peterstal', 'Pfaffenweiler', 'Pfalzgrafenweiler', 'Pforzheim', 'Rastatt', 'Renchen', 'Rheinau', 'Rheinfelden', 'Rheinmunster', 'Rickenbach', 'Rippoldsau', 'Rohrdorf', 'Rottweil', 'Rummingen', 'Rust', 'Sackingen', 'Sasbach', 'Sasbachwalden', 'Schallbach', 'Schallstadt', 'Schapbach', 'Schenkenzell', 'Schiltach', 'Schliengen', 'Schluchsee', 'Schomberg', 'Schonach', 'Schonau', 'Schonenberg', 'Schonwald', 'Schopfheim', 'Schopfloch', 'Schramberg', 'Schuttertal', 'Schwenningen', 'Schworstadt', 'Seebach', 'Seelbach', 'Seewald', 'Sexau', 'Simmersfeld', 'Simonswald', 'Sinzheim', 'Solden', 'Staufen', 'Stegen', 'Steinach', 'Steinen', 'Steinmauern', 'Straubenhardt', 'Stuhlingen', 'Sulz', 'Sulzburg', 'Teinach', 'Tiefenbronn', 'Tiengen', 'Titisee', 'Todtmoos', 'Todtnau', 'Todtnauberg', 'Triberg', 'Tunau', 'Tuningen', 'uhlingen', 'Unterkirnach', 'Reichenbach', 'Utzenfeld', 'Villingen', 'Villingendorf', 'Vogtsburg', 'Vohrenbach', 'Waldachtal', 'Waldbronn', 'Waldkirch', 'Waldshut', 'Wehr', 'Weil', 'Weilheim', 'Weisenbach', 'Wembach', 'Wieden', 'Wiesental', 'Wildberg', 'Winzeln', 'Wittlingen', 'Wittnau', 'Wolfach', 'Wutach', 'Wutoschingen', 'Wyhlen', 'Zavelstein'], ['Abingdon', 'Albrighton', 'Alcester', 'Almondbury', 'Altrincham', 'Amersham', 'Andover', 'Appleby', 'Ashboume', 'Atherstone', 'Aveton', 'Axbridge', 'Aylesbury', 'Baldock', 'Bamburgh', 'Barton', 'Basingstoke', 'Berden', 'Bere', 'Berkeley', 'Berwick', 'Betley', 'Bideford', 'Bingley', 'Birmingham', 'Blandford', 'Blechingley', 'Bodmin', 'Bolton', 'Bootham', 'Boroughbridge', 'Boscastle', 'Bossinney', 'Bramber', 'Brampton', 'Brasted', 'Bretford', 'Bridgetown', 'Bridlington', 'Bromyard', 'Bruton', 'Buckingham', 'Bungay', 'Burton', 'Calne', 'Cambridge', 'Canterbury', 'Carlisle', 'Castleton', 'Caus', 'Charmouth', 'Chawleigh', 'Chichester', 'Chillington', 'Chinnor', 'Chipping', 'Chisbury', 'Cleobury', 'Clifford', 'Clifton', 'Clitheroe', 'Cockermouth', 'Coleshill', 'Combe', 'Congleton', 'Crafthole', 'Crediton', 'Cuddenbeck', 'Dalton', 'Darlington', 'Dodbrooke', 'Drax', 'Dudley', 'Dunstable', 'Dunster', 'Dunwich', 'Durham', 'Dymock', 'Exeter', 'Exning', 'Faringdon', 'Felton', 'Fenny', 'Finedon', 'Flookburgh', 'Fowey', 'Frampton', 'Gateshead', 'Gatton', 'Godmanchester', 'Grampound', 'Grantham', 'Guildford', 'Halesowen', 'Halton', 'Harbottle', 'Harlow', 'Hatfield', 'Hatherleigh', 'Haydon', 'Helston', 'Henley', 'Hertford', 'Heytesbury', 'Hinckley', 'Hitchin', 'Holme', 'Hornby', 'Horsham', 'Kendal', 'Kenilworth', 'Kilkhampton', 'Kineton', 'Kington', 'Kinver', 'Kirby', 'Knaresborough', 'Knutsford', 'Launceston', 'Leighton', 'Lewes', 'Linton', 'Louth', 'Luton', 'Lyme', 'Lympstone', 'Macclesfield', 'Madeley', 'Malborough', 'Maldon', 'Manchester', 'Manningtree', 'Marazion', 'Marlborough', 'Marshfield', 'Mere', 'Merryfield', 'Middlewich', 'Midhurst', 'Milborne', 'Mitford', 'Modbury', 'Montacute', 'Mousehole', 'Newbiggin', 'Newborough', 'Newbury', 'Newenden', 'Newent', 'Norham', 'Northleach', 'Noss', 'Oakham', 'Olney', 'Orford', 'Ormskirk', 'Oswestry', 'Padstow', 'Paignton', 'Penkneth', 'Penrith', 'Penzance', 'Pershore', 'Petersfield', 'Pevensey', 'Pickering', 'Pilton', 'Pontefract', 'Portsmouth', 'Preston', 'Quatford', 'Reading', 'Redcliff', 'Retford', 'Rockingham', 'Romney', 'Rothbury', 'Rothwell', 'Salisbury', 'Saltash', 'Seaford', 'Seasalter', 'Sherston', 'Shifnal', 'Shoreham', 'Sidmouth', 'Skipsea', 'Skipton', 'Solihull', 'Somerton', 'Southam', 'Southwark', 'Standon', 'Stansted', 'Stapleton', 'Stottesdon', 'Sudbury', 'Swavesey', 'Tamerton', 'Tarporley', 'Tetbury', 'Thatcham', 'Thaxted', 'Thetford', 'Thornbury', 'Tintagel', 'Tiverton', 'Torksey', 'Totnes', 'Towcester', 'Tregoney', 'Trematon', 'Tutbury', 'Uxbridge', 'Wallingford', 'Wareham', 'Warenmouth', 'Wargrave', 'Warton', 'Watchet', 'Watford', 'Wendover', 'Westbury', 'Westcheap', 'Weymouth', 'Whitford', 'Wickwar', 'Wigan', 'Wigmore', 'Winchelsea', 'Winkleigh', 'Wiscombe', 'Witham', 'Witheridge', 'Wiveliscombe', 'Woodbury', 'Yeovil'], ['Adon', 'Aillant', 'Amilly', 'Andonville', 'Ardon', 'Artenay', 'Ascheres', 'Ascoux', 'Attray', 'Aubin', 'Audeville', 'Aulnay', 'Autruy', 'Auvilliers', 'Auxy', 'Aveyron', 'Baccon', 'Bardon', 'Barville', 'Batilly', 'Baule', 'Bazoches', 'Beauchamps', 'Beaugency', 'Beaulieu', 'Beaune', 'Bellegarde', 'Boesses', 'Boigny', 'Boiscommun', 'Boismorand', 'Boisseaux', 'Bondaroy', 'Bonnee', 'Bonny', 'Bordes', 'Bou', 'Bougy', 'Bouilly', 'Boulay', 'Bouzonville', 'Bouzy', 'Boynes', 'Bray', 'Breteau', 'Briare', 'Briarres', 'Bricy', 'Bromeilles', 'Bucy', 'Cepoy', 'Cercottes', 'Cerdon', 'Cernoy', 'Cesarville', 'Chailly', 'Chaingy', 'Chalette', 'Chambon', 'Champoulet', 'Chanteau', 'Chantecoq', 'Chapell', 'Charme', 'Charmont', 'Charsonville', 'Chateau', 'Chateauneuf', 'Chatel', 'Chatenoy', 'Chatillon', 'Chaussy', 'Checy', 'Chevannes', 'Chevillon', 'Chevilly', 'Chevry', 'Chilleurs', 'Choux', 'Chuelles', 'Clery', 'Coinces', 'Coligny', 'Combleux', 'Combreux', 'Conflans', 'Corbeilles', 'Corquilleroy', 'Cortrat', 'Coudroy', 'Coullons', 'Coulmiers', 'Courcelles', 'Courcy', 'Courtemaux', 'Courtempierre', 'Courtenay', 'Cravant', 'Crottes', 'Dadonville', 'Dammarie', 'Dampierre', 'Darvoy', 'Desmonts', 'Dimancheville', 'Donnery', 'Dordives', 'Dossainville', 'Douchy', 'Dry', 'Echilleuses', 'Egry', 'Engenville', 'Epieds', 'Erceville', 'Ervauville', 'Escrennes', 'Escrignelles', 'Estouy', 'Faverelles', 'Fay', 'Feins', 'Ferolles', 'Ferrieres', 'Fleury', 'Fontenay', 'Foret', 'Foucherolles', 'Freville', 'Gatinais', 'Gaubertin', 'Gemigny', 'Germigny', 'Gidy', 'Gien', 'Girolles', 'Givraines', 'Gondreville', 'Grangermont', 'Greneville', 'Griselles', 'Guigneville', 'Guilly', 'Gyleslonains', 'Huetre', 'Huisseau', 'Ingrannes', 'Ingre', 'Intville', 'Isdes', 'Jargeau', 'Jouy', 'Juranville', 'Bussiere', 'Laas', 'Ladon', 'Lailly', 'Langesse', 'Leouville', 'Ligny', 'Lombreuil', 'Lorcy', 'Lorris', 'Loury', 'Louzouer', 'Malesherbois', 'Marcilly', 'Mardie', 'Mareau', 'Marigny', 'Marsainvilliers', 'Melleroy', 'Menestreau', 'Merinville', 'Messas', 'Meung', 'Mezieres', 'Migneres', 'Mignerette', 'Mirabeau', 'Montargis', 'Montbarrois', 'Montbouy', 'Montcresson', 'Montereau', 'Montigny', 'Montliard', 'Mormant', 'Morville', 'Moulinet', 'Moulon', 'Nancray', 'Nargis', 'Nesploy', 'Neuville', 'Neuvy', 'Nevoy', 'Nibelle', 'Nogent', 'Noyers', 'Ocre', 'Oison', 'Olivet', 'Ondreville', 'Onzerain', 'Orleans', 'Ormes', 'Orville', 'Oussoy', 'Outarville', 'Ouzouer', 'Pannecieres', 'Pannes', 'Patay', 'Paucourt', 'Pers', 'Pierrefitte', 'Pithiverais', 'Pithiviers', 'Poilly', 'Potier', 'Prefontaines', 'Presnoy', 'Pressigny', 'Puiseaux', 'Quiers', 'Ramoulu', 'Rebrechien', 'Rouvray', 'Rozieres', 'Rozoy', 'Ruan', 'Sandillon', 'Santeau', 'Saran', 'Sceaux', 'Seichebrieres', 'Semoy', 'Sennely', 'Sermaises', 'Sigloy', 'Solterre', 'Sougy', 'Sully', 'Sury', 'Tavers', 'Thignonville', 'Thimory', 'Thorailles', 'Thou', 'Tigy', 'Tivernon', 'Tournoisis', 'Trainou', 'Treilles', 'Trigueres', 'Trinay', 'Vannes', 'Varennes', 'Vennecy', 'Vieilles', 'Vienne', 'Viglain', 'Vignes', 'Villamblain', 'Villemandeur', 'Villemoutiers', 'Villemurlin', 'Villeneuve', 'Villereau', 'Villevoques', 'Villorceau', 'Vimory', 'Vitry', 'Vrigny', 'Ivre'], ['Accumoli', 'Acquafondata', 'Acquapendente', 'Acuto', 'Affile', 'Agosta', 'Alatri', 'Albano', 'Allumiere', 'Alvito', 'Amaseno', 'Amatrice', 'Anagni', 'Anguillara', 'Anticoli', 'Antrodoco', 'Anzio', 'Aprilia', 'Aquino', 'Arce', 'Arcinazzo', 'Ardea', 'Ariccia', 'Arlena', 'Arnara', 'Arpino', 'Arsoli', 'Artena', 'Ascrea', 'Atina', 'Ausonia', 'Bagnoregio', 'Barbarano', 'Bassano', 'Bassiano', 'Bellegra', 'Belmonte', 'Blera', 'Bolsena', 'Bomarzo', 'Borbona', 'Borgo', 'Borgorose', 'Boville', 'Bracciano', 'Broccostella', 'Calcata', 'Camerata', 'Campagnano', 'Campodimele', 'Campoli', 'Canale', 'Canepina', 'Canino', 'Cantalice', 'Cantalupo', 'Canterano', 'Capena', 'Capodimonte', 'Capranica', 'Caprarola', 'Carbognano', 'Casalattico', 'Casalvieri', 'Casape', 'Casaprota', 'Casperia', 'Cassino', 'Castelforte', 'Castelliri', 'Castello', 'Castelnuovo', 'Castiglione', 'Castro', 'Castrocielo', 'Cave', 'Ceccano', 'Celleno', 'Cellere', 'Ceprano', 'Cerreto', 'Cervara', 'Cervaro', 'Cerveteri', 'Ciampino', 'Ciciliano', 'Cineto', 'Cisterna', 'Cittaducale', 'Cittareale', 'Civita', 'Civitavecchia', 'Civitella', 'Colfelice', 'Collalto', 'Colle', 'Colleferro', 'Collegiove', 'Collepardo', 'Collevecchio', 'Colli', 'Colonna', 'Concerviano', 'Configni', 'Contigliano', 'Corchiano', 'Coreno', 'Cori', 'Cottanello', 'Esperia', 'Fabrica', 'Faleria', 'Falvaterra', 'Fara', 'Farnese', 'Ferentino', 'Fiamignano', 'Fiano', 'Filacciano', 'Filettino', 'Fiuggi', 'Fiumicino', 'Fondi', 'Fontana', 'Fonte', 'Fontechiari', 'Forano', 'Formello', 'Formia', 'Frascati', 'Frasso', 'Frosinone', 'Fumone', 'Gaeta', 'Gallese', 'Gallicano', 'Gallinaro', 'Gavignano', 'Genazzano', 'Genzano', 'Gerano', 'Giuliano', 'Gorga', 'Gradoli', 'Graffignano', 'Greccio', 'Grottaferrata', 'Grotte', 'Guarcino', 'Guidonia', 'Ischia', 'Isola', 'Itri', 'Jenne', 'Labico', 'Labro', 'Ladispoli', 'Lanuvio', 'Lariano', 'Latera', 'Lenola', 'Leonessa', 'Licenza', 'Longone', 'Lubriano', 'Maenza', 'Magliano', 'Mandela', 'Manziana', 'Marano', 'Marcellina', 'Marcetelli', 'Marino', 'Marta', 'Mazzano', 'Mentana', 'Micigliano', 'Minturno', 'Mompeo', 'Montalto', 'Montasola', 'Monte', 'Montebuono', 'Montefiascone', 'Monteflavio', 'Montelanico', 'Monteleone', 'Montelibretti', 'Montenero', 'Monterosi', 'Monterotondo', 'Montopoli', 'Montorio', 'Moricone', 'Morlupo', 'Morolo', 'Morro', 'Nazzano', 'Nemi', 'Nepi', 'Nerola', 'Nespolo', 'Nettuno', 'Norma', 'Olevano', 'Onano', 'Oriolo', 'Orte', 'Orvinio', 'Paganico', 'Palestrina', 'Paliano', 'Palombara', 'Pastena', 'Patrica', 'Percile', 'Pescorocchiano', 'Pescosolido', 'Petrella', 'Piansano', 'Picinisco', 'Pico', 'Piedimonte', 'Piglio', 'Pignataro', 'Pisoniano', 'Pofi', 'Poggio', 'Poli', 'Pomezia', 'Pontecorvo', 'Pontinia', 'Ponza', 'Ponzano', 'Posta', 'Pozzaglia', 'Priverno', 'Proceno', 'Prossedi', 'Riano', 'Rieti', 'Rignano', 'Riofreddo', 'Ripi', 'Rivodutri', 'Rocca', 'Roccagiovine', 'Roccagorga', 'Roccantica', 'Roccasecca', 'Roiate', 'Ronciglione', 'Roviano', 'Sabaudia', 'Sacrofano', 'Salisano', 'Sambuci', 'Santa', 'Santi', 'Santopadre', 'Saracinesco', 'Scandriglia', 'Segni', 'Selci', 'Sermoneta', 'Serrone', 'Settefrati', 'Sezze', 'Sgurgola', 'Sonnino', 'Sora', 'Soriano', 'Sperlonga', 'Spigno', 'Stimigliano', 'Strangolagalli', 'Subiaco', 'Supino', 'Sutri', 'Tarano', 'Tarquinia', 'Terelle', 'Terracina', 'Tessennano', 'Tivoli', 'Toffia', 'Tolfa', 'Torre', 'Torri', 'Torrice', 'Torricella', 'Torrita', 'Trevi', 'Trevignano', 'Trivigliano', 'Turania', 'Tuscania', 'Vacone', 'Valentano', 'Vallecorsa', 'Vallemaio', 'Vallepietra', 'Vallerano', 'Vallerotonda', 'Vallinfreda', 'Valmontone', 'Varco', 'Vasanello', 'Vejano', 'Velletri', 'Ventotene', 'Veroli', 'Vetralla', 'Vicalvi', 'Vico', 'Vicovaro', 'Vignanello', 'Viterbo', 'Viticuso', 'Vitorchiano', 'Vivaro', 'Zagarolo'], ['Abanades', 'Ablanque', 'Adobes', 'Ajofrin', 'Alameda', 'Alaminos', 'Alarilla', 'Albalate', 'Albares', 'Albarreal', 'Albendiego', 'Alcabon', 'Alcanizo', 'Alcaudete', 'Alcocer', 'Alcolea', 'Alcoroches', 'Aldea', 'Aldeanueva', 'Algar', 'Algora', 'Alhondiga', 'Alique', 'Almadrones', 'Almendral', 'Almoguera', 'Almonacid', 'Almorox', 'Alocen', 'Alovera', 'Alustante', 'Angon', 'Anguita', 'Anover', 'Anquela', 'Arbancon', 'Arbeteta', 'Arcicollar', 'Argecilla', 'Arges', 'Armallones', 'Armuna', 'Arroyo', 'Atanzon', 'Atienza', 'Aunon', 'Azuqueca', 'Azutan', 'Baides', 'Banos', 'Banuelos', 'Barcience', 'Bargas', 'Barriopedro', 'Belvis', 'Berninches', 'Borox', 'Brihuega', 'Budia', 'Buenaventura', 'Bujalaro', 'Burguillos', 'Burujon', 'Bustares', 'Cabanas', 'Cabanillas', 'Calera', 'Caleruela', 'Calzada', 'Camarena', 'Campillo', 'Camunas', 'Canizar', 'Canredondo', 'Cantalojas', 'Cardiel', 'Carmena', 'Carranque', 'Carriches', 'Casa', 'Casarrubios', 'Casas', 'Casasbuenas', 'Caspuenas', 'Castejon', 'Castellar', 'Castilforte', 'Castillo', 'Castilnuevo', 'Cazalegas', 'Cebolla', 'Cedillo', 'Cendejas', 'Centenera', 'Cervera', 'Checa', 'Chequilla', 'Chillaron', 'Chiloeches', 'Chozas', 'Chueca', 'Cifuentes', 'Cincovillas', 'Ciruelas', 'Ciruelos', 'Cobeja', 'Cobeta', 'Cobisa', 'Cogollor', 'Cogolludo', 'Condemios', 'Congostrina', 'Consuegra', 'Copernal', 'Corduente', 'Corral', 'Cuerva', 'Domingo', 'Dosbarrios', 'Driebes', 'Duron', 'El', 'Embid', 'Erustes', 'Escalona', 'Escalonilla', 'Escamilla', 'Escariche', 'Escopete', 'Espinosa', 'Espinoso', 'Esplegares', 'Esquivias', 'Estables', 'Estriegana', 'Fontanar', 'Fuembellida', 'Fuensalida', 'Fuentelsaz', 'Gajanejos', 'Galve', 'Galvez', 'Garciotum', 'Gascuena', 'Gerindote', 'Guadamur', 'Henche', 'Heras', 'Herreria', 'Herreruela', 'Hijes', 'Hinojosa', 'Hita', 'Hombrados', 'Hontanar', 'Hontoba', 'Horche', 'Hormigos', 'Huecas', 'Huermeces', 'Huerta', 'Hueva', 'Humanes', 'Illan', 'Illana', 'Illescas', 'Iniestola', 'Irueste', 'Jadraque', 'Jirueque', 'Lagartera', 'Las', 'Layos', 'Ledanca', 'Lillo', 'Lominchar', 'Loranca', 'Los', 'Lucillos', 'Lupiana', 'Luzaga', 'Luzon', 'Madridejos', 'Magan', 'Majaelrayo', 'Malaga', 'Malaguilla', 'Malpica', 'Mandayona', 'Mantiel', 'Manzaneque', 'Maqueda', 'Maranchon', 'Marchamalo', 'Marjaliza', 'Marrupe', 'Mascaraque', 'Masegoso', 'Matarrubia', 'Matillas', 'Mazarete', 'Mazuecos', 'Medranda', 'Megina', 'Mejorada', 'Mentrida', 'Mesegar', 'Miedes', 'Miguel', 'Millana', 'Milmarcos', 'Mirabueno', 'Miralrio', 'Mocejon', 'Mochales', 'Mohedas', 'Molina', 'Monasterio', 'Mondejar', 'Montarron', 'Mora', 'Moratilla', 'Morenilla', 'Muduex', 'Nambroca', 'Navalcan', 'Negredo', 'Noblejas', 'Noez', 'Nombela', 'Noves', 'Numancia', 'Nuno', 'Ocana', 'Ocentejo', 'Olias', 'Olmeda', 'Ontigola', 'Orea', 'Orgaz', 'Oropesa', 'Otero', 'Palmaces', 'Palomeque', 'Pantoja', 'Pardos', 'Paredes', 'Pareja', 'Parrillas', 'Pastrana', 'Pelahustan', 'Penalen', 'Penalver', 'Pepino', 'Peralejos', 'Peralveche', 'Pinilla', 'Pioz', 'Piqueras', 'Polan', 'Portillo', 'Poveda', 'Pozo', 'Pradena', 'Prados', 'Puebla', 'Puerto', 'Pulgar', 'Quer', 'Quero', 'Quintanar', 'Quismondo', 'Rebollosa', 'Recas', 'Renera', 'Retamoso', 'Retiendas', 'Riba', 'Rielves', 'Rillo', 'Riofrio', 'Robledillo', 'Robledo', 'Romanillos', 'Romanones', 'Rueda', 'Sacecorbo', 'Sacedon', 'Saelices', 'Salmeron', 'San', 'Santa', 'Santiuste', 'Santo', 'Sartajada', 'Sauca', 'Sayaton', 'Segurilla', 'Selas', 'Semillas', 'Sesena', 'Setiles', 'Sevilleja', 'Sienes', 'Siguenza', 'Solanillos', 'Somolinos', 'Sonseca', 'Sotillo', 'Sotodosos', 'Talavera', 'Tamajon', 'Taragudo', 'Taravilla', 'Tartanedo', 'Tembleque', 'Tendilla', 'Terzaga', 'Tierzo', 'Tordellego', 'Tordelrabano', 'Tordesilos', 'Torija', 'Torralba', 'Torre', 'Torrecilla', 'Torrecuadrada', 'Torrejon', 'Torremocha', 'Torrico', 'Torrijos', 'Torrubia', 'Tortola', 'Tortuera', 'Tortuero', 'Totanes', 'Traid', 'Trijueque', 'Trillo', 'Turleque', 'Uceda', 'Ugena', 'Ujados', 'Urda', 'Utande', 'Valdarachas', 'Valdesotos', 'Valhermoso', 'Valtablado', 'Valverde', 'Velada', 'Viana', 'Vinuelas', 'Yebes', 'Yebra', 'Yelamos', 'Yeles', 'Yepes', 'Yuncler', 'Yunclillos', 'Yuncos', 'Yunquera', 'Zaorejas', 'Zarzuela', 'Zorita'], ['Belgorod', 'Beloberezhye', 'Belyi', 'Belz', 'Berestiy', 'Berezhets', 'Berezovets', 'Berezutsk', 'Bobruisk', 'Bolonets', 'Borisov', 'Borovsk', 'Bozhesk', 'Bratslav', 'Bryansk', 'Brynsk', 'Buryn', 'Byhov', 'Chechersk', 'Chemesov', 'Cheremosh', 'Cherlen', 'Chern', 'Chernigov', 'Chernitsa', 'Chernobyl', 'Chernogorod', 'Chertoryesk', 'Chetvertnia', 'Demyansk', 'Derevesk', 'Devyagoresk', 'Dichin', 'Dmitrov', 'Dorogobuch', 'Dorogobuzh', 'Drestvin', 'Drokov', 'Drutsk', 'Dubechin', 'Dubichi', 'Dubki', 'Dubkov', 'Dveren', 'Galich', 'Glebovo', 'Glinsk', 'Goloty', 'Gomiy', 'Gorodets', 'Gorodische', 'Gorodno', 'Gorohovets', 'Goroshin', 'Gorval', 'Goryshon', 'Holm', 'Horobor', 'Hoten', 'Hotin', 'Hotmyzhsk', 'Ilovech', 'Ivan', 'Izborsk', 'Izheslavl', 'Kamenets', 'Kanev', 'Karachev', 'Karna', 'Kavarna', 'Klechesk', 'Klyapech', 'Kolomyya', 'Kolyvan', 'Kopyl', 'Korec', 'Kornik', 'Korochunov', 'Korshev', 'Korsun', 'Koshkin', 'Kotelno', 'Kovyla', 'Kozelsk', 'Kozelsk', 'Kremenets', 'Krichev', 'Krylatsk', 'Ksniatin', 'Kulatsk', 'Kursk', 'Kursk', 'Lebedev', 'Lida', 'Logosko', 'Lomihvost', 'Loshesk', 'Loshichi', 'Lubech', 'Lubno', 'Lubutsk', 'Lutsk', 'Luchin', 'Luki', 'Lukoml', 'Luzha', 'Lvov', 'Mtsensk', 'Mdin', 'Medniki', 'Melecha', 'Merech', 'Meretsk', 'Mescherskoe', 'Meshkovsk', 'Metlitsk', 'Mezetsk', 'Mglin', 'Mihailov', 'Mikitin', 'Mikulino', 'Miloslavichi', 'Mogilev', 'Mologa', 'Moreva', 'Mosalsk', 'Moschiny', 'Mozyr', 'Mstislav', 'Mstislavets', 'Muravin', 'Nemech', 'Nemiza', 'Nerinsk', 'Nichan', 'Novgorod', 'Novogorodok', 'Obolichi', 'Obolensk', 'Obolensk', 'Oleshsk', 'Olgov', 'Omelnik', 'Opoka', 'Opoki', 'Oreshek', 'Orlets', 'Osechen', 'Oster', 'Ostrog', 'Ostrov', 'Perelai', 'Peremil', 'Peremyshl', 'Pererov', 'Peresechen', 'Perevitsk', 'Pereyaslav', 'Pinsk', 'Ples', 'Polotsk', 'Pronsk', 'Proposhesk', 'Punia', 'Putivl', 'Rechitsa', 'Rodno', 'Rogachev', 'Romanov', 'Romny', 'Roslavl', 'Rostislavl', 'Rostovets', 'Rsha', 'Ruza', 'Rybchesk', 'Rylsk', 'Rzhavesk', 'Rzhev', 'Rzhischev', 'Sambor', 'Serensk', 'Serensk', 'Serpeysk', 'Shilov', 'Shuya', 'Sinech', 'Sizhka', 'Skala', 'Slovensk', 'Slutsk', 'Smedin', 'Sneporod', 'Snitin', 'Snovsk', 'Sochevo', 'Sokolec', 'Starica', 'Starodub', 'Stepan', 'Sterzh', 'Streshin', 'Sutesk', 'Svinetsk', 'Svisloch', 'Terebovl', 'Ternov', 'Teshilov', 'Teterin', 'Tiversk', 'Torchevsk', 'Toropets', 'Torzhok', 'Tripolye', 'Trubchevsk', 'Tur', 'Turov', 'Usvyaty', 'Uteshkov', 'Vasilkov', 'Velil', 'Velye', 'Venev', 'Venicha', 'Verderev', 'Vereya', 'Veveresk', 'Viazma', 'Vidbesk', 'Vidychev', 'Voino', 'Volodimer', 'Volok', 'Volyn', 'Vorobesk', 'Voronich', 'Voronok', 'Vorotynsk', 'Vrev', 'Vruchiy', 'Vselug', 'Vyatichsk', 'Vyatka', 'Vyshegorod', 'Vyshgorod', 'Vysokoe', 'Yagniatin', 'Yaropolch', 'Yasenets', 'Yuryev', 'Yuryevets', 'Zaraysk', 'Zhitomel', 'Zholvazh', 'Zizhech', 'Zubkov', 'Zudechev', 'Zvenigorod'], ['Akureyri', 'Aldra', 'Alftanes', 'Andenes', 'Austbo', 'Auvog', 'Bakkafjordur', 'Ballangen', 'Bardal', 'Beisfjord', 'Bifrost', 'Bildudalur', 'Bjerka', 'Bjerkvik', 'Bjorkosen', 'Bliksvaer', 'Blokken', 'Blonduos', 'Bolga', 'Bolungarvik', 'Borg', 'Borgarnes', 'Bosmoen', 'Bostad', 'Bostrand', 'Botsvika', 'Brautarholt', 'Breiddalsvik', 'Bringsli', 'Brunahlid', 'Budardalur', 'Byggdakjarni', 'Dalvik', 'Djupivogur', 'Donnes', 'Drageid', 'Drangsnes', 'Egilsstadir', 'Eiteroga', 'Elvenes', 'Engavogen', 'Ertenvog', 'Eskifjordur', 'Evenes', 'Eyrarbakki', 'Fagernes', 'Fallmoen', 'Fellabaer', 'Fenes', 'Finnoya', 'Fjaer', 'Fjelldal', 'Flakstad', 'Flateyri', 'Flostrand', 'Fludir', 'Gardabær', 'Gardur', 'Gimstad', 'Givaer', 'Gjeroy', 'Gladstad', 'Godoya', 'Godoynes', 'Granmoen', 'Gravdal', 'Grenivik', 'Grimsey', 'Grindavik', 'Grytting', 'Hafnir', 'Halsa', 'Hauganes', 'Haugland', 'Hauknes', 'Hella', 'Helland', 'Hellissandur', 'Hestad', 'Higrav', 'Hnifsdalur', 'Hofn', 'Hofsos', 'Holand', 'Holar', 'Holen', 'Holkestad', 'Holmavik', 'Hopen', 'Hovden', 'Hrafnagil', 'Hrisey', 'Husavik', 'Husvik', 'Hvammstangi', 'Hvanneyri', 'Hveragerdi', 'Hvolsvollur', 'Igeroy', 'Indre', 'Inndyr', 'Innhavet', 'Innes', 'Isafjordur', 'Jarklaustur', 'Jarnsreykir', 'Junkerdal', 'Kaldvog', 'Kanstad', 'Karlsoy', 'Kavosen', 'Keflavik', 'Kjelde', 'Kjerstad', 'Klakk', 'Kopasker', 'Kopavogur', 'Korgen', 'Kristnes', 'Krutoga', 'Krystad', 'Kvina', 'Lande', 'Laugar', 'Laugaras', 'Laugarbakki', 'Laugarvatn', 'Laupstad', 'Leines', 'Leira', 'Leiren', 'Leland', 'Lenvika', 'Loding', 'Lodingen', 'Lonsbakki', 'Lopsmarka', 'Lovund', 'Luroy', 'Maela', 'Melahverfi', 'Meloy', 'Mevik', 'Misvaer', 'Mornes', 'Mosfellsbær', 'Moskenes', 'Myken', 'Naurstad', 'Nesberg', 'Nesjahverfi', 'Nesset', 'Nevernes', 'Obygda', 'Ofoten', 'Ogskardet', 'Okervika', 'Oknes', 'Olafsfjordur', 'Oldervika', 'Olstad', 'Onstad', 'Oppeid', 'Oresvika', 'Orsnes', 'Orsvog', 'Osmyra', 'Overdal', 'Prestoya', 'Raudalaekur', 'Raufarhofn', 'Reipo', 'Reykholar', 'Reykholt', 'Reykjahlid', 'Rif', 'Rinoya', 'Rodoy', 'Rognan', 'Rosvika', 'Rovika', 'Salhus', 'Sanden', 'Sandgerdi', 'Sandoker', 'Sandset', 'Sandvika', 'Saudarkrokur', 'Selfoss', 'Selsoya', 'Sennesvik', 'Setso', 'Siglufjordur', 'Silvalen', 'Skagastrond', 'Skjerstad', 'Skonland', 'Skorvogen', 'Skrova', 'Sleneset', 'Snubba', 'Softing', 'Solheim', 'Solheimar', 'Sorarnoy', 'Sorfugloy', 'Sorland', 'Sormela', 'Sorvaer', 'Sovika', 'Stamsund', 'Stamsvika', 'Stave', 'Stokka', 'Stokkseyri', 'Storjord', 'Storo', 'Storvika', 'Strand', 'Straumen', 'Strendene', 'Sudavik', 'Sudureyri', 'Sundoya', 'Sydalen', 'Thingeyri', 'Thorlakshofn', 'Thorshofn', 'Tjarnabyggd', 'Tjotta', 'Tosbotn', 'Traelnes', 'Trofors', 'Trones', 'Tverro', 'Ulvsvog', 'Unnstad', 'Utskor', 'Valla', 'Vandved', 'Varmahlid', 'Vassos', 'Vevelstad', 'Vidrek', 'Vik', 'Vikholmen', 'Vogar', 'Vogehamn', 'Vopnafjordur'], ['Abdera', 'Abila', 'Abydos', 'Acanthus', 'Acharnae', 'Actium', 'Adramyttium', 'Aegae', 'Aegina', 'Aegium', 'Aenus', 'Agrinion', 'Aigosthena', 'Akragas', 'Akrai', 'Akrillai', 'Akroinon', 'Akrotiri', 'Alalia', 'Alexandreia', 'Alexandretta', 'Alexandria', 'Alinda', 'Amarynthos', 'Amaseia', 'Ambracia', 'Amida', 'Amisos', 'Amnisos', 'Amphicaea', 'Amphigeneia', 'Amphipolis', 'Amphissa', 'Ankon', 'Antigona', 'Antipatrea', 'Antioch', 'Antioch', 'Antiochia', 'Andros', 'Apamea', 'Aphidnae', 'Apollonia', 'Argos', 'Arsuf', 'Artanes', 'Artemita', 'Argyroupoli', 'Asine', 'Asklepios', 'Aspendos', 'Assus', 'Astacus', 'Athenai', 'Athmonia', 'Aytos', 'Ancient', 'Baris', 'Bhrytos', 'Borysthenes', 'Berge', 'Boura', 'Bouthroton', 'Brauron', 'Byblos', 'Byllis', 'Byzantium', 'Bythinion', 'Callipolis', 'Cebrene', 'Chalcedon', 'Calydon', 'Carystus', 'Chamaizi', 'Chalcis', 'Chersonesos', 'Chios', 'Chytri', 'Clazomenae', 'Cleonae', 'Cnidus', 'Colosse', 'Corcyra', 'Croton', 'Cyme', 'Cyrene', 'Cythera', 'Decelea', 'Delos', 'Delphi', 'Demetrias', 'Dicaearchia', 'Dimale', 'Didyma', 'Dion', 'Dioscurias', 'Dodona', 'Dorylaion', 'Dyme', 'Edessa', 'Elateia', 'Eleusis', 'Eleutherna', 'Emporion', 'Ephesus', 'Ephyra', 'Epidamnos', 'Epidauros', 'Eresos', 'Eretria', 'Erythrae', 'Eubea', 'Gangra', 'Gaza', 'Gela', 'Golgi', 'Gonnos', 'Gorgippia', 'Gournia', 'Gortyn', 'Gythium', 'Hagios', 'Hagia', 'Halicarnassus', 'Halieis', 'Helike', 'Heliopolis', 'Hellespontos', 'Helorus', 'Hemeroskopeion', 'Heraclea', 'Hermione', 'Hermonassa', 'Hierapetra', 'Hierapolis', 'Himera', 'Histria', 'Hubla', 'Hyele', 'Ialysos', 'Iasus', 'Idalium', 'Imbros', 'Iolcus', 'Itanos', 'Ithaca', 'Juktas', 'Kallipolis', 'Kamares', 'Kameiros', 'Kannia', 'Kamarina', 'Kasmenai', 'Katane', 'Kerkinitida', 'Kepoi', 'Kimmerikon', 'Kios', 'Klazomenai', 'Knidos', 'Knossos', 'Korinthos', 'Kos', 'Kourion', 'Kume', 'Kydonia', 'Kynos', 'Kyrenia', 'Lamia', 'Lampsacus', 'Laodicea', 'Lapithos', 'Larissa', 'Lato', 'Laus', 'Lebena', 'Lefkada', 'Lekhaion', 'Leibethra', 'Leontinoi', 'Lepreum', 'Lessa', 'Lilaea', 'Lindus', 'Lissus', 'Epizephyrian', 'Madytos', 'Magnesia', 'Mallia', 'Mantineia', 'Marathon', 'Marmara', 'Maroneia', 'Masis', 'Massalia', 'Megalopolis', 'Megara', 'Mesembria', 'Messene', 'Metapontum', 'Methana', 'Methone', 'Methumna', 'Miletos', 'Misenum', 'Mochlos', 'Monastiraki', 'Morgantina', 'Mulai', 'Mukenai', 'Mylasa', 'Myndus', 'Myonia', 'Myra', 'Myrmekion', 'Mutilene', 'Myos', 'Nauplios', 'Naucratis', 'Naupactus', 'Naxos', 'Neapoli', 'Neapolis', 'Nemea', 'Nicaea', 'Nicopolis', 'Nirou', 'Nymphaion', 'Nysa', 'Oenoe', 'Oenus', 'Odessos', 'Olbia', 'Olous', 'Olympia', 'Olynthus', 'Opus', 'Orchomenus', 'Oricos', 'Orestias', 'Oreus', 'Oropus', 'Onchesmos', 'Pactye', 'Pagasae', 'Palaikastro', 'Pandosia', 'Panticapaeum', 'Paphos', 'Parium', 'Paros', 'Parthenope', 'Patrae', 'Pavlopetri', 'Pegai', 'Pelion', 'Peiraieús', 'Pella', 'Percote', 'Pergamum', 'Petsofa', 'Phaistos', 'Phaleron', 'Phanagoria', 'Pharae', 'Pharnacia', 'Pharos', 'Phaselis', 'Philippi', 'Pithekussa', 'Philippopolis', 'Platanos', 'Phlius', 'Pherae', 'Phocaea', 'Pinara', 'Pisa', 'Pitane', 'Pitiunt', 'Pixous', 'Plataea', 'Poseidonia', 'Potidaea', 'Priapus', 'Priene', 'Prousa', 'Pseira', 'Psychro', 'Pteleum', 'Pydna', 'Pylos', 'Pyrgos', 'Rhamnus', 'Rhegion', 'Rhithymna', 'Rhodes', 'Rhypes', 'Rizinia', 'Salamis', 'Same', 'Samos', 'Scyllaeum', 'Selinus', 'Seleucia', 'Semasus', 'Sestos', 'Scidrus', 'Sicyon', 'Side', 'Sidon', 'Siteia', 'Sinope', 'Siris', 'Sklavokampos', 'Smyrna', 'Soli', 'Sozopolis', 'Sparta', 'Stagirus', 'Stratos', 'Stymphalos', 'Sybaris', 'Surakousai', 'Taras', 'Tanagra', 'Tanais', 'Tauromenion', 'Tegea', 'Temnos', 'Tenedos', 'Tenea', 'Teos', 'Thapsos', 'Thassos', 'Thebai', 'Theodosia', 'Therma', 'Thespiae', 'Thronion', 'Thoricus', 'Thurii', 'Thyreum', 'Thyria', 'Tiruns', 'Tithoraea', 'Tomis', 'Tragurion', 'Trapeze', 'Trapezus', 'Tripolis', 'Troizen', 'Troliton', 'Troy', 'Tylissos', 'Tyras', 'Tyros', 'Tyritake', 'Vasiliki', 'Vathypetros', 'Zakynthos', 'Zakros', 'Zankle'], ['Abila', 'Adflexum', 'Adnicrem', 'Aelia', 'Aelius', 'Aeminium', 'Aequum', 'Agrippina', 'Agrippinae', 'Ala', 'Albanianis', 'Ambianum', 'Andautonia', 'Apulum', 'Aquae', 'Aquaegranni', 'Aquensis', 'Aquileia', 'Aquincum', 'Arae', 'Argentoratum', 'Ariminum', 'Ascrivium', 'Atrebatum', 'Atuatuca', 'Augusta', 'Aurelia', 'Aurelianorum', 'Batavar', 'Batavorum', 'Belum', 'Biriciana', 'Blestium', 'Bonames', 'Bonna', 'Bononia', 'Borbetomagus', 'Bovium', 'Bracara', 'Brigantium', 'Burgodunum', 'Caesaraugusta', 'Caesarea', 'Caesaromagus', 'Calleva', 'Camulodunum', 'Cannstatt', 'Cantiacorum', 'Capitolina', 'Castellum', 'Castra', 'Castrum', 'Cibalae', 'Clausentum', 'Colonia', 'Concangis', 'Condate', 'Confluentes', 'Conimbriga', 'Corduba', 'Coria', 'Corieltauvorum', 'Corinium', 'Coriovallum', 'Cornoviorum', 'Danum', 'Deva', 'Divodurum', 'Dobunnorum', 'Drusi', 'Dubris', 'Dumnoniorum', 'Durnovaria', 'Durocobrivis', 'Durocornovium', 'Duroliponte', 'Durovernum', 'Durovigutum', 'Eboracum', 'Edetanorum', 'Emerita', 'Emona', 'Euracini', 'Faventia', 'Flaviae', 'Florentia', 'Forum', 'Gerulata', 'Gerunda', 'Glevensium', 'Hadriani', 'Herculanea', 'Isca', 'Italica', 'Iulia', 'Iuliobrigensium', 'Iuvavum', 'Lactodurum', 'Lagentium', 'Lauri', 'Legionis', 'Lemanis', 'Lentia', 'Lepidi', 'Letocetum', 'Lindinis', 'Lindum', 'Londinium', 'Lopodunum', 'Lousonna', 'Lucus', 'Lugdunum', 'Luguvalium', 'Lutetia', 'Mancunium', 'Marsonia', 'Martius', 'Massa', 'Matilo', 'Mattiacorum', 'Mediolanum', 'Mod', 'Mogontiacum', 'Moridunum', 'Mursa', 'Naissus', 'Nervia', 'Nida', 'Nigrum', 'Novaesium', 'Noviomagus', 'Olicana', 'Ovilava', 'Parisiorum', 'Partiscum', 'Paterna', 'Pistoria', 'Placentia', 'Pollentia', 'Pomaria', 'Pons', 'Portus', 'Praetoria', 'Praetorium', 'Pullum', 'Ragusium', 'Ratae', 'Raurica', 'Regina', 'Regium', 'Regulbium', 'Rigomagus', 'Roma', 'Romula', 'Rutupiae', 'Salassorum', 'Salernum', 'Salona', 'Scalabis', 'Segovia', 'Silurum', 'Sirmium', 'Siscia', 'Sorviodurum', 'Sumelocenna', 'Tarraco', 'Taurinorum', 'Theranda', 'Traiectum', 'Treverorum', 'Tungrorum', 'Turicum', 'Ulpia', 'Valentia', 'Venetiae', 'Venta', 'Verulamium', 'Vesontio', 'Vetera', 'Victoriae', 'Victrix', 'Villa', 'Viminacium', 'Vindelicorum', 'Vindobona', 'Vinovia', 'Viroconium'], ['Aanekoski', 'Abjapaluoja', 'Ahlainen', 'Aholanvaara', 'Ahtari', 'Aijala', 'Aimala', 'Akaa', 'Alajarvi', 'Alatornio', 'Alavus', 'Antsla', 'Aspo', 'Bennas', 'Bjorkoby', 'Elva', 'Emasalo', 'Espoo', 'Esse', 'Evitskog', 'Forssa', 'Haapajarvi', 'Haapamaki', 'Haapavesi', 'Haapsalu', 'Haavisto', 'Hameenlinna', 'Hameenmaki', 'Hamina', 'Hanko', 'Harjavalta', 'Hattuvaara', 'Haukipudas', 'Hautajarvi', 'Havumaki', 'Heinola', 'Hetta', 'Hinkabole', 'Hirmula', 'Hossa', 'Huittinen', 'Husula', 'Hyryla', 'Hyvinkaa', 'Iisalmi', 'Ikaalinen', 'Ilmola', 'Imatra', 'Inari', 'Iskmo', 'Itakoski', 'Jamsa', 'Jarvenpaa', 'Jeppo', 'Jioesuu', 'Jiogeva', 'Joensuu', 'Jokela', 'Jokikyla', 'Jokisuu', 'Jormua', 'Juankoski', 'Jungsund', 'Jyvaskyla', 'Kaamasmukka', 'Kaarina', 'Kajaani', 'Kalajoki', 'Kallaste', 'Kankaanpaa', 'Kannus', 'Kardla', 'Karesuvanto', 'Karigasniemi', 'Karkkila', 'Karkku', 'Karksinuia', 'Karpankyla', 'Kaskinen', 'Kasnas', 'Kauhajoki', 'Kauhava', 'Kauniainen', 'Kauvatsa', 'Kehra', 'Keila', 'Kellokoski', 'Kelottijarvi', 'Kemi', 'Kemijarvi', 'Kerava', 'Keuruu', 'Kiikka', 'Kiipu', 'Kilinginiomme', 'Kiljava', 'Kilpisjarvi', 'Kitee', 'Kiuruvesi', 'Kivesjarvi', 'Kiviioli', 'Kivisuo', 'Klaukkala', 'Klovskog', 'Kohtlajarve', 'Kokemaki', 'Kokkola', 'Kolho', 'Koria', 'Koskue', 'Kotka', 'Kouva', 'Kouvola', 'Kristiina', 'Kaupunki', 'Kuhmo', 'Kunda', 'Kuopio', 'Kuressaare', 'Kurikka', 'Kusans', 'Kuusamo', 'Kylmalankyla', 'Lahti', 'Laitila', 'Lankipohja', 'Lansikyla', 'Lappeenranta', 'Lapua', 'Laurila', 'Lautiosaari', 'Lepsama', 'Liedakkala', 'Lieksa', 'Lihula', 'Littoinen', 'Lohja', 'Loimaa', 'Loksa', 'Loviisa', 'Luohuanylipaa', 'Lusi', 'Maardu', 'Maarianhamina', 'Malmi', 'Mantta', 'Masaby', 'Masala', 'Matasvaara', 'Maula', 'Miiluranta', 'Mikkeli', 'Mioisakula', 'Munapirtti', 'Mustvee', 'Muurahainen', 'Naantali', 'Nappa', 'Narpio', 'Nickby', 'Niinimaa', 'Niinisalo', 'Nikkila', 'Nilsia', 'Nivala', 'Nokia', 'Nummela', 'Nuorgam', 'Nurmes', 'Nuvvus', 'Obbnas', 'Oitti', 'Ojakkala', 'Ollola', 'onningeby', 'Orimattila', 'Orivesi', 'Otanmaki', 'Otava', 'Otepaa', 'Oulainen', 'Oulu', 'Outokumpu', 'Paavola', 'Paide', 'Paimio', 'Pakankyla', 'Paldiski', 'Parainen', 'Parkano', 'Parkumaki', 'Parola', 'Perttula', 'Pieksamaki', 'Pietarsaari', 'Pioltsamaa', 'Piolva', 'Pohjavaara', 'Porhola', 'Pori', 'Porrasa', 'Porvoo', 'Pudasjarvi', 'Purmo', 'Pussi', 'Pyhajarvi', 'Raahe', 'Raasepori', 'Raisio', 'Rajamaki', 'Rakvere', 'Rapina', 'Rapla', 'Rauma', 'Rautio', 'Reposaari', 'Riihimaki', 'Rovaniemi', 'Roykka', 'Ruonala', 'Ruottala', 'Rutalahti', 'Saarijarvi', 'Salo', 'Sastamala', 'Saue', 'Savonlinna', 'Seinajoki', 'Sillamae', 'Sindi', 'Siuntio', 'Somero', 'Sompujarvi', 'Suonenjoki', 'Suurejaani', 'Syrjantaka', 'Tampere', 'Tamsalu', 'Tapa', 'Temmes', 'Tiorva', 'Tormasenvaara', 'Tornio', 'Tottijarvi', 'Tulppio', 'Turenki', 'Turi', 'Tuukkala', 'Tuurala', 'Tuuri', 'Tuuski', 'Ulvila', 'Unari', 'Upinniemi', 'Utti', 'Uusikaarlepyy', 'Uusikaupunki', 'Vaaksy', 'Vaalimaa', 'Vaarinmaja', 'Vaasa', 'Vainikkala', 'Valga', 'Valkeakoski', 'Vantaa', 'Varkaus', 'Vehkapera', 'Vehmasmaki', 'Vieki', 'Vierumaki', 'Viitasaari', 'Viljandi', 'Vilppula', 'Viohma', 'Vioru', 'Virrat', 'Ylike', 'Ylivieska', 'Ylojarvi'], ['Sabi', 'Wiryeseong', 'Hwando', 'Gungnae', 'Ungjin', 'Wanggeomseong', 'Ganggyeong', 'Jochiwon', 'Cheorwon', 'Beolgyo', 'Gangjin', 'Gampo', 'Yecheon', 'Geochang', 'Janghang', 'Hadong', 'Goseong', 'Yeongdong', 'Yesan', 'Sintaein', 'Geumsan', 'Boseong', 'Jangheung', 'Uiseong', 'Jumunjin', 'Janghowon', 'Hongseong', 'Gimhwa', 'Gwangcheon', 'Guryongpo', 'Jinyeong', 'Buan', 'Damyang', 'Jangseong', 'Wando', 'Angang', 'Okcheon', 'Jeungpyeong', 'Waegwan', 'Cheongdo', 'Gwangyang', 'Gochang', 'Haenam', 'Yeonggwang', 'Hanam', 'Eumseong', 'Daejeong', 'Hanrim', 'Samrye', 'Yongjin', 'Hamyang', 'Buyeo', 'Changnyeong', 'Yeongwol', 'Yeonmu', 'Gurye', 'Hwasun', 'Hampyeong', 'Namji', 'Samnangjin', 'Dogye', 'Hongcheon', 'Munsan', 'Gapyeong', 'Ganghwa', 'Geojin', 'Sangdong', 'Jeongseon', 'Sabuk', 'Seonghwan', 'Heunghae', 'Hapdeok', 'Sapgyo', 'Taean', 'Boeun', 'Geumwang', 'Jincheon', 'Bongdong', 'Doyang', 'Geoncheon', 'Pungsan', 'Punggi', 'Geumho', 'Wonju', 'Gaun', 'Hayang', 'Yeoju', 'Paengseong', 'Yeoncheon', 'Yangpyeong', 'Ganseong', 'Yanggu', 'Yangyang', 'Inje', 'Galmal', 'Pyeongchang', 'Hwacheon', 'Hoengseong', 'Seocheon', 'Cheongyang', 'Goesan', 'Danyang', 'Hamyeol', 'Muju', 'Sunchang', 'Imsil', 'Jangsu', 'Jinan', 'Goheung', 'Gokseong', 'Muan', 'Yeongam', 'Jindo', 'Seonsan', 'Daegaya', 'Gunwi', 'Bonghwa', 'Seongju', 'Yeongdeok', 'Yeongyang', 'Ulleung', 'Uljin', 'Cheongsong', 'wayang', 'Namhae', 'Sancheong', 'Uiryeong', 'Gaya', 'Hapcheon', 'Wabu', 'Dongsong', 'Sindong', 'Wondeok', 'Maepo', 'Anmyeon', 'Okgu', 'Sariwon', 'Dolsan', 'Daedeok', 'Gwansan', 'Geumil', 'Nohwa', 'Baeksu', 'Illo', 'Jido', 'Oedong', 'Ocheon', 'Yeonil', 'Hamchang', 'Pyeonghae', 'Gijang', 'Jeonggwan', 'Aewor', 'Gujwa', 'Seongsan', 'Jeongok', 'Seonggeo', 'Seungju', 'Hongnong', 'Jangan', 'Jocheon', 'Gohan', 'Jinjeop', 'Bubal', 'Beobwon', 'Yeomchi', 'Hwado', 'Daesan', 'Hwawon', 'Apo', 'Nampyeong', 'Munsan', 'Sinbuk', 'Munmak', 'Judeok', 'Bongyang', 'Ungcheon', 'Yugu', 'Unbong', 'Mangyeong', 'Dong', 'Naeseo', 'Sanyang', 'Soheul', 'Onsan', 'Eonyang', 'Nongong', 'Dasa', 'Goa', 'Jillyang', 'Bongdam', 'Naesu', 'Beomseo', 'Opo', 'Gongdo', 'Jingeon', 'Onam', 'Baekseok', 'Jiksan', 'Mokcheon', 'Jori', 'Anjung', 'Samho', 'Ujeong', 'Buksam', 'Tongjin', 'Chowol', 'Gonjiam', 'Pogok', 'Seokjeok', 'Poseung', 'Ochang', 'Hyangnam', 'Baebang', 'Gochon', 'Songak', 'Samhyang', 'Yangchon', 'Osong', 'Aphae', 'Ganam', 'Namyang', 'Chirwon', 'Andong', 'Ansan', 'Anseong', 'Anyang', 'Asan', 'Boryeong', 'Bucheon', 'Busan', 'Changwon', 'Cheonan', 'Cheongju', 'Chuncheon', 'Chungju', 'Daegu', 'Daejeon', 'Dangjin', 'Dongducheon', 'Donghae', 'Gangneung', 'Geoje', 'Gimcheon', 'Gimhae', 'Gimje', 'Gimpo', 'Gongju', 'Goyang', 'Gumi', 'Gunpo', 'Gunsan', 'Guri', 'Gwacheon', 'Gwangju', 'Gwangju', 'Gwangmyeong', 'Gyeongju', 'Gyeongsan', 'Gyeryong', 'Hwaseong', 'Icheon', 'Iksan', 'Incheon', 'Jecheon', 'Jeongeup', 'Jeonju', 'Jeju', 'Jinju', 'Naju', 'Namyangju', 'Namwon', 'Nonsan', 'Miryang', 'Mokpo', 'Mungyeong', 'Osan', 'Paju', 'Pocheon', 'Pohang', 'Pyeongtaek', 'Sacheon', 'Sangju', 'Samcheok', 'Sejong', 'Seogwipo', 'Seongnam', 'Seosan', 'Seoul', 'Siheung', 'Sokcho', 'Suncheon', 'Suwon', 'Taebaek', 'Tongyeong', 'Uijeongbu', 'Uiwang', 'Ulsan', 'Yangju', 'Yangsan', 'Yeongcheon', 'Yeongju', 'Yeosu', 'Yongin', 'Chungmu', 'Daecheon', 'Donggwangyang', 'Geumseong', 'Gyeongseong', 'Iri', 'Jangseungpo', 'Jeomchon', 'Jeongju', 'Migeum', 'Onyang', 'Samcheonpo', 'Busan', 'Busan', 'Cheongju', 'Chuncheon', 'Daegu', 'Daegu', 'Daejeon', 'Daejeon', 'Gunsan', 'Gwangju', 'Gwangju', 'Gyeongseong', 'Incheon', 'Incheon', 'Iri', 'Jeonju', 'Jinhae', 'Jinju', 'Masan', 'Masan', 'Mokpo', 'Songjeong', 'Songtan', 'Ulsan', 'Yeocheon', 'Cheongjin', 'Gaeseong', 'Haeju', 'Hamheung', 'Heungnam', 'Jinnampo', 'Najin', 'Pyeongyang', 'Seongjin', 'Sineuiju', 'Songnim', 'Wonsan'], ['Anding', 'Anlu', 'Anqing', 'Anshun', 'Baan', 'Baixing', 'Banyang', 'Baoding', 'Baoqing', 'Binzhou', 'Caozhou', 'Changbai', 'Changchun', 'Changde', 'Changling', 'Changsha', 'Changtu', 'Changzhou', 'Chaozhou', 'Cheli', 'Chengde', 'Chengdu', 'Chenzhou', 'Chizhou', 'Chongqing', 'Chuxiong', 'Chuzhou', 'Dading', 'Dali', 'Daming', 'Datong', 'Daxing', 'Dean', 'Dengke', 'Dengzhou', 'Deqing', 'Dexing', 'Dihua', 'Dingli', 'Dongan', 'Dongchang', 'Dongchuan', 'Dongping', 'Duyun', 'Fengtian', 'Fengxiang', 'Fengyang', 'Fenzhou', 'Funing', 'Fuzhou', 'Ganzhou', 'Gaoyao', 'Gaozhou', 'Gongchang', 'Guangnan', 'Guangning', 'Guangping', 'Guangxin', 'Guangzhou', 'Guide', 'Guilin', 'Guiyang', 'Hailong', 'Hailun', 'Hangzhou', 'Hanyang', 'Hanzhong', 'Heihe', 'Hejian', 'Henan', 'Hengzhou', 'Hezhong', 'Huaian', 'Huaide', 'Huaiqing', 'Huanglong', 'Huangzhou', 'Huining', 'Huizhou', 'Hulan', 'Huzhou', 'Jiading', 'Jian', 'Jianchang', 'Jiande', 'Jiangning', 'Jiankang', 'Jianning', 'Jiaxing', 'Jiayang', 'Jilin', 'Jinan', 'Jingjiang', 'Jingzhao', 'Jingzhou', 'Jinhua', 'Jinzhou', 'Jiujiang', 'Kaifeng', 'Kaihua', 'Kangding', 'Kuizhou', 'Laizhou', 'Lanzhou', 'Leizhou', 'Liangzhou', 'Lianzhou', 'Liaoyang', 'Lijiang', 'Linan', 'Linhuang', 'Linjiang', 'Lintao', 'Liping', 'Liuzhou', 'Longan', 'Longjiang', 'Longqing', 'Longxing', 'Luan', 'Lubin', 'Lubin', 'Luzhou', 'Mishan', 'Nanan', 'Nanchang', 'Nandian', 'Nankang', 'Nanning', 'Nanyang', 'Nenjiang', 'Ningan', 'Ningbo', 'Ningguo', 'Ninguo', 'Ningwu', 'Ningxia', 'Ningyuan', 'Pingjiang', 'Pingle', 'Pingliang', 'Pingyang', 'Puer', 'Puzhou', 'Qianzhou', 'Qingyang', 'Qingyuan', 'Qingzhou', 'Qiongzhou', 'Qujing', 'Quzhou', 'Raozhou', 'Rende', 'Ruian', 'Ruizhou', 'Runing', 'Shafeng', 'Shajing', 'Shaoqing', 'Shaowu', 'Shaoxing', 'Shaozhou', 'Shinan', 'Shiqian', 'Shouchun', 'Shuangcheng', 'Shulei', 'Shunde', 'Shunqing', 'Shuntian', 'Shuoping', 'Sicheng', 'Sien', 'Sinan', 'Sizhou', 'Songjiang', 'Suiding', 'Suihua', 'Suining', 'Suzhou', 'Taian', 'Taibei', 'Tainan', 'Taiping', 'Taiwan', 'Taiyuan', 'Taizhou', 'Taonan', 'Tengchong', 'Tieli', 'Tingzhou', 'Tongchuan', 'Tongqing', 'Tongren', 'Tongzhou', 'Weihui', 'Wensu', 'Wenzhou', 'Wuchang', 'Wuding', 'Wuzhou', 'Xian', 'Xianchun', 'Xianping', 'Xijin', 'Xiliang', 'Xincheng', 'Xingan', 'Xingde', 'Xinghua', 'Xingjing', 'Xingqing', 'Xingyi', 'Xingyuan', 'Xingzhong', 'Xining', 'Xinmen', 'Xiping', 'Xuanhua', 'Xunzhou', 'Xuzhou', 'Yanan', 'Yangzhou', 'Yanji', 'Yanping', 'Yanqi', 'Yanzhou', 'Yazhou', 'Yichang', 'Yidu', 'Yilan', 'Yili', 'Yingchang', 'Yingde', 'Yingtian', 'Yingzhou', 'Yizhou', 'Yongchang', 'Yongping', 'Yongshun', 'Yongzhou', 'Yuanzhou', 'Yuezhou', 'Yulin', 'Yunnan', 'Yunyang', 'Zezhou', 'Zhangde', 'Zhangzhou', 'Zhaoqing', 'Zhaotong', 'Zhenan', 'Zhending', 'Zhengding', 'Zhenhai', 'Zhenjiang', 'Zhenxi', 'Zhenyun', 'Zhongshan', 'Zunyi'], ['Nanporo', 'Naie', 'Kamisunagawa', 'Yuni', 'Naganuma', 'Kuriyama', 'Tsukigata', 'Urausu', 'Shintotsukawa', 'Moseushi', 'Chippubetsu', 'Uryu', 'Hokuryu', 'Numata', 'Tobetsu', 'Suttsu', 'Kuromatsunai', 'Rankoshi', 'Niseko', 'Kimobetsu', 'Kyogoku', 'Kutchan', 'Kyowa', 'Iwanai', 'Shakotan', 'Furubira', 'Niki', 'Yoichi', 'Toyoura', 'Toyako', 'Sobetsu', 'Shiraoi', 'Atsuma', 'Abira', 'Mukawa', 'Hidaka', 'Biratori', 'Niikappu', 'Urakawa', 'Samani', 'Erimo', 'Shinhidaka', 'Matsumae', 'Fukushima', 'Shiriuchi', 'Kikonai', 'Nanae', 'Shikabe', 'Mori', 'Yakumo', 'Oshamambe', 'Esashi', 'Kaminokuni', 'Assabu', 'Otobe', 'Okushiri', 'Imakane', 'Setana', 'Takasu', 'Higashikagura', 'Toma', 'Pippu', 'Aibetsu', 'Kamikawa', 'Higashikawa', 'Biei', 'Kamifurano', 'Nakafurano', 'Minamifurano', 'Horokanai', 'Wassamu', 'Kenbuchi', 'Shimokawa', 'Bifuka', 'Nakagawa', 'Mashike', 'Obira', 'Tomamae', 'Haboro', 'Enbetsu', 'Teshio', 'Hamatonbetsu', 'Nakatonbetsu', 'Esashi', 'Toyotomi', 'Horonobe', 'Rebun', 'Rishiri', 'Rishirifuji', 'Bihoro', 'Tsubetsu', 'Ozora', 'Shari', 'Kiyosato', 'Koshimizu', 'Kunneppu', 'Oketo', 'Saroma', 'Engaru', 'Yubetsu', 'Takinoue', 'Okoppe', 'Omu', 'Otofuke', 'Shihoro', 'Kamishihoro', 'Shikaoi', 'Shintoku', 'Shimizu', 'Memuro', 'Taiki', 'Hiroo', 'Makubetsu', 'Ikeda', 'Toyokoro', 'Honbetsu', 'Ashoro', 'Rikubetsu', 'Urahoro', 'Kushiro', 'Akkeshi', 'Hamanaka', 'Shibecha', 'Teshikaga', 'Shiranuka', 'Betsukai', 'Nakashibetsu', 'Shibetsu', 'Rausu', 'Hiranai', 'Imabetsu', 'Sotogahama', 'Ajigasawa', 'Fukaura', 'Fujisaki', 'Owani', 'Itayanagi', 'Tsuruta', 'Nakadomari', 'Noheji', 'Shichinohe', 'Rokunohe', 'Yokohama', 'Tohoku', 'Oirase', 'Oma', 'Sannohe', 'Gonohe', 'Takko', 'Nanbu', 'Hashikami', 'Shizukuishi', 'Kuzumaki', 'Iwate', 'Shiwa', 'Yahaba', 'Nishiwaga', 'Kanegasaki', 'Hiraizumi', 'Sumita', 'Otsuchi', 'Yamada', 'Iwaizumi', 'Karumai', 'Hirono', 'Ichinohe', 'Zao', 'Shichikashuku', 'Ogawara', 'Murata', 'Shibata', 'Kawasaki', 'Marumori', 'Watari', 'Yamamoto', 'Matsushima', 'Shichigahama', 'Rifu', 'Taiwa', 'Osato', 'Shikama', 'Kami', 'Wakuya', 'Misato', 'Onagawa', 'Minamisanriku', 'Kosaka', 'Fujisato', 'Mitane', 'Happo', 'Gojome', 'Hachirogata', 'Ikawa', 'Misato', 'Ugo', 'Yamanobe', 'Nakayama', 'Kahoku', 'Nishikawa', 'Asahi', 'Oe', 'Oishida', 'Kaneyama', 'Mogami', 'Funagata', 'Mamurogawa', 'Takahata', 'Kawanishi', 'Oguni', 'Shirataka', 'Iide', 'Mikawa', 'Shonai', 'Yuza', 'Koori', 'Kunimi', 'Kawamata', 'Kagamiishi', 'Shimogo', 'Tadami', 'Minamiaizu', 'Nishiaizu', 'Bandai', 'Inawashiro', 'Aizubange', 'Yanaizu', 'Mishima', 'Kaneyama', 'Aizumisato', 'Yabuki', 'Tanagura', 'Yamatsuri', 'Hanawa', 'Ishikawa', 'Asakawa', 'Furudono', 'Miharu', 'Ono', 'Hirono', 'Naraha', 'Tomioka', 'Okuma', 'Futaba', 'Namie', 'Shinchi', 'Ibaraki', 'Oarai', 'Shirosato', 'Daigo', 'Ami', 'Kawachi', 'Yachiyo', 'Goka', 'Sakai', 'Tone', 'Kaminokawa', 'Mashiko', 'Motegi', 'Ichikai', 'Haga', 'Mibu', 'Nogi', 'Shioya', 'Takanezawa', 'Nasu', 'Nakagawa', 'Yoshioka', 'Kanna', 'Shimonita', 'Kanra', 'Nakanojo', 'Naganohara', 'Kusatsu', 'Higashiagatsuma', 'Minakami', 'Tamamura', 'Itakura', 'Meiwa', 'Chiyoda', 'Oizumi', 'Ora', 'Ina', 'Miyoshi', 'Moroyama', 'Ogose', 'Namegawa', 'Ranzan', 'Ogawa', 'Kawajima', 'Yoshimi', 'Hatoyama', 'Tokigawa', 'Yokoze', 'Minano', 'Nagatoro', 'Ogano', 'Misato', 'Kamikawa', 'Kamisato', 'Yorii', 'Miyashiro', 'Sugito', 'Matsubushi', 'Shisui', 'Sakae', 'Kozaki', 'Tako', 'Tonosho', 'Kujukuri', 'Shibayama', 'Yokoshibahikari', 'Ichinomiya', 'Mutsuzawa', 'Shirako', 'Nagara', 'Chonan', 'Otaki', 'Onjuku', 'Kyonan', 'Mizuho', 'Hinode', 'Okutama', 'Oshima', 'Hachijo', 'Aikawa', 'Hayama', 'Samukawa', 'Oiso', 'Ninomiya', 'Nakai', 'Oi', 'Matsuda', 'Yamakita', 'Kaisei', 'Hakone', 'Manazuru', 'Yugawara', 'Seiro', 'Tagami', 'Aga', 'Izumozaki', 'Yuzawa', 'Tsunan', 'Kamiichi', 'Tateyama', 'Nyuzen', 'Asahi', 'Kawakita', 'Tsubata', 'Uchinada', 'Shika', 'Hodatsushimizu', 'Nakanoto', 'Anamizu', 'Noto', 'Eiheiji', 'Ikeda', 'Minamiechizen', 'Echizen', 'Mihama', 'Takahama', 'Oi', 'Wakasa', 'Ichikawamisato', 'Hayakawa', 'Minobu', 'Nanbu', 'Fujikawa', 'Showa', 'Nishikatsura', 'Fujikawaguchiko', 'Koumi', 'Sakuho', 'Karuizawa', 'Miyota', 'Tateshina', 'Nagawa', 'Shimosuwa', 'Fujimi', 'Tatsuno', 'Minowa', 'Iijima', 'Matsukawa', 'Takamori', 'Anan', 'Agematsu', 'Nagiso', 'Kiso', 'Ikeda', 'Sakaki', 'Obuse', 'Yamanouchi', 'Shinano', 'Iizuna', 'Ginan', 'Kasamatsu', 'Yoro', 'Tarui', 'Sekigahara', 'Godo', 'Wanouchi', 'Anpachi', 'Ibigawa', 'Ono', 'Ikeda', 'Kitagata', 'Sakahogi', 'Tomika', 'Kawabe', 'Hichiso', 'Yaotsu', 'Shirakawa', 'Mitake', 'Higashiizu', 'Kawazu', 'Minamiizu', 'Matsuzaki', 'Nishiizu', 'Kannami', 'Shimizu', 'Nagaizumi', 'Oyama', 'Yoshida', 'Kawanehon', 'Mori', 'Togo', 'Toyoyama', 'Oguchi', 'Fuso', 'Oharu', 'Kanie', 'Agui', 'Higashiura', 'Minamichita', 'Mihama', 'Taketoyo', 'Mihama', 'Kota', 'Shitara', 'Toei', 'Kisosaki', 'Toin', 'Komono', 'Asahi', 'Kawagoe', 'Taki', 'Meiwa', 'Odai', 'Tamaki', 'Watarai', 'Taiki', 'Minamiise', 'Kihoku', 'Mihama', 'Kiho', 'Hino', 'Ryuo', 'Aisho', 'Toyosato', 'Kora', 'Taga', 'Oyamazaki', 'Kumiyama', 'Ide', 'Ujitawara', 'Kasagi', 'Wazuka', 'Seika', 'Kyotamba', 'Ine', 'Yosano', 'Shimamoto', 'Toyono', 'Nose', 'Tadaoka', 'Kumatori', 'Tajiri', 'Misaki', 'Taishi', 'Kanan', 'Inagawa', 'Taka', 'Inami', 'Harima', 'Ichikawa', 'Fukusaki', 'Kamikawa', 'Taishi', 'Kamigori', 'Sayo', 'Kami', 'Shinonsen', 'Heguri', 'Sango', 'Ikaruga', 'Ando', 'Kawanishi', 'Miyake', 'Tawaramoto', 'Takatori', 'Kanmaki', 'Oji', 'Koryo', 'Kawai', 'Yoshino', 'Oyodo', 'Shimoichi', 'Kushimoto', 'Kimino', 'Katsuragi', 'Kudoyama', 'Koya', 'Yuasa', 'Hirogawa', 'Aridagawa', 'Mihama', 'Hidaka', 'Yura', 'Inami', 'Minabe', 'Hidakagawa', 'Shirahama', 'Kamitonda', 'Susami', 'Nachikatsuura', 'Taiji', 'Kozagawa', 'Iwami', 'Wakasa', 'Chizu', 'Yazu', 'Misasa', 'Yurihama', 'Kotoura', 'Hokuei', 'Daisen', 'Nanbu', 'Hoki', 'Nichinan', 'Hino', 'Kofu', 'Okuizumo', 'Iinan', 'Kawamoto', 'Misato', 'Onan', 'Tsuwano', 'Yoshika', 'Ama', 'Nishinoshima', 'Okinoshima', 'Wake', 'Hayashima', 'Satosho', 'Yakage', 'Kagamino', 'Shoo', 'Nagi', 'Kumenan', 'Misaki', 'Kibichuo', 'Fuchu', 'Kaita', 'Kumano', 'Saka', 'Kitahiroshima', 'Akiota', 'Osakikamijima', 'Sera', 'Jinsekikogen', 'Suooshima', 'Waki', 'Kaminoseki', 'Tabuse', 'Hirao', 'Abu', 'Katsuura', 'Kamikatsu', 'Ishii', 'Kamiyama', 'Naka', 'Mugi', 'Minami', 'Kaiyo', 'Matsushige', 'Kitajima', 'Aizumi', 'Itano', 'Kamiita', 'Tsurugi', 'Higashimiyoshi', 'Tonosho', 'Shodoshima', 'Miki', 'Naoshima', 'Utazu', 'Ayagawa', 'Kotohira', 'Tadotsu', 'Manno', 'Kamijima', 'Kumakogen', 'Masaki', 'Tobe', 'Uchiko', 'Ikata', 'Kihoku', 'Matsuno', 'Ainan', 'Toyo', 'Nahari', 'Tano', 'Yasuda', 'Motoyama', 'Otoyo', 'Tosa', 'Ino', 'Niyodogawa', 'Nakatosa', 'Sakawa', 'Ochi', 'Yusuhara', 'Tsuno', 'Shimanto', 'Otsuki', 'Kuroshio', 'Nakagawa', 'Umi', 'Sasaguri', 'Shime', 'Sue', 'Shingu', 'Hisayama', 'Kasuya', 'Ashiya', 'Mizumaki', 'Okagaki', 'Onga', 'Kotake', 'Kurate', 'Keisen', 'Chikuzen', 'Tachiarai', 'Oki', 'Hirokawa', 'Kawara', 'Soeda', 'Itoda', 'Kawasaki', 'Oto', 'Fukuchi', 'Kanda', 'Miyako', 'Yoshitomi', 'Koge', 'Chikujo', 'Yoshinogari', 'Kiyama', 'Kamimine', 'Miyaki', 'Genkai', 'Arita', 'Omachi', 'Kohoku', 'Shiroishi', 'Tara', 'Nagayo', 'Togitsu', 'Higashisonogi', 'Kawatana', 'Hasami', 'Ojika', 'Saza', 'Shinkamigoto', 'Misato', 'Gyokuto', 'Nankan', 'Nagasu', 'Nagomi', 'Ozu', 'Kikuyo', 'Minamioguni', 'Oguni', 'Takamori', 'Mifune', 'Kashima', 'Mashiki', 'Kosa', 'Yamato', 'Hikawa', 'Ashikita', 'Tsunagi', 'Nishiki', 'Taragi', 'Yunomae', 'Asagiri', 'Reihoku', 'Hiji', 'Kusu', 'Kokonoe', 'Mimata', 'Takaharu', 'Kunitomi', 'Aya', 'Takanabe', 'Shintomi', 'Kijo', 'Kawaminami', 'Tsuno', 'Kadogawa', 'Misato', 'Takachiho', 'Hinokage', 'Gokase', 'Satsuma', 'Nagashima', 'Yusui', 'Osaki', 'Higashikushira', 'Kinko', 'Minamiosumi', 'Kimotsuki', 'Nakatane', 'Minamitane', 'Yakushima', 'Setouchi', 'Tatsugo', 'Kikai', 'Tokunoshima', 'Amagi', 'Isen', 'Wadomari', 'China', 'Yoron', 'Motobu', 'Kin', 'Kadena', 'Chatan', 'Nishihara', 'Yonabaru', 'Haebaru', 'Kumejima', 'Yaese', 'Taketomi', 'Yonaguni']];\n  } // randomize options if randomization is allowed in option\n\n\n  function randomizeOptions() {\n    var mod = _.round((graphWidth + graphHeight) / 1500, 2); // add mod for big screens\n\n\n    if (lockRegionsInput.getAttribute('data-locked') == 0) regionsInput.value = regionsOutput.value = _.random(7, 17);\n\n    if (lockManorsInput.getAttribute('data-locked') == 0) {\n      var _manors = regionsInput.value * 20 + _.random(180 * mod);\n\n      manorsInput.value = manorsOutput.innerHTML = _manors;\n    }\n\n    if (lockPowerInput.getAttribute('data-locked') == 0) powerInput.value = powerOutput.value = _.random(2, 8);\n    if (lockNeutralInput.getAttribute('data-locked') == 0) neutralInput.value = neutralOutput.value = _.random(100, 300);\n    if (lockNamesInput.getAttribute('data-locked') == 0) namesInput.value = _.random(0, 1);\n    if (lockCulturesInput.getAttribute('data-locked') == 0) culturesInput.value = culturesOutput.value = _.random(5, 10);\n    if (lockPrecInput.getAttribute('data-locked') == 0) precInput.value = precOutput.value = _.random(3, 12);\n    if (lockSwampinessInput.getAttribute('data-locked') == 0) swampinessInput.value = swampinessOutput.value = _.random(100);\n  } // Locate points to calculate Voronoi diagram\n\n\n  function placePoints() {\n    console.time('placePoints');\n    points = [];\n    points = getJitteredGrid();\n    heights = new Uint8Array(points.length);\n    console.timeEnd('placePoints');\n  } // Calculate Voronoi Diagram\n\n\n  function calculateVoronoi(points) {\n    console.time('calculateVoronoi');\n    diagram = voronoi(points); // round edges to simplify future calculations\n\n    diagram.edges.forEach(function (e) {\n      e[0][0] = _.round(e[0][0], 2);\n      e[0][1] = _.round(e[0][1], 2);\n      e[1][0] = _.round(e[1][0], 2);\n      e[1][1] = _.round(e[1][1], 2);\n    });\n    polygons = diagram.polygons();\n    console.log(' cells: ' + points.length);\n    console.timeEnd('calculateVoronoi');\n  } // move brush radius circle\n\n\n  function moveCircle(x, y, r, c) {\n    var circle = debug.selectAll('.circle');\n    if (!circle.size()) circle = debug.insert('circle', ':first-child').attr('class', 'circle');\n    circle.attr('cx', x).attr('cy', y);\n    if (r) circle.attr('r', r);\n    if (c) circle.attr('stroke', c);\n  } // restore default drag (map panning) and cursor\n\n\n  function restoreDefaultEvents() {\n    viewbox.style('cursor', 'default').on('.drag', null).on('click', null);\n  } // remove parent element (usually if child is clicked)\n\n\n  function removeParent() {\n    $(this.parentNode).remove();\n  } // define selection based on radius\n\n\n  function defineBrushSelection(center, r) {\n    var radius = r;\n    var selection = [center];\n    if (radius > 1) selection = selection.concat(cells[center].neighbors);\n    selection = $.grep(selection, function (e) {\n      return cells[e].height >= 20;\n    });\n    if (radius === 2) return selection;\n    var frontier = cells[center].neighbors;\n\n    while (radius > 2) {\n      var cycle = frontier.slice();\n      frontier = [];\n      cycle.map(function (s) {\n        cells[s].neighbors.forEach(function (e) {\n          if (selection.indexOf(e) !== -1) return; // if (cells[e].height < 20) return;\n\n          selection.push(e);\n          frontier.push(e);\n        });\n      });\n      radius--;\n    }\n\n    selection = $.grep(selection, function (e) {\n      return cells[e].height >= 20;\n    });\n    return selection;\n  } // Mouseclick events\n\n\n  function placeLinearFeature() {\n    var point = d3.mouse(this);\n    var index = getIndex(point);\n    var tag = debug.selectAll('.tag');\n\n    if (!tag.size()) {\n      tag = debug.append('circle').attr('data-cell', index).attr('class', 'tag').attr('r', 3).attr('cx', point[0]).attr('cy', point[1]);\n    } else {\n      var from = +tag.attr('data-cell');\n      debug.selectAll('.tag, .line').remove();\n      var power = +brushPower.value;\n      var mod = $('#brushesButtons > .pressed').attr('id') === 'brushRange' ? 1 : -1;\n      var selection = addRange(mod, power, from, index);\n      updateHeightmapSelection(selection);\n    }\n  } // turn D3 polygons array into cell array, define neighbors for each cell\n\n\n  function detectNeighbors(withGrid) {\n    console.time('detectNeighbors');\n    var gridPath = ''; // store grid as huge single path string\n\n    cells = [];\n    polygons.map(function (i, d) {\n      var neighbors = [];\n      var type; // define cell type\n\n      if (withGrid) {\n        gridPath += 'M' + i.join('L') + 'Z';\n      } // grid path\n\n\n      diagram.cells[d].halfedges.forEach(function (e) {\n        var edge = diagram.edges[e];\n\n        if (edge.left && edge.right) {\n          var ea = edge.left.index === d ? edge.right.index : edge.left.index;\n          neighbors.push(ea);\n        } else {\n          type = 'border'; // polygon is on border if it has edge without opposite side polygon\n        }\n      });\n      cells.push({\n        index: d,\n        data: i.data,\n        height: 0,\n        type: type,\n        neighbors: neighbors\n      });\n    });\n\n    if (withGrid) {\n      grid.append('path').attr('d', round(gridPath, 1));\n    }\n\n    console.timeEnd('detectNeighbors');\n  } // Generate Heigtmap routine\n\n\n  function defineHeightmap() {\n    console.time('defineHeightmap');\n\n    if (lockTemplateInput.getAttribute('data-locked') == 0) {\n      var rnd = Math.random();\n\n      if (rnd > 0.95) {\n        templateInput.value = 'Volcano';\n      } else if (rnd > 0.75) {\n        templateInput.value = 'High Island';\n      } else if (rnd > 0.55) {\n        templateInput.value = 'Low Island';\n      } else if (rnd > 0.35) {\n        templateInput.value = 'Continents';\n      } else if (rnd > 0.15) {\n        templateInput.value = 'Archipelago';\n      } else if (rnd > 0.10) {\n        templateInput.value = 'Mainland';\n      } else if (rnd > 0.01) {\n        templateInput.value = 'Peninsulas';\n      } else {\n        templateInput.value = 'Atoll';\n      }\n    }\n\n    var mapTemplate = templateInput.value;\n    if (mapTemplate === 'Volcano') templateVolcano();\n    if (mapTemplate === 'High Island') templateHighIsland();\n    if (mapTemplate === 'Low Island') templateLowIsland();\n    if (mapTemplate === 'Continents') templateContinents();\n    if (mapTemplate === 'Archipelago') templateArchipelago();\n    if (mapTemplate === 'Atoll') templateAtoll();\n    if (mapTemplate === 'Mainland') templateMainland();\n    if (mapTemplate === 'Peninsulas') templatePeninsulas();\n    console.log(' template: ' + mapTemplate);\n    console.timeEnd('defineHeightmap');\n  } // Heighmap Template: Volcano\n\n\n  function templateVolcano(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addHill(5, 0.35);\n    addRange(3);\n    addRange(-4);\n  } // Heighmap Template: High Island\n\n\n  function templateHighIsland(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addRange(6);\n    addHill(12, 0.25);\n    addRange(-3);\n    modifyHeights('land', 0, 0.75);\n    addPit(1);\n    addHill(3, 0.15);\n  } // Heighmap Template: Low Island\n\n\n  function templateLowIsland(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    smoothHeights(2);\n    addRange(2);\n    addHill(4, 0.4);\n    addHill(12, 0.2);\n    addRange(-8);\n    modifyHeights('land', 0, 0.35);\n  } // Heighmap Template: Continents\n\n\n  function templateContinents(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addHill(30, 0.25);\n    var count = Math.ceil(Math.random() * 4 + 4);\n    addStrait(count);\n    addPit(10);\n    addRange(-10);\n    modifyHeights('land', 0, 0.6);\n    smoothHeights(2);\n    addRange(3);\n  } // Heighmap Template: Archipelago\n\n\n  function templateArchipelago(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addHill(12, 0.15);\n    addRange(8);\n    var count = Math.ceil(Math.random() * 2 + 2);\n    addStrait(count);\n    addRange(-15);\n    addPit(10);\n    modifyHeights('land', -5, 0.7);\n    smoothHeights(3);\n  } // Heighmap Template: Atoll\n\n\n  function templateAtoll(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addHill(2, 0.35);\n    addRange(2);\n    smoothHeights(1);\n    modifyHeights('27-100', 0, 0.1);\n  } // Heighmap Template: Mainland\n\n\n  function templateMainland(mod) {\n    addMountain();\n    modifyHeights('all', 10, 1);\n    addHill(30, 0.2);\n    addRange(10);\n    addPit(20);\n    addHill(10, 0.15);\n    addRange(-10);\n    modifyHeights('land', 0, 0.4);\n    addRange(10);\n    smoothHeights(3);\n  } // Heighmap Template: Peninsulas\n\n\n  function templatePeninsulas(mod) {\n    addMountain();\n    modifyHeights('all', 15, 1);\n    addHill(30, 0);\n    addRange(5);\n    addPit(15);\n    var count = Math.ceil(Math.random() * 5 + 15);\n    addStrait(count);\n  }\n\n  function addMountain() {\n    var x = Math.floor(Math.random() * graphWidth / 3 + graphWidth / 3);\n    var y = Math.floor(Math.random() * graphHeight * 0.2 + graphHeight * 0.4);\n    var cell = diagram.find(x, y).index;\n    var height = Math.random() * 10 + 90; // 90-99\n\n    add(cell, 'mountain', height);\n  } // place with shift 0-0.5\n\n\n  function addHill(count, shift) {\n    for (var c = 0; c < count; c++) {\n      var limit = 0,\n          cell = void 0,\n          height = void 0;\n\n      do {\n        height = Math.random() * 40 + 10; // 10-50\n\n        var x = Math.floor(Math.random() * graphWidth * (1 - shift * 2) + graphWidth * shift);\n        var y = Math.floor(Math.random() * graphHeight * (1 - shift * 2) + graphHeight * shift);\n        cell = diagram.find(x, y).index;\n        limit++;\n      } while (heights[cell] + height > 90 && limit < 100);\n\n      add(cell, 'hill', height);\n    }\n  }\n\n  function add(start, type, height) {\n    var session = Math.ceil(Math.random() * 1e5);\n    var radius;\n    var hRadius;\n    var mRadius;\n\n    switch (+graphSize) {\n      case 1:\n        hRadius = 0.991;\n        mRadius = 0.91;\n        break;\n\n      case 2:\n        hRadius = 0.9967;\n        mRadius = 0.951;\n        break;\n\n      case 3:\n        hRadius = 0.999;\n        mRadius = 0.975;\n        break;\n\n      case 4:\n        hRadius = 0.9994;\n        mRadius = 0.98;\n        break;\n    }\n\n    radius = type === 'mountain' ? mRadius : hRadius;\n    var queue = [start];\n    if (type === 'mountain') heights[start] = height;\n\n    for (var i = 0; i < queue.length && height >= 1; i++) {\n      if (type === 'mountain') {\n        height = heights[queue[i]] * radius - height / 100;\n      } else {\n        height *= radius;\n      }\n\n      cells[queue[i]].neighbors.forEach(function (e) {\n        if (cells[e].used === session) return;\n        var mod = Math.random() * 0.2 + 0.9; // 0.9-1.1 random factor\n\n        heights[e] += height * mod;\n        if (heights[e] > 100) heights[e] = 100;\n        cells[e].used = session;\n        queue.push(e);\n      });\n    }\n  }\n\n  function addRange(mod, height, from, to) {\n    var session = Math.ceil(Math.random() * 100000);\n    var count = Math.abs(mod);\n    var range = [];\n\n    var _loop = function _loop(c) {\n      range = [];\n      var diff = 0,\n          start = from,\n          end = to;\n\n      if (!start || !end) {\n        do {\n          var xf = Math.floor(Math.random() * (graphWidth * 0.7)) + graphWidth * 0.15;\n          var yf = Math.floor(Math.random() * (graphHeight * 0.6)) + graphHeight * 0.2;\n          start = diagram.find(xf, yf).index;\n          var xt = Math.floor(Math.random() * (graphWidth * 0.7)) + graphWidth * 0.15;\n          var yt = Math.floor(Math.random() * (graphHeight * 0.6)) + graphHeight * 0.2;\n          end = diagram.find(xt, yt).index;\n          diff = Math.hypot(xt - xf, yt - yf);\n        } while (diff < 150 / graphSize || diff > 300 / graphSize);\n      }\n\n      if (start && end) {\n        var _loop2 = function _loop2(l) {\n          var min = 10000;\n          cells[start].neighbors.forEach(function (e) {\n            diff = Math.hypot(cells[end].data[0] - cells[e].data[0], cells[end].data[1] - cells[e].data[1]);\n            if (Math.random() > 0.8) diff = diff / 2;\n\n            if (diff < min) {\n              min = diff, start = e;\n            }\n          });\n          range.push(start);\n        };\n\n        for (var l = 0; start != end && l < 10000; l++) {\n          _loop2(l);\n        }\n      }\n\n      var change = height ? height : Math.random() * 10 + 10;\n      range.map(function (r) {\n        var rnd = Math.random() * 0.4 + 0.8;\n        if (mod > 0) heights[r] += change * rnd;else if (heights[r] >= 10) {\n          heights[r] -= change * rnd;\n        }\n        cells[r].neighbors.forEach(function (e) {\n          if (cells[e].used === session) return;\n          cells[e].used = session;\n          rnd = Math.random() * 0.4 + 0.8;\n          var ch = change / 2 * rnd;\n\n          if (mod > 0) {\n            heights[e] += ch;\n          } else if (heights[e] >= 10) {\n            heights[e] -= ch;\n          }\n\n          if (heights[e] > 100) heights[e] = mod > 0 ? 100 : 5;\n        });\n        if (heights[r] > 100) heights[r] = mod > 0 ? 100 : 5;\n      });\n    };\n\n    for (var c = 0; c < count; c++) {\n      _loop(c);\n    }\n\n    return range;\n  }\n\n  function addStrait(width) {\n    var session = Math.ceil(Math.random() * 100000);\n    var top = Math.floor(Math.random() * graphWidth * 0.35 + graphWidth * 0.3);\n    var bottom = Math.floor(graphWidth - top - graphWidth * 0.1 + Math.random() * graphWidth * 0.2);\n    var start = diagram.find(top, graphHeight * 0.1).index;\n    var end = diagram.find(bottom, graphHeight * 0.9).index;\n    var range = [];\n\n    var _loop3 = function _loop3(l) {\n      var min = 10000; // dummy value\n\n      cells[start].neighbors.forEach(function (e) {\n        var diff = Math.hypot(cells[end].data[0] - cells[e].data[0], cells[end].data[1] - cells[e].data[1]);\n\n        if (Math.random() > 0.8) {\n          diff = diff / 2;\n        }\n\n        if (diff < min) {\n          min = diff;\n          start = e;\n        }\n      });\n      range.push(start);\n    };\n\n    for (var l = 0; start !== end && l < 1000; l++) {\n      _loop3(l);\n    }\n\n    var query = [];\n\n    for (; width > 0; width--) {\n      range.map(function (r) {\n        cells[r].neighbors.forEach(function (e) {\n          if (cells[e].used === session) {\n            return;\n          }\n\n          cells[e].used = session;\n          query.push(e);\n          heights[e] *= 0.23;\n          if (heights[e] > 100 || heights[e] < 5) heights[e] = 5;\n        });\n        range = query.slice();\n      });\n    }\n  }\n\n  function addPit(count, height, cell) {\n    var session = Math.ceil(Math.random() * 1e5);\n\n    var _loop4 = function _loop4(c) {\n      var change = height ? height + 10 : Math.random() * 10 + 20;\n      var start = cell;\n\n      if (!start) {\n        var lowlands = $.grep(cells, function (e) {\n          return heights[e.index] >= 20;\n        });\n        if (!lowlands.length) return {\n          v: void 0\n        };\n        var rnd = Math.floor(Math.random() * lowlands.length);\n        start = lowlands[rnd].index;\n      }\n\n      var query = [start],\n          newQuery = []; // depress pit center\n\n      heights[start] -= change;\n      if (heights[start] < 5 || heights[start] > 100) heights[start] = 5;\n      cells[start].used = session;\n\n      for (var i = 1; i < 10000; i++) {\n        var _rnd = Math.random() * 0.4 + 0.8;\n\n        change -= i / 0.6 * _rnd;\n        if (change < 1) break;\n        query.map(function (p) {\n          cells[p].neighbors.forEach(function (e) {\n            if (cells[e].used === session) return;\n            cells[e].used = session;\n            if (Math.random() > 0.8) return;\n            newQuery.push(e);\n            heights[e] -= change;\n            if (heights[e] < 5 || heights[e] > 100) heights[e] = 5;\n          });\n        });\n        query = newQuery.slice();\n        newQuery = [];\n      }\n    };\n\n    for (var c = 0; c < count; c++) {\n      var _ret = _loop4(c);\n\n      if (_typeof(_ret) === \"object\") return _ret.v;\n    }\n  } // Modify heights adding or multiplying by value\n\n\n  function modifyHeights(range, add, mult) {\n    function modify(v) {\n      if (add) v += add;\n\n      if (mult !== 1) {\n        if (mult === '^2') mult = (v - 20) / 100;\n        if (mult === '^3') mult = (v - 20) * (v - 20) / 100;\n\n        if (range === 'land') {\n          v = 20 + (v - 20) * mult;\n        } else {\n          v *= mult;\n        }\n      }\n\n      if (v < 0) v = 0;\n      if (v > 100) v = 100;\n      return v;\n    }\n\n    var limMin = range === 'land' ? 20 : range === 'all' ? 0 : +range.split('-')[0];\n    var limMax = range === 'land' || range === 'all' ? 100 : +range.split('-')[1];\n\n    for (var i = 0; i < heights.length; i++) {\n      if (heights[i] < limMin || heights[i] > limMax) continue;\n      heights[i] = modify(heights[i]);\n    }\n  } // Smooth heights using mean of neighbors\n\n\n  function smoothHeights(fraction) {\n    var fr = fraction || 2;\n\n    var _loop5 = function _loop5(i) {\n      var nHeights = [heights[i]];\n      cells[i].neighbors.forEach(function (e) {\n        nHeights.push(heights[e]);\n      });\n      heights[i] = (heights[i] * (fr - 1) + d3.mean(nHeights)) / fr;\n    };\n\n    for (var i = 0; i < heights.length; i++) {\n      _loop5(i);\n    }\n  } // Randomize heights a bit\n\n\n  function disruptHeights() {\n    for (var i = 0; i < heights.length; i++) {\n      if (heights[i] < 18) continue;\n      if (Math.random() < 0.5) continue;\n      heights[i] += 2 - Math.random() * 4;\n    }\n  } // Mark features (ocean, lakes, islands)\n\n\n  function markFeatures() {\n    console.time('markFeatures');\n    seedrandom(seed); // reset seed to get the same result on heightmap edit\n\n    var _loop6 = function _loop6(i, _queue) {\n      var cell = cells[_queue[0]];\n      cell.fn = i; // feature number\n\n      var land = heights[_queue[0]] >= 20;\n      var border = cell.type === 'border';\n      if (border && land) cell.ctype = 2;\n\n      var _loop7 = function _loop7() {\n        var q = _queue.pop();\n\n        if (cells[q].type === 'border') {\n          border = true;\n          if (land) cells[q].ctype = 2;\n        }\n\n        cells[q].neighbors.forEach(function (e) {\n          var eLand = heights[e] >= 20;\n\n          if (land === eLand && cells[e].fn === undefined) {\n            cells[e].fn = i;\n\n            _queue.push(e);\n          }\n\n          if (land && !eLand) {\n            cells[q].ctype = 2;\n            cells[e].ctype = -1;\n            cells[q].harbor = cells[q].harbor ? cells[q].harbor + 1 : 1;\n          }\n        });\n      };\n\n      while (_queue.length) {\n        _loop7();\n      }\n\n      features.push({\n        i: i,\n        land: land,\n        border: border\n      }); // find unmarked cell\n\n      for (var c = 0; c < cells.length; c++) {\n        if (cells[c].fn === undefined) {\n          _queue[0] = c;\n          break;\n        }\n      }\n    };\n\n    for (var i = 0, _queue = [0]; _queue.length > 0; i++) {\n      _loop6(i, _queue);\n    }\n\n    console.timeEnd('markFeatures');\n  }\n\n  function drawOcean() {\n    console.time('drawOcean');\n    var limits = [];\n    var odd = 0.8; // initial odd for ocean layer is 80%\n    // Define type of ocean cells based on cell distance form land\n\n    var frontier = $.grep(cells, function (e) {\n      return e.ctype === -1;\n    });\n\n    if (Math.random() < odd) {\n      limits.push(-1);\n      odd = 0.2;\n    }\n\n    var _loop8 = function _loop8(c) {\n      if (Math.random() < odd) {\n        limits.unshift(c);\n        odd = 0.2;\n      } else {\n        odd += 0.2;\n      }\n\n      frontier.map(function (i) {\n        i.neighbors.forEach(function (e) {\n          if (!cells[e].ctype) cells[e].ctype = c;\n        });\n      });\n      frontier = $.grep(cells, function (e) {\n        return e.ctype === c;\n      });\n    };\n\n    for (var c = -2; frontier.length > 0 && c > -10; c--) {\n      _loop8(c);\n    }\n\n    if (outlineLayersInput.value === 'none') return;\n    if (outlineLayersInput.value !== 'random') limits = outlineLayersInput.value.split(','); // Define area edges\n\n    var opacity = _.round(0.4 / limits.length, 2);\n\n    var _loop9 = function _loop9(l) {\n      var edges = [];\n      var lim = +limits[l];\n\n      var _loop10 = function _loop10(i) {\n        if (cells[i].ctype < lim || cells[i].ctype === undefined) return \"continue\";\n        if (cells[i].ctype > lim && cells[i].type !== 'border') return \"continue\";\n        var cell = diagram.cells[i];\n        cell.halfedges.forEach(function (e) {\n          var edge = diagram.edges[e];\n          var start = edge[0].join(' ');\n          var end = edge[1].join(' ');\n\n          if (edge.left && edge.right) {\n            var ea = edge.left.index === i ? edge.right.index : edge.left.index;\n            if (cells[ea].ctype < lim) edges.push({\n              start: start,\n              end: end\n            });\n          } else {\n            edges.push({\n              start: start,\n              end: end\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < cells.length; i++) {\n        var _ret2 = _loop10(i);\n\n        if (_ret2 === \"continue\") continue;\n      }\n\n      lineGen.curve(d3.curveBasis);\n      var relax = 0.8 - l / 10;\n      if (relax < 0.2) relax = 0.2;\n      var line = getContinuousLine(edges, 0, relax);\n      oceanLayers.append('path').attr('d', line).attr('fill', '#ecf2f9').style('opacity', opacity);\n    };\n\n    for (var l = 0; l < limits.length; l++) {\n      _loop9(l);\n    }\n\n    console.timeEnd('drawOcean');\n  } // recalculate Voronoi Graph to pack cells\n\n\n  function reGraph() {\n    console.time('reGraph');\n    var tempCells = [],\n        newPoints = []; // to store new data\n    // get average precipitation based on graph size\n\n    var avPrec = precInput.value / 5000;\n    var smallLakesMax = 500;\n    var smallLakes = 0;\n    var evaporation = 2;\n    cells.map(function (i, d) {\n      var height = i.height || heights[d];\n      if (height > 100) height = 100;\n      var pit = i.pit;\n      var ctype = i.ctype;\n      if (ctype !== -1 && ctype !== -2 && height < 20) return; // exclude all deep ocean points\n\n      var x = _.round(i.data[0], 1),\n          y = _.round(i.data[1], 1);\n\n      var fn = i.fn;\n      var harbor = i.harbor;\n      var lake = i.lake; // mark potential cells for small lakes to add additional point there\n\n      if (smallLakes < smallLakesMax && !lake && pit > evaporation && ctype !== 2) {\n        lake = 2;\n        smallLakes++;\n      }\n\n      var region = i.region; // handle value for edit heightmap mode only\n\n      var culture = i.culture; // handle value for edit heightmap mode only\n\n      var copy = $.grep(newPoints, function (e) {\n        return e[0] == x && e[1] == y;\n      });\n\n      if (!copy.length) {\n        newPoints.push([x, y]);\n        tempCells.push({\n          index: tempCells.length,\n          data: [x, y],\n          height: height,\n          pit: pit,\n          ctype: ctype,\n          fn: fn,\n          harbor: harbor,\n          lake: lake,\n          region: region,\n          culture: culture\n        });\n      } // add additional points for cells along coast\n\n\n      if (ctype === 2 || ctype === -1) {\n        if (i.type === 'border') return;\n        if (!features[fn].land && !features[fn].border) return;\n        i.neighbors.forEach(function (e) {\n          if (cells[e].ctype === ctype) {\n            var x1 = (x * 2 + cells[e].data[0]) / 3;\n            var y1 = (y * 2 + cells[e].data[1]) / 3;\n            x1 = _.round(x1, 1), y1 = _.round(y1, 1);\n            copy = $.grep(newPoints, function (e) {\n              return e[0] === x1 && e[1] === y1;\n            });\n            if (copy.length) return;\n            newPoints.push([x1, y1]);\n            tempCells.push({\n              index: tempCells.length,\n              data: [x1, y1],\n              height: height,\n              pit: pit,\n              ctype: ctype,\n              fn: fn,\n              harbor: harbor,\n              lake: lake,\n              region: region,\n              culture: culture\n            });\n          }\n        });\n      }\n\n      if (lake === 2) {\n        // add potential small lakes\n        polygons[i.index].forEach(function (e) {\n          if (Math.random() > 0.8) return;\n          var rnd = Math.random() * 0.6 + 0.8;\n\n          var x1 = _.round((e[0] * rnd + i.data[0]) / (1 + rnd), 2);\n\n          rnd = Math.random() * 0.6 + 0.8;\n\n          var y1 = _.round((e[1] * rnd + i.data[1]) / (1 + rnd), 2);\n\n          copy = $.grep(newPoints, function (c) {\n            return x1 === c[0] && y1 === c[1];\n          });\n          if (copy.length) return;\n          newPoints.push([x1, y1]);\n          tempCells.push({\n            index: tempCells.length,\n            data: [x1, y1],\n            height: height,\n            pit: pit,\n            ctype: ctype,\n            fn: fn,\n            region: region,\n            culture: culture\n          });\n        });\n      }\n    });\n    console.log('small lakes candidates: ' + smallLakes);\n    cells = tempCells; // use tempCells as the only cells array\n\n    calculateVoronoi(newPoints); // recalculate Voronoi diagram using new points\n\n    var gridPath = ''; // store grid as huge single path string\n\n    cells.map(function (i, d) {\n      if (i.height >= 20) {\n        // calc cell area\n        i.area = _.round(Math.abs(d3.polygonArea(polygons[d])), 2);\n\n        var prec = _.round(avPrec * i.area, 2);\n\n        i.flux = i.lake ? prec * 10 : prec;\n      }\n\n      var neighbors = []; // re-detect neighbors\n\n      diagram.cells[d].halfedges.forEach(function (e) {\n        var edge = diagram.edges[e];\n\n        if (edge.left === undefined || edge.right === undefined) {\n          if (i.height >= 20) i.ctype = 99; // border cell\n\n          return;\n        }\n\n        var ea = edge.left.index === d ? edge.right.index : edge.left.index;\n        neighbors.push(ea);\n\n        if (d < ea && i.height >= 20 && i.lake !== 1 && cells[ea].height >= 20 && cells[ea].lake !== 1) {\n          gridPath += 'M' + edge[0][0] + ',' + edge[0][1] + 'L' + edge[1][0] + ',' + edge[1][1];\n        }\n      });\n      i.neighbors = neighbors;\n      if (i.region === undefined) delete i.region;\n      if (i.culture === undefined) delete i.culture;\n    });\n    grid.append('path').attr('d', gridPath);\n    console.timeEnd('reGraph');\n  } // redraw all cells for Customization 1 mode\n\n\n  function mockHeightmap() {\n    var landCells = 0;\n    $('#landmass').empty();\n    var limit = renderOcean.checked ? 1 : 20;\n\n    for (var i = 0; i < heights.length; i++) {\n      if (heights[i] < limit) continue;\n      if (heights[i] > 100) heights[i] = 100;\n      var clr = color(1 - heights[i] / 100);\n      landmass.append('path').attr('id', 'cell' + i).attr('d', 'M' + polygons[i].join('L') + 'Z').attr('fill', clr).attr('stroke', clr);\n    }\n  }\n\n  $('#renderOcean').click(mockHeightmap); // draw or update all cells\n\n  function updateHeightmap() {\n    var limit = renderOcean.checked ? 1 : 20;\n\n    for (var i = 0; i < heights.length; i++) {\n      if (heights[i] > 100) heights[i] = 100;\n      var cell = landmass.select('#cell' + i);\n      var clr = color(1 - heights[i] / 100);\n\n      if (cell.size()) {\n        if (heights[i] < limit) {\n          cell.remove();\n        } else {\n          cell.attr('fill', clr).attr('stroke', clr);\n        }\n      } else if (heights[i] >= limit) {\n        cell = landmass.append('path').attr('id', 'cell' + i).attr('d', 'M' + polygons[i].join('L') + 'Z').attr('fill', clr).attr('stroke', clr);\n      }\n    }\n  } // draw or update cells from the selection\n\n\n  function updateHeightmapSelection(selection) {\n    if (selection === undefined) return;\n    var limit = renderOcean.checked ? 1 : 20;\n    selection.map(function (s) {\n      if (heights[s] > 100) heights[s] = 100;\n      var cell = landmass.select('#cell' + s);\n      var clr = color(1 - heights[s] / 100);\n\n      if (cell.size()) {\n        if (heights[s] < limit) {\n          cell.remove();\n        } else {\n          cell.attr('fill', clr).attr('stroke', clr);\n        }\n      } else if (heights[s] >= limit) {\n        cell = landmass.append('path').attr('id', 'cell' + s).attr('d', 'M' + polygons[s].join('L') + 'Z').attr('fill', clr).attr('stroke', clr);\n      }\n    });\n  }\n\n  function updateHistory() {\n    var landCells = 0; // count number of land cells\n\n    if (renderOcean.checked) {\n      landCells = heights.reduce(function (s, v) {\n        if (v >= 20) {\n          return s + 1;\n        } else {\n          return s;\n        }\n      }, 0);\n    } else {\n      landCells = landmass.selectAll('*').size();\n    }\n\n    history = history.slice(0, historyStage);\n    history[historyStage] = heights.slice();\n    historyStage++;\n    undo.disabled = templateUndo.disabled = historyStage <= 1;\n    redo.disabled = templateRedo.disabled = true;\n    var landMean = Math.trunc(d3.mean(heights));\n\n    var landRatio = _.round(landCells / heights.length * 100);\n\n    landmassCounter.innerHTML = landCells;\n    landmassRatio.innerHTML = landRatio;\n    landmassAverage.innerHTML = landMean; // if perspective view dialog is opened, update it\n\n    if ($('#perspectivePanel').is(':visible')) drawPerspective();\n  } // restoreHistory\n\n\n  function restoreHistory(step) {\n    historyStage = step;\n    redo.disabled = templateRedo.disabled = historyStage >= history.length;\n    undo.disabled = templateUndo.disabled = historyStage <= 1;\n    if (history[historyStage - 1] === undefined) return;\n    heights = history[historyStage - 1].slice();\n    updateHeightmap();\n  } // restart history from 1st step\n\n\n  function restartHistory() {\n    history = [];\n    historyStage = 0;\n    redo.disabled = templateRedo.disabled = true;\n    undo.disabled = templateUndo.disabled = true;\n    updateHistory();\n  } // Detect and draw the coasline\n\n\n  function drawCoastline() {\n    console.time('drawCoastline');\n    seedrandom(seed); // reset seed to get the same result on heightmap edit\n\n    var shape = defs.append('mask').attr('id', 'shape').attr('fill', 'black').attr('x', 0).attr('y', 0).attr('width', '100%').attr('height', '100%');\n    $('#landmass').empty();\n    var minX = graphWidth,\n        maxX = 0; // extreme points\n\n    var minXedge, maxXedge; // extreme edges\n\n    var oceanEdges = [],\n        lakeEdges = [];\n\n    var _loop11 = function _loop11(i) {\n      var id = land[i].index,\n          cell = diagram.cells[id];\n      var f = land[i].fn;\n      land[i].height = Math.trunc(land[i].height);\n\n      if (!oceanEdges[f]) {\n        oceanEdges[f] = [];\n        lakeEdges[f] = [];\n      }\n\n      cell.halfedges.forEach(function (e) {\n        var edge = diagram.edges[e];\n        var start = edge[0].join(' ');\n        var end = edge[1].join(' ');\n\n        if (edge.left && edge.right) {\n          var ea = edge.left.index === id ? edge.right.index : edge.left.index;\n          cells[ea].height = Math.trunc(cells[ea].height);\n\n          if (cells[ea].height < 20) {\n            cells[ea].ctype = -1;\n\n            if (land[i].ctype !== 1) {\n              land[i].ctype = 1; // mark coastal land cells\n              // move cell point closer to coast\n\n              var x = (land[i].data[0] + cells[ea].data[0]) / 2;\n              var y = (land[i].data[1] + cells[ea].data[1]) / 2;\n              land[i].haven = ea; // harbor haven (oposite water cell)\n\n              land[i].coastX = _.round(x + (land[i].data[0] - x) * 0.1, 1);\n              land[i].coastY = _.round(y + (land[i].data[1] - y) * 0.1, 1);\n              land[i].data[0] = _.round(x + (land[i].data[0] - x) * 0.5, 1);\n              land[i].data[1] = _.round(y + (land[i].data[1] - y) * 0.5, 1);\n            }\n\n            if (features[cells[ea].fn].border) {\n              oceanEdges[f].push({\n                start: start,\n                end: end\n              }); // island extreme points\n\n              if (edge[0][0] < minX) {\n                minX = edge[0][0];\n                minXedge = edge[0];\n              }\n\n              if (edge[1][0] < minX) {\n                minX = edge[1][0];\n                minXedge = edge[1];\n              }\n\n              if (edge[0][0] > maxX) {\n                maxX = edge[0][0];\n                maxXedge = edge[0];\n              }\n\n              if (edge[1][0] > maxX) {\n                maxX = edge[1][0];\n                maxXedge = edge[1];\n              }\n            } else {\n              var l = cells[ea].fn;\n              if (!lakeEdges[f][l]) lakeEdges[f][l] = [];\n              lakeEdges[f][l].push({\n                start: start,\n                end: end\n              });\n            }\n          }\n        } else {\n          oceanEdges[f].push({\n            start: start,\n            end: end\n          });\n        }\n      });\n    };\n\n    for (var i = 0; i < land.length; i++) {\n      _loop11(i);\n    }\n\n    for (var f = 0; f < features.length; f++) {\n      if (!oceanEdges[f]) continue;\n\n      if (!oceanEdges[f].length && lakeEdges[f].length) {\n        var m = lakeEdges[f].indexOf(d3.max(lakeEdges[f]));\n        oceanEdges[f] = lakeEdges[f][m];\n        lakeEdges[f][m] = [];\n      }\n\n      lineGen.curve(d3.curveCatmullRomClosed.alpha(0.1));\n      var oceanCoastline = getContinuousLine(oceanEdges[f], 3, 0);\n\n      if (oceanCoastline) {\n        shape.append('path').attr('d', oceanCoastline).attr('fill', 'white'); // draw the mask\n\n        coastline.append('path').attr('d', oceanCoastline); // draw the coastline\n      }\n\n      lineGen.curve(d3.curveBasisClosed);\n      lakeEdges[f].forEach(function (l) {\n        var lakeCoastline = getContinuousLine(l, 3, 0);\n\n        if (lakeCoastline) {\n          shape.append('path').attr('d', lakeCoastline).attr('fill', 'black'); // draw the mask\n\n          lakes.append('path').attr('d', lakeCoastline); // draw the lakes\n        }\n      });\n    }\n\n    landmass.append('rect').attr('x', 0).attr('y', 0).attr('width', graphWidth).attr('height', graphHeight); // draw the landmass\n\n    drawDefaultRuler(minXedge, maxXedge);\n    console.timeEnd('drawCoastline');\n  } // draw default scale bar\n\n\n  function drawScaleBar() {\n    if ($('#scaleBar').hasClass('hidden')) return; // no need to re-draw hidden element\n\n    svg.select('#scaleBar').remove(); // fully redraw every time\n    // get size\n\n    var size = +barSize.value;\n    var dScale = distanceScale.value;\n    var unit = distanceUnit.value;\n    var scaleBar = svg.append('g').attr('id', 'scaleBar').on('click', editScale).on('mousemove', function () {\n      tip('Click to open Scale Editor, drag to move');\n    }).call(d3.drag().on('start', elementDrag));\n    var init = 100; // actual length in pixels if scale, dScale and size = 1;\n\n    var val = init * size * dScale / scale; // bar length in distance unit\n\n    if (val > 900) {\n      val = _.round(val, -3);\n    } // round to 1000\n    else if (val > 90) {\n        val = _.round(val, -2);\n      } // round to 100\n      else if (val > 9) {\n          val = _.round(val, -1);\n        } // round to 10\n        else {\n            val = Math.round(val);\n          } // round to 1\n\n\n    var l = val * scale / dScale; // actual length in pixels on this scale\n\n    var x = 0,\n        y = 0; // initial position\n\n    scaleBar.append('line').attr('x1', x + 0.5).attr('y1', y).attr('x2', x + l + size - 0.5).attr('y2', y).attr('stroke-width', size).attr('stroke', 'white');\n    scaleBar.append('line').attr('x1', x).attr('y1', y + size).attr('x2', x + l + size).attr('y2', y + size).attr('stroke-width', size).attr('stroke', '#3d3d3d');\n\n    var dash = size + ' ' + _.round(l / 5 - size, 2);\n\n    scaleBar.append('line').attr('x1', x).attr('y1', y).attr('x2', x + l + size).attr('y2', y).attr('stroke-width', _.round(size * 3, 2)).attr('stroke-dasharray', dash).attr('stroke', '#3d3d3d'); // big scale\n\n    for (var b = 0; b < 6; b++) {\n      var value = _.round(b * l / 5, 2);\n\n      var label = _.round(value * dScale / scale);\n\n      if (b === 5) {\n        scaleBar.append('text').attr('x', x + value).attr('y', y - 2 * size).attr('font-size', _.round(5 * size, 1)).text(label + ' ' + unit);\n      } else {\n        scaleBar.append('text').attr('x', x + value).attr('y', y - 2 * size).attr('font-size', _.round(5 * size, 1)).text(label);\n      }\n    }\n\n    if (barLabel.value !== '') {\n      scaleBar.append('text').attr('x', x + (l + 1) / 2).attr('y', y + 2 * size).attr('dominant-baseline', 'text-before-edge').attr('font-size', _.round(5 * size, 1)).text(barLabel.value);\n    }\n\n    var bbox = scaleBar.node().getBBox(); // append backbround rectangle\n\n    scaleBar.insert('rect', ':first-child').attr('x', -10).attr('y', -20).attr('width', bbox.width + 10).attr('height', bbox.height + 15).attr('stroke-width', size).attr('stroke', 'none').attr('filter', 'url(#blur5)').attr('fill', barBackColor.value).attr('opacity', +barBackOpacity.value);\n    fitScaleBar();\n  } // draw default ruler measiring land x-axis edges\n\n\n  function drawDefaultRuler(minXedge, maxXedge) {\n    var rulerNew = ruler.append('g').attr('class', 'linear').call(d3.drag().on('start', elementDrag));\n    if (!minXedge) minXedge = [0, 0];\n    if (!maxXedge) maxXedge = [svgWidth, svgHeight];\n\n    var x1 = _.round(minXedge[0], 2),\n        y1 = _.round(minXedge[1], 2),\n        x2 = _.round(maxXedge[0], 2),\n        y2 = _.round(maxXedge[1], 2);\n\n    rulerNew.append('line').attr('x1', x1).attr('y1', y1).attr('x2', x2).attr('y2', y2).attr('class', 'white');\n    rulerNew.append('line').attr('x1', x1).attr('y1', y1).attr('x2', x2).attr('y2', y2).attr('class', 'gray').attr('stroke-dasharray', 10);\n    rulerNew.append('circle').attr('r', 2).attr('cx', x1).attr('cy', y1).attr('stroke-width', 0.5).attr('data-edge', 'left').call(d3.drag().on('drag', rulerEdgeDrag));\n    rulerNew.append('circle').attr('r', 2).attr('cx', x2).attr('cy', y2).attr('stroke-width', 0.5).attr('data-edge', 'rigth').call(d3.drag().on('drag', rulerEdgeDrag));\n\n    var x0 = _.round((x1 + x2) / 2, 2);\n\n    var y0 = _.round((y1 + y2) / 2, 2);\n\n    rulerNew.append('circle').attr('r', 1.2).attr('cx', x0).attr('cy', y0).attr('stroke-width', 0.3).attr('class', 'center').call(d3.drag().on('start', rulerCenterDrag));\n    var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n    var tr = 'rotate(' + angle + ' ' + x0 + ' ' + y0 + ')';\n    var dist = Math.round(Math.hypot(x1 - x2, y1 - y2));\n    var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n    rulerNew.append('text').attr('x', x0).attr('y', y0).attr('dy', -1).attr('transform', tr).attr('data-dist', dist).text(label).on('click', removeParent).attr('font-size', 10);\n  } // drag any element changing transform\n\n\n  function elementDrag() {\n    var el = d3.select(this);\n    var tr = parseTransform(el.attr('transform'));\n    var dx = +tr[0] - d3.event.x;\n    var dy = +tr[1] - d3.event.y;\n    d3.event.on('drag', function () {\n      var x = d3.event.x;\n      var y = d3.event.y;\n      var transform = \"translate(\".concat(dx + x, \",\").concat(dy + y, \") rotate(\").concat(tr[2], \" \").concat(tr[3], \" \").concat(tr[4], \")\");\n      el.attr('transform', transform);\n      var pp = this.parentNode.parentNode.id;\n\n      if (pp === 'burgIcons' || pp === 'burgLabels') {\n        tip('Use dragging for fine-tuning only, to move burg to a different cell use \"Relocate\" button');\n      }\n\n      if (pp === 'labels') {\n        // also transform curve control circle\n        debug.select('circle').attr('transform', transform);\n      }\n    });\n    d3.event.on('end', function () {\n      // remember scaleBar bottom-right position\n      if (el.attr('id') === 'scaleBar') {\n        var xEnd = d3.event.x,\n            yEnd = d3.event.y;\n        var diff = Math.abs(dx - xEnd) + Math.abs(dy - yEnd);\n\n        if (diff > 5) {\n          var bbox = el.node().getBoundingClientRect();\n          sessionStorage.setItem('scaleBar', [bbox.right, bbox.bottom]);\n        }\n      }\n    });\n  } // draw ruler circles and update label\n\n\n  function rulerEdgeDrag() {\n    var group = d3.select(this.parentNode);\n    var edge = d3.select(this).attr('data-edge');\n    var x = d3.event.x,\n        y = d3.event.y;\n    var x0, y0;\n    d3.select(this).attr('cx', x).attr('cy', y);\n    var line = group.selectAll('line');\n\n    if (edge === 'left') {\n      line.attr('x1', x).attr('y1', y);\n      x0 = +line.attr('x2');\n      y0 = +line.attr('y2');\n    } else {\n      line.attr('x2', x).attr('y2', y);\n      x0 = +line.attr('x1');\n      y0 = +line.attr('y1');\n    }\n\n    var xc = _.round((x + x0) / 2, 2);\n\n    var yc = _.round((y + y0) / 2, 2);\n\n    group.select('.center').attr('cx', xc).attr('cy', yc);\n    var dist = Math.round(Math.hypot(x0 - x, y0 - y));\n    var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n    var atan = x0 > x ? Math.atan2(y0 - y, x0 - x) : Math.atan2(y - y0, x - x0);\n\n    var angle = _.round(atan * 180 / Math.PI, 3);\n\n    var tr = 'rotate(' + angle + ' ' + xc + ' ' + yc + ')';\n    group.select('text').attr('x', xc).attr('y', yc).attr('transform', tr).attr('data-dist', dist).text(label);\n  } // draw ruler center point to split ruler into 2 parts\n\n\n  function rulerCenterDrag() {\n    var xc1, yc1, xc2, yc2;\n    var group = d3.select(this.parentNode); // current ruler group\n\n    var x = d3.event.x,\n        y = d3.event.y; // current coords\n\n    var line = group.selectAll('line'); // current lines\n\n    var x1 = +line.attr('x1'),\n        y1 = +line.attr('y1'),\n        x2 = +line.attr('x2'),\n        y2 = +line.attr('y2'); // initial line edge points\n\n    var rulerNew = ruler.insert('g', ':first-child');\n    rulerNew.attr('transform', group.attr('transform')).call(d3.drag().on('start', elementDrag));\n\n    var factor = _.round(1 / Math.pow(scale, 0.3), 1);\n\n    rulerNew.append('line').attr('class', 'white').attr('stroke-width', factor);\n    var dash = +group.select('.gray').attr('stroke-dasharray');\n    rulerNew.append('line').attr('class', 'gray').attr('stroke-dasharray', dash).attr('stroke-width', factor);\n    rulerNew.append('text').attr('dy', -1).on('click', removeParent).attr('font-size', 10 * factor).attr('stroke-width', factor);\n    d3.event.on('drag', function () {\n      x = d3.event.x, y = d3.event.y;\n      d3.select(this).attr('cx', x).attr('cy', y); // change first part\n\n      line.attr('x1', x1).attr('y1', y1).attr('x2', x).attr('y2', y);\n      var dist = Math.round(Math.hypot(x1 - x, y1 - y));\n      var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n      var atan = x1 > x ? Math.atan2(y1 - y, x1 - x) : Math.atan2(y - y1, x - x1);\n      xc1 = _.round((x + x1) / 2, 2);\n      yc1 = _.round((y + y1) / 2, 2);\n      var tr = 'rotate(' + _.round(atan * 180 / Math.PI, 3) + ' ' + xc1 + ' ' + yc1 + ')';\n      group.select('text').attr('x', xc1).attr('y', yc1).attr('transform', tr).attr('data-dist', dist).text(label); // change second (new) part\n\n      dist = Math.round(Math.hypot(x2 - x, y2 - y));\n      label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n      atan = x2 > x ? Math.atan2(y2 - y, x2 - x) : Math.atan2(y - y2, x - x2);\n      xc2 = _.round((x + x2) / 2, 2);\n      yc2 = _.round((y + y2) / 2, 2);\n      tr = 'rotate(' + _.round(atan * 180 / Math.PI, 3) + ' ' + xc2 + ' ' + yc2 + ')';\n      rulerNew.selectAll('line').attr('x1', x).attr('y1', y).attr('x2', x2).attr('y2', y2);\n      rulerNew.select('text').attr('x', xc2).attr('y', yc2).attr('transform', tr).attr('data-dist', dist).text(label);\n    });\n    d3.event.on('end', function () {\n      // circles for 1st part\n      group.selectAll('circle').remove();\n      group.append('circle').attr('cx', x1).attr('cy', y1).attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('data-edge', 'left').call(d3.drag().on('drag', rulerEdgeDrag));\n      group.append('circle').attr('cx', x).attr('cy', y).attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('data-edge', 'rigth').call(d3.drag().on('drag', rulerEdgeDrag));\n      group.append('circle').attr('cx', xc1).attr('cy', yc1).attr('r', 1.2 * factor).attr('stroke-width', 0.3 * factor).attr('class', 'center').call(d3.drag().on('start', rulerCenterDrag)); // circles for 2nd part\n\n      rulerNew.append('circle').attr('cx', x).attr('cy', y).attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('data-edge', 'left').call(d3.drag().on('drag', rulerEdgeDrag));\n      rulerNew.append('circle').attr('cx', x2).attr('cy', y2).attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('data-edge', 'rigth').call(d3.drag().on('drag', rulerEdgeDrag));\n      rulerNew.append('circle').attr('cx', xc2).attr('cy', yc2).attr('r', 1.2 * factor).attr('stroke-width', 0.3 * factor).attr('class', 'center').call(d3.drag().on('start', rulerCenterDrag));\n    });\n  }\n\n  function opisometerEdgeDrag() {\n    var el = d3.select(this);\n    var x0 = +el.attr('cx'),\n        y0 = +el.attr('cy');\n    var group = d3.select(this.parentNode);\n    var curve = group.select('.white');\n    var curveGray = group.select('.gray');\n    var text = group.select('text');\n    var points = JSON.parse(text.attr('data-points'));\n\n    if (x0 === points[0].scX && y0 === points[0].scY) {\n      points.reverse();\n    }\n\n    d3.event.on('drag', function () {\n      var x = d3.event.x,\n          y = d3.event.y;\n      el.attr('cx', x).attr('cy', y);\n      var l = points[points.length - 1];\n      var diff = Math.hypot(l.scX - x, l.scY - y);\n\n      if (diff > 5) {\n        points.push({\n          scX: x,\n          scY: y\n        });\n      } else {\n        return;\n      }\n\n      lineGen.curve(d3.curveBasis);\n      var d = round(lineGen(points));\n      curve.attr('d', d);\n      curveGray.attr('d', d);\n      var dist = Math.round(curve.node().getTotalLength());\n      var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n      text.attr('x', x).attr('y', y).text(label);\n    });\n    d3.event.on('end', function () {\n      var dist = Math.round(curve.node().getTotalLength());\n      var c = curve.node().getPointAtLength(dist / 2);\n      var p = curve.node().getPointAtLength(dist / 2 - 1);\n      var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n      var atan = p.x > c.x ? Math.atan2(p.y - c.y, p.x - c.x) : Math.atan2(c.y - p.y, c.x - p.x);\n      var angle = Math.round(atan * 180 / Math.PI, 3);\n      var tr = 'rotate(' + angle + ' ' + c.x + ' ' + c.y + ')';\n      text.attr('data-points', _JSON$stringify(points)).attr('data-dist', dist).attr('x', c.x).attr('y', c.y).attr('transform', tr).text(label);\n    });\n  }\n\n  function getContinuousLine(edges, indention, relax) {\n    var line = '';\n    if (edges.length < 3) return '';\n\n    while (edges.length > 2) {\n      var edgesOrdered = []; // to store points in a correct order\n\n      var _start = edges[0].start;\n      var end = edges[0].end;\n      edges.shift();\n\n      var spl = _start.split(' ');\n\n      edgesOrdered.push({\n        scX: +spl[0],\n        scY: +spl[1]\n      });\n      spl = end.split(' ');\n      edgesOrdered.push({\n        scX: +spl[0],\n        scY: +spl[1]\n      });\n      var x0 = +spl[0],\n          y0 = +spl[1];\n\n      for (var i = 0; end !== _start && i < 100000; i++) {\n        var next = null,\n            index = null;\n\n        for (var _e = 0; _e < edges.length; _e++) {\n          var edge = edges[_e];\n\n          if (edge.start == end || edge.end == end) {\n            next = edge;\n            end = next.start == end ? next.end : next.start;\n            index = _e;\n            break;\n          }\n        }\n\n        if (!next) {\n          console.error('Next edge is not found');\n          return '';\n        }\n\n        spl = end.split(' ');\n\n        if (indention || relax) {\n          var dist = Math.hypot(+spl[0] - x0, +spl[1] - y0);\n\n          if (dist >= indention && Math.random() > relax) {\n            edgesOrdered.push({\n              scX: +spl[0],\n              scY: +spl[1]\n            });\n            x0 = +spl[0], y0 = +spl[1];\n          }\n        } else {\n          edgesOrdered.push({\n            scX: +spl[0],\n            scY: +spl[1]\n          });\n        }\n\n        edges.splice(index, 1);\n\n        if (i === 100000 - 1) {\n          console.error('Line not ended, limit reached');\n          break;\n        }\n      }\n\n      line += lineGen(edgesOrdered);\n    }\n\n    return round(line, 1);\n  } // temporary elevate lakes to min neighbors heights to correctly flux the water\n\n\n  function elevateLakes() {\n    console.time('elevateLakes');\n    var lakes = $.grep(cells, function (e, d) {\n      return heights[d] < 20 && !features[e.fn].border;\n    });\n    lakes.sort(function (a, b) {\n      return heights[b.index] - heights[a.index];\n    });\n\n    var _loop12 = function _loop12(i) {\n      var hs = [],\n          id = lakes[i].index;\n      cells[id].height = heights[id]; // use height on object level\n\n      lakes[i].neighbors.forEach(function (n) {\n        var nHeight = cells[n].height || heights[n];\n        if (nHeight >= 20) hs.push(nHeight);\n      });\n      if (hs.length) cells[id].height = d3.min(hs) - 1;\n      if (cells[id].height < 20) cells[id].height = 20;\n      lakes[i].lake = 1;\n    };\n\n    for (var i = 0; i < lakes.length; i++) {\n      _loop12(i);\n    }\n\n    console.timeEnd('elevateLakes');\n  } // Depression filling algorithm (for a correct water flux modeling; phase1)\n\n\n  function resolveDepressionsPrimary() {\n    console.time('resolveDepressionsPrimary');\n    land = $.grep(cells, function (e, d) {\n      if (!e.height) e.height = heights[d]; // use height on object level\n\n      return e.height >= 20;\n    });\n    land.sort(function (a, b) {\n      return b.height - a.height;\n    });\n    var limit = 10;\n\n    for (var l = 0, depression = 1; depression > 0 && l < limit; l++) {\n      depression = 0;\n\n      for (var i = 0; i < land.length; i++) {\n        var id = land[i].index;\n        if (land[i].type === 'border') continue;\n        var hs = land[i].neighbors.map(function (n) {\n          return cells[n].height;\n        });\n        var minHigh = d3.min(hs);\n\n        if (cells[id].height <= minHigh) {\n          depression++;\n          land[i].pit = land[i].pit ? land[i].pit + 1 : 1;\n          cells[id].height = minHigh + 2;\n        }\n      }\n\n      if (l === 0) console.log(' depressions init: ' + depression);\n    }\n\n    console.timeEnd('resolveDepressionsPrimary');\n  } // Depression filling algorithm (for a correct water flux modeling; phase2)\n\n\n  function resolveDepressionsSecondary() {\n    console.time('resolveDepressionsSecondary');\n    land = $.grep(cells, function (e) {\n      return e.height >= 20;\n    });\n    land.sort(function (a, b) {\n      return b.height - a.height;\n    });\n    var limit = 100;\n\n    for (var l = 0, depression = 1; depression > 0 && l < limit; l++) {\n      depression = 0;\n\n      for (var i = 0; i < land.length; i++) {\n        if (land[i].ctype === 99) continue;\n        var nHeights = land[i].neighbors.map(function (n) {\n          return cells[n].height;\n        });\n        var minHigh = d3.min(nHeights);\n\n        if (land[i].height <= minHigh) {\n          depression++;\n          land[i].pit = land[i].pit ? land[i].pit + 1 : 1;\n          land[i].height = Math.trunc(minHigh + 2);\n        }\n      }\n\n      if (l === 0) console.log(' depressions reGraphed: ' + depression);\n      if (l === limit - 1) console.error('Error: resolveDepressions iteration limit');\n    }\n\n    console.timeEnd('resolveDepressionsSecondary');\n  } // restore initial heights if user don't want system to change heightmap\n\n\n  function restoreCustomHeights() {\n    land.forEach(function (l) {\n      if (!l.pit) return;\n      l.height = Math.trunc(l.height - l.pit * 2);\n      if (l.height < 20) l.height = 20;\n    });\n  }\n\n  function flux() {\n    console.time('flux');\n    riversData = [];\n    var riverNext = 0;\n    land.sort(function (a, b) {\n      return b.height - a.height;\n    });\n\n    var _loop13 = function _loop13(i) {\n      var id = land[i].index;\n      var sx = land[i].data[0];\n      var sy = land[i].data[1];\n      var fn = land[i].fn;\n\n      if (land[i].ctype === 99) {\n        if (land[i].river !== undefined) {\n          var x, y;\n\n          var _min = Math.min(sy, graphHeight - sy, sx, graphWidth - sx);\n\n          if (_min === sy) {\n            x = sx;\n            y = 0;\n          }\n\n          if (_min === graphHeight - sy) {\n            x = sx;\n            y = graphHeight;\n          }\n\n          if (_min === sx) {\n            x = 0;\n            y = sy;\n          }\n\n          if (_min === graphWidth - sx) {\n            x = graphWidth;\n            y = sy;\n          }\n\n          riversData.push({\n            river: land[i].river,\n            cell: id,\n            x: x,\n            y: y\n          });\n        }\n\n        return \"continue\";\n      }\n\n      if (features[fn].river !== undefined) {\n        if (land[i].river !== features[fn].river) {\n          land[i].river = undefined;\n          land[i].flux = 0;\n        }\n      }\n\n      var minHeight = 1000,\n          min = void 0;\n      land[i].neighbors.forEach(function (e) {\n        if (cells[e].height < minHeight) {\n          minHeight = cells[e].height;\n          min = e;\n        }\n      }); // Define river number\n\n      if (min !== undefined && land[i].flux > 1) {\n        if (land[i].river === undefined) {\n          // State new River\n          land[i].river = riverNext;\n          riversData.push({\n            river: riverNext,\n            cell: id,\n            x: sx,\n            y: sy\n          });\n          riverNext += 1;\n        } // Assing existing River to the downhill cell\n\n\n        if (cells[min].river == undefined) {\n          cells[min].river = land[i].river;\n        } else {\n          var riverTo = cells[min].river;\n          var iRiver = $.grep(riversData, function (e) {\n            return e.river == land[i].river;\n          });\n          var minRiver = $.grep(riversData, function (e) {\n            return e.river == riverTo;\n          });\n          var iRiverL = iRiver.length;\n          var minRiverL = minRiver.length; // re-assing river nunber if new part is greater\n\n          if (iRiverL >= minRiverL) {\n            cells[min].river = land[i].river;\n            iRiverL += 1;\n            minRiverL -= 1;\n          } // mark confluences\n\n\n          if (cells[min].height >= 20 && iRiverL > 1 && minRiverL > 1) {\n            if (!cells[min].confluence) {\n              cells[min].confluence = minRiverL - 1;\n            } else {\n              cells[min].confluence += minRiverL - 1;\n            }\n          }\n        }\n      }\n\n      if (cells[min].flux) cells[min].flux += land[i].flux;\n\n      if (land[i].river !== undefined) {\n        var px = cells[min].data[0];\n        var py = cells[min].data[1];\n\n        if (cells[min].height < 20) {\n          // pour water to the sea\n          var _x = (px + sx) / 2 + (px - sx) / 10;\n\n          var _y = (py + sy) / 2 + (py - sy) / 10;\n\n          riversData.push({\n            river: land[i].river,\n            cell: id,\n            x: _x,\n            y: _y\n          });\n        } else {\n          if (cells[min].lake === 1) {\n            fn = cells[min].fn;\n            if (features[fn].river === undefined) features[fn].river = land[i].river;\n          } // add next River segment\n\n\n          riversData.push({\n            river: land[i].river,\n            cell: min,\n            x: px,\n            y: py\n          });\n        }\n      }\n    };\n\n    for (var i = 0; i < land.length; i++) {\n      var _ret3 = _loop13(i);\n\n      if (_ret3 === \"continue\") continue;\n    }\n\n    console.timeEnd('flux');\n    drawRiverLines(riverNext);\n  }\n\n  function drawRiverLines(riverNext) {\n    console.time('drawRiverLines');\n\n    var _loop14 = function _loop14(i) {\n      var dataRiver = $.grep(riversData, function (e) {\n        return e.river === i;\n      });\n\n      if (dataRiver.length > 1) {\n        var riverAmended = amendRiver(dataRiver, 1);\n\n        var width = _.round(0.8 + Math.random() * 0.4, 1);\n\n        var increment = _.round(0.8 + Math.random() * 0.4, 1);\n\n        var d = drawRiver(riverAmended, width, increment);\n        rivers.append('path').attr('d', d).attr('id', 'river' + i).attr('data-width', width).attr('data-increment', increment);\n      }\n    };\n\n    for (var i = 0; i < riverNext; i++) {\n      _loop14(i);\n    }\n\n    rivers.selectAll('path').on('click', editRiver);\n    console.timeEnd('drawRiverLines');\n  } // add more river points on 1/3 and 2/3 of length\n\n\n  function amendRiver(dataRiver, rndFactor) {\n    var riverAmended = [];\n    var side = 1;\n\n    for (var r = 0; r < dataRiver.length; r++) {\n      var dX = dataRiver[r].x;\n      var dY = dataRiver[r].y;\n      var cell = dataRiver[r].cell;\n      var c = cells[cell].confluence || 0;\n      riverAmended.push([dX, dY, c]);\n\n      if (r + 1 < dataRiver.length) {\n        var eX = dataRiver[r + 1].x;\n        var eY = dataRiver[r + 1].y;\n        var angle = Math.atan2(eY - dY, eX - dX);\n        var serpentine = 1 / (r + 1);\n        var meandr = serpentine + 0.3 + Math.random() * 0.3 * rndFactor;\n\n        if (Math.random() > 0.5) {\n          side *= -1;\n        }\n\n        var dist = Math.hypot(eX - dX, eY - dY); // if dist is big or river is small add 2 extra points\n\n        if (dist > 8 || dist > 4 && dataRiver.length < 6) {\n          var stX = (dX * 2 + eX) / 3;\n          var stY = (dY * 2 + eY) / 3;\n          var enX = (dX + eX * 2) / 3;\n          var enY = (dY + eY * 2) / 3;\n          stX += -Math.sin(angle) * meandr * side;\n          stY += Math.cos(angle) * meandr * side;\n\n          if (Math.random() > 0.8) {\n            side *= -1;\n          }\n\n          enX += Math.sin(angle) * meandr * side;\n          enY += -Math.cos(angle) * meandr * side;\n          riverAmended.push([stX, stY], [enX, enY]); // if dist is medium or river is small add 1 extra point\n        } else if (dist > 4 || dataRiver.length < 6) {\n          var scX = (dX + eX) / 2;\n          var scY = (dY + eY) / 2;\n          scX += -Math.sin(angle) * meandr * side;\n          scY += Math.cos(angle) * meandr * side;\n          riverAmended.push([scX, scY]);\n        }\n      }\n    }\n\n    return riverAmended;\n  } // draw river polygon using arrpoximation\n\n\n  function drawRiver(points, width, increment) {\n    lineGen.curve(d3.curveCatmullRom.alpha(0.1));\n    var extraOffset = 0.03; // start offset to make river source visible\n\n    width = width || 1; // river width modifier\n\n    increment = increment || 1; // river bed widening modifier\n\n    var riverLength = 0;\n    points.map(function (p, i) {\n      if (i === 0) {\n        return 0;\n      }\n\n      riverLength += Math.hypot(p[0] - points[i - 1][0], p[1] - points[i - 1][1]);\n    });\n    var widening = Math.round((1000 + riverLength * 30) * increment);\n    var riverPointsLeft = [],\n        riverPointsRight = [];\n    var last = points.length - 1;\n    var factor = riverLength / points.length; // first point\n\n    var x = points[0][0],\n        y = points[0][1],\n        c;\n    var angle = Math.atan2(y - points[1][1], x - points[1][0]);\n    var xLeft = x + -Math.sin(angle) * extraOffset,\n        yLeft = y + Math.cos(angle) * extraOffset;\n    riverPointsLeft.push({\n      scX: xLeft,\n      scY: yLeft\n    });\n    var xRight = x + Math.sin(angle) * extraOffset,\n        yRight = y + -Math.cos(angle) * extraOffset;\n    riverPointsRight.unshift({\n      scX: xRight,\n      scY: yRight\n    }); // middle points\n\n    for (var p = 1; p < last; p++) {\n      x = points[p][0], y = points[p][1], c = points[p][2];\n\n      if (c) {\n        extraOffset += Math.atan(c * 10 / widening);\n      } // confluence\n\n\n      var xPrev = points[p - 1][0],\n          yPrev = points[p - 1][1];\n      var xNext = points[p + 1][0],\n          yNext = points[p + 1][1];\n      angle = Math.atan2(yPrev - yNext, xPrev - xNext);\n      var offset = Math.atan(Math.pow(p * factor, 2) / widening) / 2 * width + extraOffset;\n      xLeft = x + -Math.sin(angle) * offset, yLeft = y + Math.cos(angle) * offset;\n      riverPointsLeft.push({\n        scX: xLeft,\n        scY: yLeft\n      });\n      xRight = x + Math.sin(angle) * offset, yRight = y + -Math.cos(angle) * offset;\n      riverPointsRight.unshift({\n        scX: xRight,\n        scY: yRight\n      });\n    } // end point\n\n\n    x = points[last][0], y = points[last][1], c = points[last][2];\n\n    if (c) {\n      extraOffset += Math.atan(c * 10 / widening);\n    } // confluence\n\n\n    angle = Math.atan2(points[last - 1][1] - y, points[last - 1][0] - x);\n    xLeft = x + -Math.sin(angle) * offset, yLeft = y + Math.cos(angle) * offset;\n    riverPointsLeft.push({\n      scX: xLeft,\n      scY: yLeft\n    });\n    xRight = x + Math.sin(angle) * offset, yRight = y + -Math.cos(angle) * offset;\n    riverPointsRight.unshift({\n      scX: xRight,\n      scY: yRight\n    }); // generate path and return\n\n    var right = lineGen(riverPointsRight);\n    var left = lineGen(riverPointsLeft);\n    left = left.substring(left.indexOf('C'));\n    return round(right + left, 2);\n  } // draw river polygon with best quality\n\n\n  function drawRiverSlow(points, width, increment) {\n    lineGen.curve(d3.curveCatmullRom.alpha(0.1));\n    width = width || 1;\n    var extraOffset = 0.02 * width;\n    increment = increment || 1;\n    var riverPoints = points.map(function (p) {\n      return {\n        scX: p[0],\n        scY: p[1]\n      };\n    });\n    var river = defs.append('path').attr('d', lineGen(riverPoints));\n    var riverLength = river.node().getTotalLength();\n    var widening = Math.round((1000 + riverLength * 30) * increment);\n    var riverPointsLeft = [],\n        riverPointsRight = [];\n\n    for (var l = 0; l < riverLength; l++) {\n      var point = river.node().getPointAtLength(l);\n      var from = river.node().getPointAtLength(l - 0.1);\n      var to = river.node().getPointAtLength(l + 0.1);\n      var angle = Math.atan2(from.y - to.y, from.x - to.x);\n      var offset = Math.atan(Math.pow(l, 2) / widening) / 2 * width + extraOffset;\n      var xLeft = point.x + -Math.sin(angle) * offset;\n      var yLeft = point.y + Math.cos(angle) * offset;\n      riverPointsLeft.push({\n        scX: xLeft,\n        scY: yLeft\n      });\n      var xRight = point.x + Math.sin(angle) * offset;\n      var yRight = point.y + -Math.cos(angle) * offset;\n      riverPointsRight.unshift({\n        scX: xRight,\n        scY: yRight\n      });\n    }\n\n    var point = river.node().getPointAtLength(riverLength);\n    var from = river.node().getPointAtLength(riverLength - 0.1);\n    var angle = Math.atan2(from.y - point.y, from.x - point.x);\n    var offset = Math.atan(Math.pow(riverLength, 2) / widening) / 2 * width + extraOffset;\n    var xLeft = point.x + -Math.sin(angle) * offset;\n    var yLeft = point.y + Math.cos(angle) * offset;\n    riverPointsLeft.push({\n      scX: xLeft,\n      scY: yLeft\n    });\n    var xRight = point.x + Math.sin(angle) * offset;\n    var yRight = point.y + -Math.cos(angle) * offset;\n    riverPointsRight.unshift({\n      scX: xRight,\n      scY: yRight\n    });\n    river.remove(); // generate path and return\n\n    var right = lineGen(riverPointsRight);\n    var left = lineGen(riverPointsLeft);\n    left = left.substring(left.indexOf('C'));\n    return round(right + left, 2);\n  } // add lakes on depressed points on river course\n\n\n  function addLakes() {\n    console.time('addLakes');\n    var smallLakes = 0;\n\n    for (var i = 0; i < land.length; i++) {\n      // elavate all big lakes\n      if (land[i].lake === 1) {\n        land[i].height = 19;\n        land[i].ctype = -1;\n      } // define eligible small lakes\n\n\n      if (land[i].lake === 2 && smallLakes < 100) {\n        if (land[i].river !== undefined) {\n          land[i].height = 19;\n          land[i].ctype = -1;\n          land[i].fn = -1;\n          smallLakes++;\n        } else {\n          land[i].lake = undefined;\n          land[i].neighbors.forEach(function (n) {\n            if (cells[n].lake !== 1 && cells[n].river !== undefined) {\n              cells[n].lake = 2;\n              cells[n].height = 19;\n              cells[n].ctype = -1;\n              cells[n].fn = -1;\n              smallLakes++;\n            } else if (cells[n].lake === 2) {\n              cells[n].lake = undefined;\n            }\n          });\n        }\n      }\n    }\n\n    console.log('small lakes: ' + smallLakes); // mark small lakes\n\n    var unmarked = $.grep(land, function (e) {\n      return e.fn === -1;\n    });\n\n    var _loop15 = function _loop15() {\n      var fn = -1,\n          queue = [unmarked[0].index],\n          lakeCells = [];\n      unmarked[0].session = 'addLakes';\n\n      while (queue.length) {\n        var q = queue.pop();\n        lakeCells.push(q);\n        if (cells[q].fn !== -1) fn = cells[q].fn;\n        cells[q].neighbors.forEach(function (e) {\n          if (cells[e].lake && cells[e].session !== 'addLakes') {\n            cells[e].session = 'addLakes';\n            queue.push(e);\n          }\n        });\n      }\n\n      if (fn === -1) {\n        fn = features.length;\n        features.push({\n          i: fn,\n          land: false,\n          border: false\n        });\n      }\n\n      lakeCells.forEach(function (c) {\n        cells[c].fn = fn;\n      });\n      unmarked = $.grep(land, function (e) {\n        return e.fn === -1;\n      });\n    };\n\n    while (unmarked.length) {\n      _loop15();\n    }\n\n    land = $.grep(cells, function (e) {\n      return e.height >= 20;\n    });\n    console.timeEnd('addLakes');\n  }\n\n  function editLabel() {\n    if (customization) return;\n    unselect();\n    closeDialogs('#labelEditor, .stable');\n    elSelected = d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true); // update group parameters\n\n    var group = d3.select(this.parentNode);\n    updateGroupOptions();\n    labelGroupSelect.value = group.attr('id');\n    labelFontSelect.value = FONTS.indexOf(group.attr('data-font'));\n    labelSize.value = group.attr('data-size');\n    labelColor.value = toHEX(group.attr('fill'));\n    labelOpacity.value = group.attr('opacity');\n    labelText.value = elSelected.text();\n    var tr = parseTransform(elSelected.attr('transform'));\n    labelAngle.value = tr[2];\n    labelAngleValue.innerHTML = Math.abs(+tr[2]) + '°';\n    $('#labelEditor').dialog({\n      title: 'Edit Label: ' + labelText.value,\n      minHeight: 30,\n      width: 'auto',\n      maxWidth: 275,\n      resizable: false,\n      position: {\n        my: 'center top+10',\n        at: 'bottom',\n        of: this\n      },\n      close: unselect\n    });\n    if (modules.editLabel) return;\n    modules.editLabel = true;\n    loadDefaultFonts();\n\n    function updateGroupOptions() {\n      labelGroupSelect.innerHTML = '';\n      labels.selectAll('g:not(#burgLabels)').each(function (d) {\n        if (this.parentNode.id === 'burgLabels') return;\n        var id = d3.select(this).attr('id');\n        var opt = document.createElement('option');\n        opt.value = opt.innerHTML = id;\n        labelGroupSelect.add(opt);\n      });\n    }\n\n    $('#labelGroupButton').click(function () {\n      $('#labelEditor > button').not(this).toggle();\n      $('#labelGroupButtons').toggle();\n    }); // on group change\n\n    document.getElementById('labelGroupSelect').addEventListener('change', function () {\n      document.getElementById(this.value).appendChild(elSelected.remove().node());\n    }); // toggle inputs to declare a new group\n\n    document.getElementById('labelGroupNew').addEventListener('click', function () {\n      if ($('#labelGroupInput').css('display') === 'none') {\n        $('#labelGroupInput').css('display', 'inline-block');\n        $('#labelGroupSelect').css('display', 'none');\n        labelGroupInput.focus();\n      } else {\n        $('#labelGroupSelect').css('display', 'inline-block');\n        $('#labelGroupInput').css('display', 'none');\n      }\n    }); // toggle inputs to select a group\n\n    document.getElementById('labelExternalFont').addEventListener('click', function () {\n      if ($('#labelFontInput').css('display') === 'none') {\n        $('#labelFontInput').css('display', 'inline-block');\n        $('#labelFontSelect').css('display', 'none');\n        labelFontInput.focus();\n      } else {\n        $('#labelFontSelect').css('display', 'inline-block');\n        $('#labelFontInput').css('display', 'none');\n      }\n    }); // on new group creation\n\n    document.getElementById('labelGroupInput').addEventListener('change', function () {\n      if (!this.value) {\n        tip('Please provide a valid group name');\n        return;\n      }\n\n      var group = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '');\n      if (_Number$isFinite(+group.charAt(0))) group = 'g' + group; // if el with this id exists, add size to id\n\n      while (labels.selectAll('#' + group).size()) {\n        group += '_new';\n      }\n\n      createNewLabelGroup(group);\n    });\n\n    function createNewLabelGroup(g) {\n      var group = elSelected.node().parentNode.cloneNode(false);\n      var groupNew = labels.append(function (f) {\n        return group;\n      }).attr('id', g);\n      groupNew.append(function (f) {\n        return elSelected.remove().node();\n      });\n      updateGroupOptions();\n      $('#labelGroupSelect, #labelGroupInput').toggle();\n      labelGroupInput.value = '';\n      labelGroupSelect.value = g;\n\n      _updateLabelGroups();\n    } // remove label group on click\n\n\n    document.getElementById('labelGroupRemove').addEventListener('click', function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var id = group.attr('id');\n      var count = group.selectAll('text').size(); // remove group with < 2 label without ask\n\n      if (count < 2) {\n        removeAllLabelsInGroup(id);\n        $('#labelEditor').dialog('close');\n        return;\n      }\n\n      alertMessage.innerHTML = 'Are you sure you want to remove all labels (' + count + ') of that group?';\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove label group',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            removeAllLabelsInGroup(id);\n            $('#labelEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n    $('#labelTextButton').click(function () {\n      $('#labelEditor > button').not(this).toggle();\n      $('#labelTextButtons').toggle();\n    }); // on label text change\n\n    document.getElementById('labelText').addEventListener('input', function () {\n      if (!this.value) {\n        tip('Name should not be blank, set opacity to 0 to hide label or click remove button to delete');\n        return;\n      } // change Label text\n\n\n      if (elSelected.select('textPath').size()) elSelected.select('textPath').text(this.value);else elSelected.text(this.value);\n      $('div[aria-describedby=\\'labelEditor\\'] .ui-dialog-title').text('Edit Label: ' + this.value); // check if label is a country name\n\n      var id = elSelected.attr('id') || '';\n\n      if (id.includes('regionLabel')) {\n        var state = +elSelected.attr('id').slice(11);\n        states[state].name = this.value;\n      }\n    }); // generate a random country name\n\n    document.getElementById('labelTextRandom').addEventListener('click', function () {\n      var name = elSelected.text();\n      var id = elSelected.attr('id') || '';\n\n      if (id.includes('regionLabel')) {\n        // label is a country name\n        var state = +elSelected.attr('id').slice(11);\n        name = generateStateName(state.i);\n        states[state].name = name;\n      } else {\n        // label is not a country name, use random culture\n        var c = elSelected.node().getBBox();\n        var closest = cultureTree.find(c.x + c.width / 2, c.y + c.height / 2);\n        var culture = Math.floor(Math.random() * cultures.length);\n        name = generateName(culture);\n      }\n\n      labelText.value = name;\n      $('div[aria-describedby=\\'labelEditor\\'] .ui-dialog-title').text('Edit Label: ' + name); // change Label text\n\n      if (elSelected.select('textPath').size()) elSelected.select('textPath').text(name);else elSelected.text(name);\n    });\n    $('#labelFontButton').click(function () {\n      $('#labelEditor > button').not(this).toggle();\n      $('#labelFontButtons').toggle();\n    }); // on label font change\n\n    document.getElementById('labelFontSelect').addEventListener('change', function () {\n      var group = elSelected.node().parentNode;\n      var font = FONTS[this.value].split(':')[0].replace(/\\+/g, ' ');\n      group.setAttribute('font-family', font);\n      group.setAttribute('data-font', FONTS[this.value]);\n    }); // on adding custom font\n\n    document.getElementById('labelFontInput').addEventListener('change', function () {\n      fetchFonts(this.value).then(function (fetched) {\n        if (!fetched) return;\n        labelExternalFont.click();\n        labelFontInput.value = '';\n        if (fetched === 1) $('#labelFontSelect').val(FONTS.length - 1).change();\n      });\n    }); // on label size input\n\n    document.getElementById('labelSize').addEventListener('input', function () {\n      var group = elSelected.node().parentNode;\n      var size = +this.value;\n      group.setAttribute('data-size', size);\n      group.setAttribute('font-size', _.round((size + size / scale) / 2, 2));\n    });\n    $('#labelStyleButton').click(function () {\n      $('#labelEditor > button').not(this).toggle();\n      $('#labelStyleButtons').toggle();\n    }); // on label fill color input\n\n    document.getElementById('labelColor').addEventListener('input', function () {\n      var group = elSelected.node().parentNode;\n      group.setAttribute('fill', this.value);\n    }); // on label opacity input\n\n    document.getElementById('labelOpacity').addEventListener('input', function () {\n      var group = elSelected.node().parentNode;\n      group.setAttribute('opacity', this.value);\n    });\n    $('#labelAngleButton').click(function () {\n      $('#labelEditor > button').not(this).toggle();\n      $('#labelAngleButtons').toggle();\n    }); // on label angle input\n\n    document.getElementById('labelAngle').addEventListener('input', function () {\n      var tr = parseTransform(elSelected.attr('transform'));\n      labelAngleValue.innerHTML = Math.abs(+this.value) + '°';\n      var c = elSelected.node().getBBox();\n      var angle = +this.value;\n      var transform = \"translate(\".concat(tr[0], \",\").concat(tr[1], \") rotate(\").concat(angle, \" \").concat(c.x + c.width / 2, \" \").concat(c.y + c.height / 2, \")\");\n      elSelected.attr('transform', transform);\n    }); // display control points to curve label (place on path)\n\n    document.getElementById('labelCurve').addEventListener('click', function () {\n      var c = elSelected.node().getBBox();\n      var cx = c.x + c.width / 2,\n          cy = c.y + c.height / 2;\n\n      if (!elSelected.select('textPath').size()) {\n        var id = elSelected.attr('id');\n        var pathId = '#textPath_' + id;\n        var path = \"M\".concat(cx - c.width, \",\").concat(cy, \" q\").concat(c.width, \",0 \").concat(c.width * 2, \",0\");\n        var text = elSelected.text(),\n            x = elSelected.attr('x'),\n            y = elSelected.attr('y');\n        elSelected.text(null).attr('data-x', x).attr('data-y', y).attr('x', null).attr('y', null);\n        defs.append('path').attr('id', 'textPath_' + id).attr('d', path);\n        elSelected.append('textPath').attr('href', pathId).attr('startOffset', '50%').text(text);\n      }\n\n      if (!debug.select('circle').size()) {\n        debug.append('circle').attr('id', 'textPathControl').attr('r', 1.6).attr('cx', cx).attr('cy', cy).attr('transform', elSelected.attr('transform') || null).call(d3.drag().on('start', textPathControlDrag));\n      }\n    }); // drag textPath controle point to curve the label\n\n    function textPathControlDrag() {\n      var textPath = defs.select('#textPath_' + elSelected.attr('id'));\n      var path = textPath.attr('d').split(' ');\n      var M = path[0].split(',');\n      var q = path[1].split(','); // +q[1] to get qy - the only changeble value\n\n      var y = d3.event.y;\n      d3.event.on('drag', function () {\n        var dy = d3.event.y - y;\n        var total = +q[1] + dy * 8;\n        d3.select(this).attr('cy', d3.event.y);\n        textPath.attr('d', \"\".concat(M[0], \",\").concat(+M[1] - dy, \" \").concat(q[0], \",\").concat(total, \" \").concat(path[2]));\n      });\n    } // cancel label curvature\n\n\n    document.getElementById('labelCurveCancel').addEventListener('click', function () {\n      if (!elSelected.select('textPath').size()) return;\n      var text = elSelected.text(),\n          x = elSelected.attr('data-x'),\n          y = elSelected.attr('data-y');\n      elSelected.text();\n      elSelected.attr('x', x).attr('y', y).attr('data-x', null).attr('data-y', null).text(text);\n      defs.select('#textPath_' + elSelected.attr('id')).remove();\n      debug.select('circle').remove();\n    }); // open legendsEditor\n\n    document.getElementById('labelLegend').addEventListener('click', function () {\n      var id = elSelected.attr('id');\n      var name = elSelected.text();\n      editLegends(id, name);\n    }); // copy label on click\n\n    document.getElementById('labelCopy').addEventListener('click', function () {\n      var group = d3.select(elSelected.node().parentNode);\n      copy = group.append(function (f) {\n        return elSelected.node().cloneNode(true);\n      });\n\n      var id = 'label' + _Date$now().toString().slice(7);\n\n      copy.attr('id', id).attr('class', null).on('click', editLabel);\n      var shift = +group.attr('font-size') + 1;\n\n      if (copy.select('textPath').size()) {\n        var path = defs.select('#textPath_' + elSelected.attr('id')).attr('d');\n        var textPath = defs.append('path').attr('id', 'textPath_' + id);\n        copy.select('textPath').attr('href', '#textPath_' + id);\n        var pathArray = path.split(' ');\n        var x = +pathArray[0].split(',')[0].slice(1);\n        var y = +pathArray[0].split(',')[1];\n        textPath.attr('d', \"M\".concat(x - shift, \",\").concat(y - shift, \" \").concat(pathArray[1], \" \").concat(pathArray[2]));\n        shift;\n      } else {\n        var _x2 = +elSelected.attr('x') - shift;\n\n        var _y2 = +elSelected.attr('y') - shift;\n\n        while (group.selectAll('text[x=\\'' + _x2 + '\\']').size()) {\n          _x2 -= shift;\n          _y2 -= shift;\n        }\n\n        copy.attr('x', _x2).attr('y', _y2);\n      }\n    }); // remove label on click\n\n    document.getElementById('labelRemoveSingle').addEventListener('click', function () {\n      alertMessage.innerHTML = 'Are you sure you want to remove the label?';\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove label',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            elSelected.remove();\n            defs.select('#textPath_' + elSelected.attr('id')).remove();\n            $('#labelEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editRiver() {\n    if (customization) return;\n\n    if (elSelected) {\n      var self = d3.select(this).attr('id') === elSelected.attr('id');\n      var point = d3.mouse(this);\n\n      if (elSelected.attr('data-river') === 'new') {\n        addRiverPoint([point[0], point[1]]);\n        completeNewRiver();\n        return;\n      } else if (self) {\n        riverAddControlPoint(point);\n        return;\n      }\n    }\n\n    unselect();\n    closeDialogs('#riverEditor, .stable');\n    elSelected = d3.select(this);\n    elSelected.call(d3.drag().on('start', riverDrag));\n    var tr = parseTransform(elSelected.attr('transform'));\n    riverAngle.value = tr[2];\n    riverAngleValue.innerHTML = Math.abs(+tr[2]) + '°';\n    riverScale.value = tr[5];\n    riverWidthInput.value = +elSelected.attr('data-width');\n    riverIncrement.value = +elSelected.attr('data-increment');\n    $('#riverEditor').dialog({\n      title: 'Edit River',\n      minHeight: 30,\n      width: 'auto',\n      resizable: false,\n      position: {\n        my: 'center top+20',\n        at: 'top',\n        of: d3.event\n      },\n      close: function close() {\n        if ($('#riverNew').hasClass('pressed')) completeNewRiver();\n        unselect();\n      }\n    });\n    if (!debug.select('.controlPoints').size()) debug.append('g').attr('class', 'controlPoints');\n    riverDrawPoints();\n\n    if (modules.editRiver) {\n      return;\n    }\n\n    modules.editRiver = true;\n\n    function riverAddControlPoint(point) {\n      var dists = [];\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var x = +d3.select(this).attr('cx');\n        var y = +d3.select(this).attr('cy');\n        dists.push(Math.hypot(point[0] - x, point[1] - y));\n      });\n      var index = dists.length;\n\n      if (dists.length > 1) {\n        var sorted = dists.slice(0).sort(function (a, b) {\n          return a - b;\n        });\n        var closest = dists.indexOf(sorted[0]);\n        var next = dists.indexOf(sorted[1]);\n\n        if (closest <= next) {\n          index = closest + 1;\n        } else {\n          index = next + 1;\n        }\n      }\n\n      var before = ':nth-child(' + (index + 1) + ')';\n      debug.select('.controlPoints').insert('circle', before).attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35).call(d3.drag().on('drag', riverPointDrag)).on('click', function (d) {\n        $(this).remove();\n        redrawRiver();\n      });\n      redrawRiver();\n    }\n\n    function riverDrawPoints() {\n      var node = elSelected.node(); // river is a polygon, so divide length by 2 to get course length\n\n      var l = node.getTotalLength() / 2;\n      var parts = l / 5 >> 0; // number of points\n\n      var inc = l / parts; // increment\n\n      if (inc === Infinity) {\n        inc = l;\n      } // 2 control points for short rivers\n      // draw control points\n\n\n      for (var i = l, c = l; i > 0; i -= inc, c += inc) {\n        var p1 = node.getPointAtLength(i);\n        var p2 = node.getPointAtLength(c);\n        var _p = [(p1.x + p2.x) / 2, (p1.y + p2.y) / 2];\n        addRiverPoint(_p);\n      } // last point should be accurate\n\n\n      var lp1 = node.getPointAtLength(0);\n      var lp2 = node.getPointAtLength(l * 2);\n      var p = [(lp1.x + lp2.x) / 2, (lp1.y + lp2.y) / 2];\n      addRiverPoint(p);\n    }\n\n    function addRiverPoint(point) {\n      debug.select('.controlPoints').append('circle').attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35).call(d3.drag().on('drag', riverPointDrag)).on('click', function (d) {\n        $(this).remove();\n        redrawRiver();\n      });\n    }\n\n    function riverPointDrag() {\n      d3.select(this).attr('cx', d3.event.x).attr('cy', d3.event.y);\n      redrawRiver();\n    }\n\n    function riverDrag() {\n      var x = d3.event.x,\n          y = d3.event.y;\n      var tr = parseTransform(elSelected.attr('transform'));\n      d3.event.on('drag', function () {\n        var xc = d3.event.x,\n            yc = d3.event.y;\n        var transform = \"translate(\".concat(+tr[0] + xc - x, \",\").concat(+tr[1] + yc - y, \") rotate(\").concat(tr[2], \" \").concat(tr[3], \" \").concat(tr[4], \") scale(\").concat(tr[5], \")\");\n        elSelected.attr('transform', transform);\n        debug.select('.controlPoints').attr('transform', transform);\n      });\n    }\n\n    function redrawRiver() {\n      var points = [];\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var el = d3.select(this);\n        points.push([+el.attr('cx'), +el.attr('cy')]);\n      });\n      var width = +riverWidthInput.value;\n      var increment = +riverIncrement.value;\n      var d = drawRiverSlow(points, width, increment);\n      elSelected.attr('d', d);\n    }\n\n    $('#riverWidthInput, #riverIncrement').change(function () {\n      var width = +riverWidthInput.value;\n      var increment = +riverIncrement.value;\n      elSelected.attr('data-width', width).attr('data-increment', increment);\n      redrawRiver();\n    });\n    $('#riverRegenerate').click(function () {\n      var points = [],\n          amended = [],\n          x,\n          y,\n          p1,\n          p2;\n      var node = elSelected.node();\n      var l = node.getTotalLength() / 2;\n      var parts = l / 8 >> 0; // number of points\n\n      var inc = l / parts; // increment\n\n      if (inc === Infinity) {\n        inc = l;\n      } // 2 control points for short rivers\n\n\n      for (var i = l, _e2 = l; i > 0; i -= inc, _e2 += inc) {\n        p1 = node.getPointAtLength(i);\n        p2 = node.getPointAtLength(_e2);\n        x = (p1.x + p2.x) / 2, y = (p1.y + p2.y) / 2;\n        points.push([x, y]);\n      } // last point should be accurate\n\n\n      p1 = node.getPointAtLength(0);\n      p2 = node.getPointAtLength(l * 2);\n      x = (p1.x + p2.x) / 2, y = (p1.y + p2.y) / 2;\n      points.push([x, y]); // amend points\n\n      var rndFactor = 0.3 + Math.random() * 1.4; // random factor in range 0.2-1.8\n\n      for (var _i = 0; _i < points.length; _i++) {\n        x = points[_i][0], y = points[_i][1];\n        amended.push([x, y]); // add additional semi-random point\n\n        if (_i + 1 < points.length) {\n          var x2 = points[_i + 1][0],\n              y2 = points[_i + 1][1];\n          var side = Math.random() > 0.5 ? 1 : -1;\n          var angle = Math.atan2(y2 - y, x2 - x);\n          var serpentine = 2 / (_i + 1);\n          var meandr = serpentine + 0.3 + Math.random() * rndFactor;\n          x = (x + x2) / 2, y = (y + y2) / 2;\n          x += -Math.sin(angle) * meandr * side;\n          y += Math.cos(angle) * meandr * side;\n          amended.push([x, y]);\n        }\n      }\n\n      var width = +riverWidthInput.value * 0.6 + Math.random();\n      var increment = +riverIncrement.value * 0.9 + Math.random() * 0.2;\n      riverWidthInput.value = width;\n      riverIncrement.value = increment;\n      elSelected.attr('data-width', width).attr('data-increment', increment);\n      var d = drawRiverSlow(amended, width, increment);\n      elSelected.attr('d', d).attr('data-width', width).attr('data-increment', increment);\n      debug.select('.controlPoints').selectAll('*').remove();\n      amended.map(function (p) {\n        addRiverPoint(p);\n      });\n    });\n    $('#riverAngle').on('input', function () {\n      var tr = parseTransform(elSelected.attr('transform'));\n      riverAngleValue.innerHTML = Math.abs(+this.value) + '°';\n      var c = elSelected.node().getBBox();\n      var angle = +this.value,\n          scale = +tr[5];\n      var transform = \"translate(\".concat(tr[0], \",\").concat(tr[1], \") rotate(\").concat(angle, \" \").concat((c.x + c.width / 2) * scale, \" \").concat((c.y + c.height / 2) * scale, \") scale(\").concat(scale, \")\");\n      elSelected.attr('transform', transform);\n      debug.select('.controlPoints').attr('transform', transform);\n    });\n    $('#riverReset').click(function () {\n      elSelected.attr('transform', '');\n      debug.select('.controlPoints').attr('transform', '');\n      riverAngle.value = 0;\n      riverAngleValue.innerHTML = '0°';\n      riverScale.value = 1;\n    });\n    $('#riverScale').change(function () {\n      var tr = parseTransform(elSelected.attr('transform'));\n      var scaleOld = +tr[5],\n          scale = +this.value;\n      var c = elSelected.node().getBBox();\n      var cx = c.x + c.width / 2,\n          cy = c.y + c.height / 2;\n      var trX = +tr[0] + cx * (scaleOld - scale);\n      var trY = +tr[1] + cy * (scaleOld - scale);\n      var scX = +tr[3] * scale / scaleOld;\n      var scY = +tr[4] * scale / scaleOld;\n      var transform = \"translate(\".concat(trX, \",\").concat(trY, \") rotate(\").concat(tr[2], \" \").concat(scX, \" \").concat(scY, \") scale(\").concat(scale, \")\");\n      elSelected.attr('transform', transform);\n      debug.select('.controlPoints').attr('transform', transform);\n    });\n    $('#riverNew').click(function () {\n      if ($(this).hasClass('pressed')) {\n        completeNewRiver();\n      } else {\n        // enter creation mode\n        $('.pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        if (elSelected) elSelected.call(d3.drag().on('drag', null));\n        debug.select('.controlPoints').selectAll('*').remove();\n        viewbox.style('cursor', 'crosshair').on('click', newRiverAddPoint);\n      }\n    });\n\n    function newRiverAddPoint() {\n      var point = d3.mouse(this);\n      addRiverPoint([point[0], point[1]]);\n\n      if (!elSelected || elSelected.attr('data-river') !== 'new') {\n        var id = +$('#rivers > path').last().attr('id').slice(5) + 1;\n        elSelected = rivers.append('path').attr('data-river', 'new').attr('id', 'river' + id).attr('data-width', 2).attr('data-increment', 1).on('click', completeNewRiver);\n      } else {\n        redrawRiver();\n        var cell = diagram.find(point[0], point[1]).index;\n        var f = cells[cell].fn;\n\n        var _ocean = !features[f].land && features[f].border;\n\n        if (_ocean && debug.select('.controlPoints').selectAll('circle').size() > 5) completeNewRiver();\n      }\n    }\n\n    function completeNewRiver() {\n      $('#riverNew').removeClass('pressed');\n      restoreDefaultEvents();\n      if (!elSelected || elSelected.attr('data-river') !== 'new') return;\n      redrawRiver();\n      elSelected.attr('data-river', '');\n      elSelected.call(d3.drag().on('start', riverDrag)).on('click', editRiver);\n      var r = +elSelected.attr('id').slice(5);\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var x = +d3.select(this).attr('cx');\n        var y = +d3.select(this).attr('cy');\n        var cell = diagram.find(x, y, 3);\n        if (!cell) return;\n        if (cells[cell.index].river === undefined) cells[cell.index].river = r;\n      });\n      unselect();\n      debug.append('g').attr('class', 'controlPoints');\n    }\n\n    $('#riverCopy').click(function () {\n      var tr = parseTransform(elSelected.attr('transform'));\n      var d = elSelected.attr('d');\n      var x = 2,\n          y = 2;\n      var transform = \"translate(\".concat(tr[0] - x, \",\").concat(tr[1] - y, \") rotate(\").concat(tr[2], \" \").concat(tr[3], \" \").concat(tr[4], \") scale(\").concat(tr[5], \")\");\n\n      while (rivers.selectAll('[transform=\\'' + transform + '\\'][d=\\'' + d + '\\']').size() > 0) {\n        x += 2;\n        y += 2;\n        transform = \"translate(\".concat(tr[0] - x, \",\").concat(tr[1] - y, \") rotate(\").concat(tr[2], \" \").concat(tr[3], \" \").concat(tr[4], \") scale(\").concat(tr[5], \")\");\n      }\n\n      var river = +$('#rivers > path').last().attr('id').slice(5) + 1;\n      rivers.append('path').attr('d', d).attr('transform', transform).attr('id', 'river' + river).on('click', editRiver).attr('data-width', elSelected.attr('data-width')).attr('data-increment', elSelected.attr('data-increment'));\n      unselect();\n    }); // open legendsEditor\n\n    document.getElementById('riverLegend').addEventListener('click', function () {\n      var id = elSelected.attr('id');\n      editLegends(id, id);\n    });\n    $('#riverRemove').click(function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the river?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove river',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            var river = +elSelected.attr('id').slice(5);\n\n            var avPrec = _.round(precInput.value / Math.sqrt(cells.length), 2);\n\n            land.map(function (l) {\n              if (l.river === river) {\n                l.river = undefined;\n                l.flux = avPrec;\n              }\n            });\n            elSelected.remove();\n            unselect();\n            $('#riverEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editRoute() {\n    if (customization) {\n      return;\n    }\n\n    if (elSelected) {\n      var self = d3.select(this).attr('id') === elSelected.attr('id');\n      var point = d3.mouse(this);\n\n      if (elSelected.attr('data-route') === 'new') {\n        addRoutePoint({\n          x: point[0],\n          y: point[1]\n        });\n        completeNewRoute();\n        return;\n      } else if (self) {\n        routeAddControlPoint(point);\n        return;\n      }\n    }\n\n    unselect();\n    closeDialogs('#routeEditor, .stable');\n\n    if (this && this !== window) {\n      elSelected = d3.select(this);\n      if (!debug.select('.controlPoints').size()) debug.append('g').attr('class', 'controlPoints');\n      routeDrawPoints();\n      routeUpdateGroups();\n      var routeType = d3.select(this.parentNode).attr('id');\n      routeGroup.value = routeType;\n      $('#routeEditor').dialog({\n        title: 'Edit Route',\n        minHeight: 30,\n        width: 'auto',\n        resizable: false,\n        position: {\n          my: 'center top+20',\n          at: 'top',\n          of: d3.event\n        },\n        close: function close() {\n          if ($('#addRoute').hasClass('pressed')) completeNewRoute();\n          if ($('#routeSplit').hasClass('pressed')) $('#routeSplit').removeClass('pressed');\n          unselect();\n        }\n      });\n    } else {\n      elSelected = null;\n    }\n\n    if (modules.editRoute) {\n      return;\n    }\n\n    modules.editRoute = true;\n\n    function routeAddControlPoint(point) {\n      var dists = [];\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var x = +d3.select(this).attr('cx');\n        var y = +d3.select(this).attr('cy');\n        dists.push(Math.hypot(point[0] - x, point[1] - y));\n      });\n      var index = dists.length;\n\n      if (dists.length > 1) {\n        var sorted = dists.slice(0).sort(function (a, b) {\n          return a - b;\n        });\n        var closest = dists.indexOf(sorted[0]);\n        var next = dists.indexOf(sorted[1]);\n\n        if (closest <= next) {\n          index = closest + 1;\n        } else {\n          index = next + 1;\n        }\n      }\n\n      var before = ':nth-child(' + (index + 1) + ')';\n      debug.select('.controlPoints').insert('circle', before).attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35).call(d3.drag().on('drag', routePointDrag)).on('click', function (d) {\n        $(this).remove();\n        routeRedraw();\n      });\n      routeRedraw();\n    }\n\n    function routeDrawPoints() {\n      if (!elSelected.size()) return;\n      var node = elSelected.node();\n      var l = node.getTotalLength();\n      var parts = l / 5 >> 0; // number of points\n\n      var inc = l / parts; // increment\n\n      if (inc === Infinity) inc = l; // 2 control points for short routes\n      // draw control points\n\n      for (var i = 0; i <= l; i += inc) {\n        var p = node.getPointAtLength(i);\n        addRoutePoint(p);\n      } // convert length to distance\n\n\n      routeLength.innerHTML = Math.round(l * distanceScale.value) + ' ' + distanceUnit.value;\n    }\n\n    function addRoutePoint(point) {\n      var controlPoints = debug.select('.controlPoints').size() ? debug.select('.controlPoints') : debug.append('g').attr('class', 'controlPoints');\n      controlPoints.append('circle').attr('cx', point.x).attr('cy', point.y).attr('r', 0.35).call(d3.drag().on('drag', routePointDrag)).on('click', function (d) {\n        if ($('#routeSplit').hasClass('pressed')) {\n          routeSplitInPoint(this);\n        } else {\n          $(this).remove();\n          routeRedraw();\n        }\n      });\n    }\n\n    function routePointDrag() {\n      d3.select(this).attr('cx', d3.event.x).attr('cy', d3.event.y);\n      routeRedraw();\n    }\n\n    function routeRedraw() {\n      var points = [];\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var el = d3.select(this);\n        points.push({\n          scX: +el.attr('cx'),\n          scY: +el.attr('cy')\n        });\n      });\n      lineGen.curve(d3.curveCatmullRom.alpha(0.1));\n      elSelected.attr('d', lineGen(points)); // get route distance\n\n      var l = elSelected.node().getTotalLength();\n      routeLength.innerHTML = Math.round(l * distanceScale.value) + ' ' + distanceUnit.value;\n    }\n\n    function addNewRoute() {\n      var routeType = elSelected && elSelected.node() ? elSelected.node().parentNode.id : 'searoutes';\n      var group = routes.select('#' + routeType);\n      var id = routeType + '' + group.selectAll('*').size();\n      elSelected = group.append('path').attr('data-route', 'new').attr('id', id).on('click', editRoute);\n      routeUpdateGroups();\n      $('#routeEditor').dialog({\n        title: 'Edit Route',\n        minHeight: 30,\n        width: 'auto',\n        resizable: false,\n        close: function close() {\n          if ($('#addRoute').hasClass('pressed')) completeNewRoute();\n          if ($('#routeSplit').hasClass('pressed')) $('#routeSplit').removeClass('pressed');\n          unselect();\n        }\n      });\n    }\n\n    function newRouteAddPoint() {\n      var point = d3.mouse(this);\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2);\n\n      addRoutePoint({\n        x: x,\n        y: y\n      });\n      routeRedraw();\n    }\n\n    function completeNewRoute() {\n      $('#routeNew, #addRoute').removeClass('pressed');\n      restoreDefaultEvents();\n      if (!elSelected.size()) return;\n\n      if (elSelected.attr('data-route') === 'new') {\n        routeRedraw();\n        elSelected.attr('data-route', '');\n        var node = elSelected.node();\n        var l = node.getTotalLength();\n        var pathCells = [];\n\n        for (var i = 0; i <= l; i++) {\n          var p = node.getPointAtLength(i);\n          var cell = diagram.find(p.x, p.y);\n\n          if (!cell) {\n            return;\n          }\n\n          pathCells.push(cell.index);\n        }\n\n        var uniqueCells = _toConsumableArray(new _Set(pathCells));\n\n        uniqueCells.map(function (c) {\n          if (cells[c].path !== undefined) {\n            cells[c].path += 1;\n          } else {\n            cells[c].path = 1;\n          }\n        });\n      }\n\n      tip('', true);\n    }\n\n    function routeUpdateGroups() {\n      routeGroup.innerHTML = '';\n      routes.selectAll('g').each(function () {\n        var opt = document.createElement('option');\n        opt.value = opt.innerHTML = this.id;\n        routeGroup.add(opt);\n      });\n    }\n\n    function routeSplitInPoint(clicked) {\n      var group = d3.select(elSelected.node().parentNode);\n      $('#routeSplit').removeClass('pressed');\n      var points1 = [],\n          points2 = [];\n      var points = points1;\n      debug.select('.controlPoints').selectAll('circle').each(function () {\n        var el = d3.select(this);\n        points.push({\n          scX: +el.attr('cx'),\n          scY: +el.attr('cy')\n        });\n\n        if (this === clicked) {\n          points = points2;\n          points.push({\n            scX: +el.attr('cx'),\n            scY: +el.attr('cy')\n          });\n        }\n\n        el.remove();\n      });\n      lineGen.curve(d3.curveCatmullRom.alpha(0.1));\n      elSelected.attr('d', lineGen(points1));\n      var id = routeGroup.value + '' + group.selectAll('*').size();\n      group.append('path').attr('id', id).attr('d', lineGen(points2)).on('click', editRoute);\n      routeDrawPoints();\n    }\n\n    $('#routeGroup').change(function () {\n      $(elSelected.node()).detach().appendTo($('#' + this.value));\n    }); // open legendsEditor\n\n    document.getElementById('routeLegend').addEventListener('click', function () {\n      var id = elSelected.attr('id');\n      editLegends(id, id);\n    });\n    $('#routeNew').click(function () {\n      if ($(this).hasClass('pressed')) {\n        completeNewRoute();\n      } else {\n        // enter creation mode\n        $('.pressed').removeClass('pressed');\n        $('#routeNew, #addRoute').addClass('pressed');\n        debug.select('.controlPoints').selectAll('*').remove();\n        addNewRoute();\n        viewbox.style('cursor', 'crosshair').on('click', newRouteAddPoint);\n        tip('Click on map to add route point', true);\n      }\n    });\n    $('#routeRemove').click(function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the route?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove route',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            elSelected.remove();\n            $('#routeEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editIcon() {\n    if (customization) return;\n    if (elSelected) if (this.isSameNode(elSelected.node())) return;\n    unselect();\n    closeDialogs('#iconEditor, .stable');\n    elSelected = d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true); // update group parameters\n\n    var group = d3.select(this.parentNode);\n    iconUpdateGroups();\n    iconGroup.value = group.attr('id');\n    iconFillColor.value = group.attr('fill');\n    iconStrokeColor.value = group.attr('stroke');\n    iconSize.value = group.attr('size');\n    iconStrokeWidth.value = group.attr('stroke-width');\n    $('#iconEditor').dialog({\n      title: 'Edit icon: ' + group.attr('id'),\n      minHeight: 30,\n      width: 'auto',\n      resizable: false,\n      position: {\n        my: 'center top+20',\n        at: 'top',\n        of: d3.event\n      },\n      close: unselect\n    });\n\n    if (modules.editIcon) {\n      return;\n    }\n\n    modules.editIcon = true;\n    $('#iconGroups').click(function () {\n      $('#iconEditor > button').not(this).toggle();\n      $('#iconGroupsSelection').toggle();\n    });\n\n    function iconUpdateGroups() {\n      iconGroup.innerHTML = '';\n      var anchor = group.attr('id').includes('anchor');\n      icons.selectAll('g').each(function (d) {\n        var id = d3.select(this).attr('id');\n        if (id === 'burgs') return;\n        if (!anchor && id.includes('anchor')) return;\n        if (anchor && !id.includes('anchor')) return;\n        var opt = document.createElement('option');\n        opt.value = opt.innerHTML = id;\n        iconGroup.add(opt);\n      });\n    }\n\n    $('#iconGroup').change(function () {\n      var newGroup = this.value;\n      var to = $('#icons > #' + newGroup);\n      $(elSelected.node()).detach().appendTo(to);\n    });\n    $('#iconCopy').click(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var copy = elSelected.node().cloneNode();\n      copy.removeAttribute('data-id'); // remove assignment to burg if any\n\n      var tr = parseTransform(copy.getAttribute('transform'));\n      var shift = 10 / Math.sqrt(scale);\n      var transform = 'translate(' + _.round(tr[0] - shift, 1) + ',' + _.round(tr[1] - shift, 1) + ')';\n\n      for (var i = 2; group.selectAll(\"[transform='\" + transform + \"']\").size() > 0; i++) {\n        transform = 'translate(' + _.round(tr[0] - shift * i, 1) + ',' + _.round(tr[1] - shift * i, 1) + ')';\n      }\n\n      copy.setAttribute('transform', transform);\n      group.node().insertBefore(copy, null);\n      copy.addEventListener('click', editIcon);\n    });\n    $('#iconRemoveGroup').click(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var count = group.selectAll('*').size();\n\n      if (count < 2) {\n        group.remove();\n        $('#labelEditor').dialog('close');\n        return;\n      }\n\n      var message = 'Are you sure you want to remove all \\'' + iconGroup.value + '\\' icons (' + count + ')?';\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove icon group',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            group.remove();\n            $('#iconEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n    $('#iconColors').click(function () {\n      $('#iconEditor > button').not(this).toggle();\n      $('#iconColorsSection').toggle();\n    });\n    $('#iconFillColor').change(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      group.attr('fill', this.value);\n    });\n    $('#iconStrokeColor').change(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      group.attr('stroke', this.value);\n    });\n    $('#iconSetSize').click(function () {\n      $('#iconEditor > button').not(this).toggle();\n      $('#iconSizeSection').toggle();\n    });\n    $('#iconSize').change(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var size = +this.value;\n      group.attr('size', size);\n      group.selectAll('*').each(function () {\n        d3.select(this).attr('width', size).attr('height', size);\n      });\n    });\n    $('#iconStrokeWidth').change(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      group.attr('stroke-width', this.value);\n    });\n    $('#iconRemove').click(function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the icon?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove icon',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            elSelected.remove();\n            $('#iconEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editReliefIcon() {\n    if (customization) return;\n    if (elSelected) if (this.isSameNode(elSelected.node())) return;\n    unselect();\n    closeDialogs('#reliefEditor, .stable');\n    elSelected = d3.select(this).raise().call(d3.drag().on('start', elementDrag)).classed('draggable', true);\n    var group = elSelected.node().parentNode.id;\n    reliefGroup.value = group;\n    var bulkRemoveSection = document.getElementById('reliefBulkRemoveSection');\n    if (bulkRemoveSection.style.display != 'none') reliefBulkRemove.click();\n    $('#reliefEditor').dialog({\n      title: 'Edit relief icon',\n      minHeight: 30,\n      width: 'auto',\n      resizable: false,\n      position: {\n        my: 'center top+40',\n        at: 'top',\n        of: d3.event\n      },\n      close: unselect\n    });\n\n    if (modules.editReliefIcon) {\n      return;\n    }\n\n    modules.editReliefIcon = true;\n    $('#reliefGroups').click(function () {\n      $('#reliefEditor > button').not(this).toggle();\n      $('#reliefGroupsSelection').toggle();\n    });\n    $('#reliefGroup').change(function () {\n      var type = this.value;\n      var bbox = elSelected.node().getBBox();\n      var cx = bbox.x;\n      var cy = bbox.y + bbox.height / 2;\n      var cell = diagram.find(cx, cy).index;\n      var height = cell !== undefined ? cells[cell].height : 50;\n      elSelected.remove();\n      elSelected = addReliefIcon(height / 100, type, cx, cy, cell);\n      elSelected.call(d3.drag().on('start', elementDrag));\n    });\n    $('#reliefCopy').click(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var copy = elSelected.node().cloneNode(true);\n      var tr = parseTransform(copy.getAttribute('transform'));\n      var shift = 10 / Math.sqrt(scale);\n      var transform = 'translate(' + _.round(tr[0] - shift, 1) + ',' + _.round(tr[1] - shift, 1) + ')';\n\n      for (var i = 2; group.selectAll(\"[transform='\" + transform + \"']\").size() > 0; i++) {\n        transform = 'translate(' + _.round(tr[0] - shift * i, 1) + ',' + _.round(tr[1] - shift * i, 1) + ')';\n      }\n\n      copy.setAttribute('transform', transform);\n      group.node().insertBefore(copy, null);\n      copy.addEventListener('click', editReliefIcon);\n    });\n    $('#reliefAddfromEditor').click(function () {\n      clickToAdd(); // to load on click event function\n\n      $('#addRelief').click();\n    });\n    $('#reliefRemoveGroup').click(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var count = group.selectAll('*').size();\n\n      if (count < 2) {\n        group.selectAll('*').remove();\n        $('#labelEditor').dialog('close');\n        return;\n      }\n\n      var message = 'Are you sure you want to remove all \\'' + reliefGroup.value + '\\' icons (' + count + ')?';\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove all icons within group',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            group.selectAll('*').remove();\n            $('#reliefEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n    $('#reliefBulkRemove').click(function () {\n      $('#reliefEditor > button').not(this).toggle();\n      var section = document.getElementById('reliefBulkRemoveSection');\n\n      if (section.style.display === 'none') {\n        section.style.display = 'inline-block';\n        tip('Drag to remove relief icons in radius', true);\n        viewbox.style('cursor', 'crosshair').call(d3.drag().on('drag', dragToRemoveReliefIcons));\n        customization = 5;\n      } else {\n        section.style.display = 'none';\n        restoreDefaultEvents();\n        customization = 0;\n      }\n    });\n\n    function dragToRemoveReliefIcons() {\n      var point = d3.mouse(this);\n      var cell = diagram.find(point[0], point[1]).index;\n      var radius = +reliefBulkRemoveRadius.value;\n      var r = Math.round(6 / graphSize * radius, 1);\n      moveCircle(point[0], point[1], r);\n      var selection = defineBrushSelection(cell, radius);\n      if (selection) removeReliefIcons(selection);\n    }\n\n    function removeReliefIcons(selection) {\n      if (selection.length === 0) return;\n      selection.map(function (index) {\n        var selected = terrain.selectAll('g').selectAll('g[data-cell=\\'' + index + '\\']');\n        selected.remove();\n      });\n    }\n\n    $('#reliefRemove').click(function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the icon?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove relief icon',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            elSelected.remove();\n            $('#reliefEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editBurg() {\n    if (customization) return;\n    unselect();\n    closeDialogs('#burgEditor, .stable');\n    elSelected = d3.select(this);\n    var id = +elSelected.attr('data-id');\n    if (id === undefined) return;\n    d3.selectAll('[data-id=\\'' + id + '\\']').call(d3.drag().on('start', elementDrag)).classed('draggable', true); // update Burg details\n\n    var type = elSelected.node().parentNode.id;\n    var labelGroup = burgLabels.select('#' + type);\n    var iconGroup = burgIcons.select('#' + type);\n    burgNameInput.value = manors[id].name;\n    updateBurgsGroupOptions();\n    burgSelectGroup.value = labelGroup.attr('id');\n    burgSelectDefaultFont.value = FONTS.indexOf(labelGroup.attr('data-font'));\n    burgSetLabelSize.value = labelGroup.attr('data-size');\n    burgLabelColorInput.value = toHEX(labelGroup.attr('fill'));\n    burgLabelOpacity.value = labelGroup.attr('opacity') === undefined ? 1 : +labelGroup.attr('opacity');\n    var tr = parseTransform(elSelected.attr('transform'));\n    burgLabelAngle.value = tr[2];\n    burgLabelAngleOutput.innerHTML = Math.abs(+tr[2]) + '°';\n    burgIconSize.value = iconGroup.attr('size');\n    burgIconFillOpacity.value = iconGroup.attr('fill-opacity') === undefined ? 1 : +iconGroup.attr('fill-opacity');\n    burgIconFillColor.value = iconGroup.attr('fill');\n    burgIconStrokeWidth.value = iconGroup.attr('stroke-width');\n    burgIconStrokeOpacity.value = iconGroup.attr('stroke-opacity') === undefined ? 1 : +iconGroup.attr('stroke-opacity');\n    burgIconStrokeColor.value = iconGroup.attr('stroke');\n    var cell = cells[manors[id].cell];\n\n    if (cell.region !== 'neutral' && cell.region !== undefined) {\n      burgToggleCapital.disabled = false;\n      var capital = states[manors[id].region] ? id === states[manors[id].region].capital ? 1 : 0 : 0;\n      d3.select('#burgToggleCapital').classed('pressed', capital);\n    } else {\n      burgToggleCapital.disabled = true;\n      d3.select('#burgToggleCapital').classed('pressed', false);\n    }\n\n    d3.select('#burgTogglePort').classed('pressed', cell.port !== undefined);\n    burgPopulation.value = manors[id].population;\n    burgPopulationFriendly.value = Math.round(manors[id].population * urbanization.value * populationRate.value * 1000);\n    $('#burgEditor').dialog({\n      title: 'Edit Burg: ' + manors[id].name,\n      minHeight: 30,\n      width: 'auto',\n      resizable: false,\n      position: {\n        my: 'center top+40',\n        at: 'top',\n        of: d3.event\n      },\n      close: function close() {\n        d3.selectAll('[data-id=\\'' + id + '\\']').call(d3.drag().on('drag', null)).classed('draggable', false);\n        elSelected = null;\n      }\n    });\n    if (modules.editBurg) return;\n    modules.editBurg = true;\n    loadDefaultFonts();\n\n    function updateBurgsGroupOptions() {\n      burgSelectGroup.innerHTML = '';\n      burgIcons.selectAll('g').each(function (d) {\n        var opt = document.createElement('option');\n        opt.value = opt.innerHTML = d3.select(this).attr('id');\n        burgSelectGroup.add(opt);\n      });\n    }\n\n    $('#burgEditor > button').not('#burgAddfromEditor').not('#burgRelocate').not('#burgRemove').click(function () {\n      if ($(this).next().is(':visible')) {\n        $('#burgEditor > button').show();\n        $(this).next('div').hide();\n      } else {\n        $('#burgEditor > *').not(this).hide();\n        $(this).next('div').show();\n      }\n    });\n    $('#burgEditor > div > button').click(function () {\n      if ($(this).next().is(':visible')) {\n        $('#burgEditor > div > button').show();\n        $(this).parent().prev().show();\n        $(this).next('div').hide();\n      } else {\n        $('#burgEditor > div > button').not(this).hide();\n        $(this).parent().prev().hide();\n        $(this).next('div').show();\n      }\n    });\n    $('#burgSelectGroup').change(function () {\n      var id = +elSelected.attr('data-id');\n      var g = this.value;\n      moveBurgToGroup(id, g);\n    });\n    $('#burgInputGroup').change(function () {\n      var newGroup = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '');\n      if (_Number$isFinite(+newGroup.charAt(0))) newGroup = 'g' + newGroup;\n\n      if (burgLabels.select('#' + newGroup).size()) {\n        tip('The group \"' + newGroup + '\" is already exists');\n        return;\n      }\n\n      burgInputGroup.value = ''; // clone old group assigning new id\n\n      var id = elSelected.node().parentNode.id;\n      var l = burgLabels.select('#' + id).node().cloneNode(false);\n      l.id = newGroup;\n      var i = burgIcons.select('#' + id).node().cloneNode(false);\n      i.id = newGroup;\n      burgLabels.node().insertBefore(l, null);\n      burgIcons.node().insertBefore(i, null); // select new group\n\n      var opt = document.createElement('option');\n      opt.value = opt.innerHTML = newGroup;\n      burgSelectGroup.add(opt);\n      $('#burgSelectGroup').val(newGroup).change();\n      $('#burgSelectGroup, #burgInputGroup').toggle();\n\n      _updateLabelGroups();\n    });\n    $('#burgAddGroup').click(function () {\n      if ($('#burgInputGroup').css('display') === 'none') {\n        $('#burgInputGroup').css('display', 'inline-block');\n        $('#burgSelectGroup').css('display', 'none');\n        burgInputGroup.focus();\n      } else {\n        $('#burgSelectGroup').css('display', 'inline-block');\n        $('#burgInputGroup').css('display', 'none');\n      }\n    });\n    $('#burgRemoveGroup').click(function () {\n      var group = d3.select(elSelected.node().parentNode);\n      var type = group.attr('id');\n      var id = +elSelected.attr('data-id');\n      var count = group.selectAll('*').size();\n      var message = 'Are you sure you want to remove all Burgs (' + count + ') of that group?';\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove Burgs',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            group.selectAll('*').each(function (d) {\n              var id = +d3.select(this).attr('data-id');\n              if (id === undefined) return;\n              var cell = manors[id].cell;\n              var state = manors[id].region;\n\n              if (states[state]) {\n                if (states[state].capital === id) states[state].capital = 'select';\n                states[state].burgs--;\n              }\n\n              manors[id].region = 'removed';\n              cells[cell].manor = undefined;\n            });\n            burgLabels.select('#' + type).selectAll('*').remove();\n            burgIcons.select('#' + type).selectAll('*').remove();\n            $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']').parent().children().remove();\n            closeDialogs('.stable');\n            updateCountryEditors();\n            $('#burgEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n    $('#burgNameInput').on('input', function () {\n      if (this.value === '') {\n        tip('Name should not be blank, set opacity to 0 to hide label or remove button to delete');\n        return;\n      }\n\n      var id = +elSelected.attr('data-id');\n      burgLabels.selectAll('[data-id=\\'' + id + '\\']').text(this.value);\n      manors[id].name = this.value;\n      $('div[aria-describedby=\\'burgEditor\\'] .ui-dialog-title').text('Edit Burg: ' + this.value);\n    });\n    $('#burgNameReCulture, #burgNameReRandom').click(function () {\n      var id = +elSelected.attr('data-id');\n      var culture = this.id === 'burgNameReCulture' ? manors[id].culture : Math.floor(Math.random() * cultures.length);\n      var name = generateName(culture);\n      burgLabels.selectAll('[data-id=\\'' + id + '\\']').text(name);\n      manors[id].name = name;\n      burgNameInput.value = name;\n      $('div[aria-describedby=\\'burgEditor\\'] .ui-dialog-title').text('Edit Burg: ' + name);\n    });\n    $('#burgToggleExternalFont').click(function () {\n      if ($('#burgInputExternalFont').css('display') === 'none') {\n        $('#burgInputExternalFont').css('display', 'inline-block');\n        $('#burgSelectDefaultFont').css('display', 'none');\n        burgInputExternalFont.focus();\n      } else {\n        $('#burgSelectDefaultFont').css('display', 'inline-block');\n        $('#burgInputExternalFont').css('display', 'none');\n      }\n    });\n    $('#burgSelectDefaultFont').change(function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgLabels.select('#' + type);\n      if (burgSelectDefaultFont.value === '') return;\n      var font = FONTS[burgSelectDefaultFont.value].split(':')[0].replace(/\\+/g, ' ');\n      group.attr('font-family', font).attr('data-font', FONTS[burgSelectDefaultFont.value]);\n    });\n    $('#burgInputExternalFont').change(function () {\n      fetchFonts(this.value).then(function (fetched) {\n        if (!fetched) return;\n        burgToggleExternalFont.click();\n        burgInputExternalFont.value = '';\n        if (fetched === 1) $('#burgSelectDefaultFont').val(FONTS.length - 1).change();\n      });\n    });\n    $('#burgSetLabelSize').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgLabels.select('#' + type);\n      group.attr('data-size', +this.value);\n      invokeActiveZooming();\n    });\n    $('#burgLabelColorInput').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgLabels.select('#' + type);\n      group.attr('fill', this.value);\n    });\n    $('#burgLabelOpacity').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgLabels.select('#' + type);\n      group.attr('opacity', +this.value);\n    });\n    $('#burgLabelAngle').on('input', function () {\n      var id = +elSelected.attr('data-id');\n      var el = burgLabels.select('[data-id=\\'' + id + '\\']');\n      var tr = parseTransform(el.attr('transform'));\n      var c = el.node().getBBox();\n      burgLabelAngleOutput.innerHTML = Math.abs(+this.value) + '°';\n      var angle = +this.value;\n      var transform = \"translate(\".concat(tr[0], \",\").concat(tr[1], \") rotate(\").concat(angle, \" \").concat(c.x + c.width / 2, \" \").concat(c.y + c.height / 2, \")\");\n      el.attr('transform', transform);\n    });\n    $('#burgIconSize').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      var size = +this.value;\n      group.attr('size', size);\n      group.selectAll('*').each(function () {\n        d3.select(this).attr('r', size);\n      });\n    });\n    $('#burgIconFillOpacity').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      group.attr('fill-opacity', +this.value);\n    });\n    $('#burgIconFillColor').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      group.attr('fill', this.value);\n    });\n    $('#burgIconStrokeWidth').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      group.attr('stroke-width', +this.value);\n    });\n    $('#burgIconStrokeOpacity').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      group.attr('stroke-opacity', +this.value);\n    });\n    $('#burgIconStrokeColor').on('input', function () {\n      var type = elSelected.node().parentNode.id;\n      var group = burgIcons.select('#' + type);\n      group.attr('stroke', this.value);\n    });\n    $('#burgToggleCapital').click(function () {\n      var id = +elSelected.attr('data-id');\n      var state = manors[id].region;\n      if (states[state] === undefined) return;\n      var capital = states[manors[id].region] ? id === states[manors[id].region].capital ? 0 : 1 : 1;\n\n      if (capital && states[state].capital !== 'select') {\n        // move oldCapital to a town group\n        var oldCapital = states[state].capital;\n        moveBurgToGroup(oldCapital, 'towns');\n      }\n\n      states[state].capital = capital ? id : 'select';\n      d3.select('#burgToggleCapital').classed('pressed', capital);\n      var g = capital ? 'capitals' : 'towns';\n      moveBurgToGroup(id, g);\n    });\n    $('#burgTogglePort').click(function () {\n      var id = +elSelected.attr('data-id');\n      var cell = cells[manors[id].cell];\n      var markAsPort = cell.port === undefined ? true : undefined;\n      cell.port = markAsPort;\n      d3.select('#burgTogglePort').classed('pressed', markAsPort);\n\n      if (markAsPort) {\n        var _type = elSelected.node().parentNode.id;\n        var ag = _type === 'capitals' ? '#capital-anchors' : '#town-anchors';\n        var group = icons.select(ag);\n        var size = +group.attr('size');\n\n        var x = _.round(manors[id].x - size * 0.47, 2);\n\n        var y = _.round(manors[id].y - size * 0.47, 2);\n\n        group.append('use').attr('xlink:href', '#icon-anchor').attr('data-id', id).attr('x', x).attr('y', y).attr('width', size).attr('height', size).on('click', editIcon);\n      } else {\n        $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']').remove();\n      }\n    });\n    $('#burgPopulation').on('input', function () {\n      var id = +elSelected.attr('data-id');\n      burgPopulationFriendly.value = Math.round(this.value * urbanization.value * populationRate.value * 1000);\n      manors[id].population = +this.value;\n    });\n    $('#burgRelocate').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        restoreDefaultEvents();\n        tip('', true);\n      } else {\n        $('.pressed').removeClass('pressed');\n\n        var _id = elSelected.attr('data-id');\n\n        $(this).addClass('pressed').attr('data-id', _id);\n        viewbox.style('cursor', 'crosshair').on('click', relocateBurgOnClick);\n        tip('Click on map to relocate burg. Hold Shift for continuous move', true);\n      }\n    }); // open legendsEditor\n\n    document.getElementById('burglLegend').addEventListener('click', function () {\n      var burg = +elSelected.attr('data-id');\n      var id = 'burg' + burg;\n      var name = manors[burg].name;\n      editLegends(id, name);\n    }); // move burg to a different cell\n\n    function relocateBurgOnClick() {\n      var point = d3.mouse(this);\n      var index = getIndex(point);\n      var i = +$('#burgRelocate').attr('data-id');\n      if (isNaN(i) || !manors[i]) return;\n\n      if (cells[index].height < 20) {\n        tip('Cannot place burg in the water! Select a land cell', null, 'error');\n        return;\n      }\n\n      if (cells[index].manor !== undefined && cells[index].manor !== i) {\n        tip('There is already a burg in this cell. Please select a free cell', null, 'error');\n        $('#grid').fadeIn();\n        d3.select('#toggleGrid').classed('buttonoff', false);\n        return;\n      }\n\n      var region = cells[index].region;\n      var oldRegion = manors[i].region; // relocating capital to other country you \"conquer\" target cell\n\n      if (states[oldRegion] && states[oldRegion].capital === i) {\n        if (region !== oldRegion) {\n          tip('Capital cannot be moved to another country!', null, 'error');\n          return;\n        }\n      }\n\n      if (d3.event.shiftKey === false) {\n        $('#burgRelocate').removeClass('pressed');\n        restoreDefaultEvents();\n        tip('', true);\n\n        if (region !== oldRegion) {\n          recalculateStateData(oldRegion);\n          recalculateStateData(region);\n          updateCountryEditors();\n        }\n      }\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2);\n\n      burgIcons.select('circle[data-id=\\'' + i + '\\']').attr('transform', null).attr('cx', x).attr('cy', y);\n      burgLabels.select('text[data-id=\\'' + i + '\\']').attr('transform', null).attr('x', x).attr('y', y);\n      var anchor = icons.select('use[data-id=\\'' + i + '\\']');\n\n      if (anchor.size()) {\n        var size = anchor.attr('width');\n\n        var xa = _.round(x - size * 0.47, 2);\n\n        var ya = _.round(y - size * 0.47, 2);\n\n        anchor.attr('transform', null).attr('x', xa).attr('y', ya);\n      }\n\n      cells[index].manor = i;\n      cells[manors[i].cell].manor = undefined;\n      manors[i].x = x, manors[i].y = y, manors[i].region = region, manors[i].cell = index;\n    } // open in MFCG\n\n\n    $('#burgSeeInMFCG').click(function () {\n      var id = +elSelected.attr('data-id');\n      var name = manors[id].name;\n      var cell = manors[id].cell;\n      var pop = Math.round(manors[id].population);\n      var size = pop > 65 ? 65 : pop < 6 ? 6 : pop;\n      var s = seed + '' + id;\n      var hub = cells[cell].crossroad > 2 ? 1 : 0;\n      var river = cells[cell].river ? 1 : 0;\n      var coast = cells[cell].port !== undefined ? 1 : 0;\n      var sec = pop > 40 ? 1 : Math.random() < pop / 100 ? 1 : 0;\n      var thr = sec && Math.random() < 0.8 ? 1 : 0;\n      var url = 'http://fantasycities.watabou.ru/';\n      var params = \"?name=\".concat(name, \"&size=\").concat(size, \"&seed=\").concat(s, \"&hub=\").concat(hub, \"&random=0&continuous=0\");\n      params += \"&river=\".concat(river, \"&coast=\").concat(coast, \"&citadel=\").concat(id & 1, \"&plaza=\").concat(sec, \"&temple=\").concat(thr, \"&walls=\").concat(sec, \"&shantytown=\").concat(sec);\n      var win = window.open(url + params, '_blank');\n      win.focus();\n    });\n    $('#burgAddfromEditor').click(function () {\n      clickToAdd(); // to load on click event function\n\n      $('#addBurg').click();\n    });\n    $('#burgRemove').click(function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the Burg?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove Burg',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            var id = +elSelected.attr('data-id');\n            d3.selectAll('[data-id=\\'' + id + '\\']').remove();\n            var cell = manors[id].cell;\n            var state = manors[id].region;\n\n            if (states[state]) {\n              if (states[state].capital === id) states[state].capital = 'select';\n              states[state].burgs--;\n            }\n\n            manors[id].region = 'removed';\n            cells[cell].manor = undefined;\n            closeDialogs('.stable');\n            updateCountryEditors();\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  }\n\n  function editMarker() {\n    if (customization) return;\n    unselect();\n    closeDialogs('#markerEditor, .stable');\n    elSelected = d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true);\n    $('#markerEditor').dialog({\n      title: 'Edit Marker',\n      minHeight: 30,\n      width: 'auto',\n      maxWidth: 275,\n      resizable: false,\n      position: {\n        my: 'center top+30',\n        at: 'bottom',\n        of: d3.event\n      },\n      close: unselect\n    }); // update inputs\n\n    var id = elSelected.attr('href');\n    var symbol = d3.select('#defs-markers').select(id);\n    var icon = symbol.select('text');\n    markerSelectGroup.value = id.slice(1);\n    markerIconSize.value = _parseFloat(icon.attr('font-size'));\n    markerIconShiftX.value = _parseFloat(icon.attr('x'));\n    markerIconShiftY.value = _parseFloat(icon.attr('y'));\n    markerIconFill.value = icon.attr('fill');\n    markerIconStrokeWidth.value = icon.attr('stroke-width');\n    markerIconStroke.value = icon.attr('stroke');\n    markerSize.value = elSelected.attr('data-size');\n    markerBase.value = symbol.select('path').attr('fill');\n    markerFill.value = symbol.select('circle').attr('fill');\n    var opacity = symbol.select('circle').attr('opacity');\n    markerToggleBubble.className = opacity === '0' ? 'icon-info' : 'icon-info-circled';\n    var table = document.getElementById('markerIconTable');\n    var selected = table.getElementsByClassName('selected');\n    if (selected.length) selected[0].removeAttribute('class');\n    selected = document.querySelectorAll('#markerIcon' + icon.text().codePointAt());\n    if (selected.length) selected[0].className = 'selected';\n    markerIconCustom.value = selected.length ? '' : icon.text();\n    if (modules.editMarker) return;\n    modules.editMarker = true;\n    $('#markerGroup').click(function () {\n      $('#markerEditor > button').not(this).toggle();\n      $('#markerGroupSection').toggle();\n      updateMarkerGroupOptions();\n    });\n\n    function updateMarkerGroupOptions() {\n      markerSelectGroup.innerHTML = '';\n      d3.select('#defs-markers').selectAll('symbol').each(function () {\n        var opt = document.createElement('option');\n        opt.value = opt.innerHTML = this.id;\n        markerSelectGroup.add(opt);\n      });\n      var id = elSelected.attr('href').slice(1);\n      markerSelectGroup.value = id;\n    } // on add marker type click\n\n\n    document.getElementById('markerAddGroup').addEventListener('click', function () {\n      if ($('#markerInputGroup').css('display') === 'none') {\n        $('#markerInputGroup').css('display', 'inline-block');\n        $('#markerSelectGroup').css('display', 'none');\n        markerInputGroup.focus();\n      } else {\n        $('#markerSelectGroup').css('display', 'inline-block');\n        $('#markerInputGroup').css('display', 'none');\n      }\n    }); // on marker type change\n\n    document.getElementById('markerSelectGroup').addEventListener('change', function () {\n      elSelected.attr('href', '#' + this.value);\n      elSelected.attr('data-id', '#' + this.value);\n    }); // on new type input\n\n    document.getElementById('markerInputGroup').addEventListener('change', function () {\n      var newGroup = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '');\n      if (_Number$isFinite(+newGroup.charAt(0))) newGroup = 'm' + newGroup;\n\n      if (d3.select('#defs-markers').select('#' + newGroup).size()) {\n        tip('The type \"' + newGroup + '\" is already exists');\n        return;\n      }\n\n      markerInputGroup.value = ''; // clone old group assigning new id\n\n      var id = elSelected.attr('href');\n      var l = d3.select('#defs-markers').select(id).node().cloneNode(true);\n      l.id = newGroup;\n      elSelected.attr('href', '#' + newGroup);\n      elSelected.attr('data-id', '#' + newGroup);\n      document.getElementById('defs-markers').insertBefore(l, null); // select new group\n\n      var opt = document.createElement('option');\n      opt.value = opt.innerHTML = newGroup;\n      markerSelectGroup.add(opt);\n      $('#markerSelectGroup').val(newGroup).change();\n      $('#markerSelectGroup, #markerInputGroup').toggle();\n      updateMarkerGroupOptions();\n    });\n    $('#markerIconButton').click(function () {\n      $('#markerEditor > button').not(this).toggle();\n      $('#markerIconButtons').toggle();\n      if (!$('#markerIconTable').text()) drawIconsList(icons);\n    });\n    $('#markerRemoveGroup').click(function () {\n      var id = elSelected.attr('href');\n      var used = document.querySelectorAll('use[data-id=\\'' + id + '\\']');\n      var count = used.length === 1 ? '1 element' : used.length + ' elements';\n      var message = 'Are you sure you want to remove the marker (' + count + ')?';\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove marker',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            if (id !== '#marker0') d3.select('#defs-markers').select(id).remove();\n            used.forEach(function (e) {\n              e.remove();\n            });\n            updateMarkerGroupOptions();\n            $('#markerEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n\n    function drawIconsList() {\n      var table = document.getElementById('markerIconTable'),\n          row = '';\n      table.addEventListener('click', clickMarkerIconTable, false);\n      table.addEventListener('mouseover', hoverMarkerIconTable, false);\n\n      for (var i = 0; i < ICONS.length; i++) {\n        if (i % 20 === 0) row = table.insertRow(0);\n        var cell = row.insertCell(0);\n\n        var _icon = _String$fromCodePoint(_parseInt(ICONS[i][0], 16));\n\n        cell.innerHTML = _icon;\n        cell.id = 'markerIcon' + _icon.codePointAt();\n        cell.setAttribute('data-desc', ICONS[i][2]);\n      }\n    }\n\n    function clickMarkerIconTable(e) {\n      if (e.target !== e.currentTarget) {\n        var _table = document.getElementById('markerIconTable');\n\n        var _selected = _table.getElementsByClassName('selected');\n\n        if (_selected.length) _selected[0].removeAttribute('class');\n        e.target.className = 'selected';\n\n        var _id2 = elSelected.attr('href');\n\n        var _icon2 = e.target.innerHTML;\n        d3.select('#defs-markers').select(_id2).select('text').text(_icon2);\n      }\n\n      e.stopPropagation();\n    }\n\n    function hoverMarkerIconTable(e) {\n      if (e.target !== e.currentTarget) {\n        var desc = e.target.getAttribute('data-desc');\n        tip(e.target.innerHTML + ' ' + desc);\n      }\n\n      e.stopPropagation();\n    } // change marker icon size\n\n\n    document.getElementById('markerIconSize').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('font-size', this.value + 'px');\n    }); // change marker icon x shift\n\n    document.getElementById('markerIconShiftX').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('x', this.value + '%');\n    }); // change marker icon y shift\n\n    document.getElementById('markerIconShiftY').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('y', this.value + '%');\n    }); // apply custom unicode icon on input\n\n    document.getElementById('markerIconCustom').addEventListener('input', function () {\n      if (!this.value) return;\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').text(this.value);\n    });\n    $('#markerStyleButton').click(function () {\n      $('#markerEditor > button').not(this).toggle();\n      $('#markerStyleButtons').toggle();\n    }); // change marker size\n\n    document.getElementById('markerSize').addEventListener('input', function () {\n      var id = elSelected.attr('data-id');\n      var used = document.querySelectorAll('use[data-id=\\'' + id + '\\']');\n      var size = this.value;\n      used.forEach(function (e) {\n        e.setAttribute('data-size', size);\n      });\n      invokeActiveZooming();\n    }); // change marker base color\n\n    document.getElementById('markerBase').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select(id).select('path').attr('fill', this.value);\n      d3.select(id).select('circle').attr('stroke', this.value);\n    }); // change marker fill color\n\n    document.getElementById('markerFill').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select(id).select('circle').attr('fill', this.value);\n    }); // change marker icon y shift\n\n    document.getElementById('markerIconFill').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('fill', this.value);\n    }); // change marker icon y shift\n\n    document.getElementById('markerIconStrokeWidth').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('stroke-width', this.value);\n    }); // change marker icon y shift\n\n    document.getElementById('markerIconStroke').addEventListener('input', function () {\n      var id = elSelected.attr('href');\n      d3.select('#defs-markers').select(id).select('text').attr('stroke', this.value);\n    }); // toggle marker bubble display\n\n    document.getElementById('markerToggleBubble').addEventListener('click', function () {\n      var id = elSelected.attr('href');\n      var show = 1;\n\n      if (this.className === 'icon-info-circled') {\n        this.className = 'icon-info';\n        show = 0;\n      } else {\n        this.className = 'icon-info-circled';\n      }\n\n      d3.select(id).select('circle').attr('opacity', show);\n      d3.select(id).select('path').attr('opacity', show);\n    }); // open legendsEditor\n\n    document.getElementById('markerLegendButton').addEventListener('click', function () {\n      var id = elSelected.attr('id');\n      var symbol = elSelected.attr('href');\n      var icon = d3.select('#defs-markers').select(symbol).select('text').text();\n      var name = 'Marker ' + icon;\n      editLegends(id, name);\n    }); // click on master button to add new markers on click\n\n    document.getElementById('markerAdd').addEventListener('click', function () {\n      document.getElementById('addMarker').click();\n    }); // remove marker on click\n\n    document.getElementById('markerRemove').addEventListener('click', function () {\n      alertMessage.innerHTML = 'Are you sure you want to remove the marker?';\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove marker',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            elSelected.remove();\n            $('#markerEditor').dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  } // clear elSelected variable\n\n\n  function unselect() {\n    tip('', true);\n    restoreDefaultEvents();\n    if (customization === 5) customization = 0;\n    if (!elSelected) return;\n    elSelected.call(d3.drag().on('drag', null)).attr('class', null);\n    debug.selectAll('*').remove();\n    viewbox.style('cursor', 'default');\n    elSelected = null;\n  } // transform string to array [translateX,translateY,rotateDeg,rotateX,rotateY,scale]\n\n\n  function parseTransform(string) {\n    if (!string) {\n      return [0, 0, 0, 0, 0, 1];\n    }\n\n    var a = string.replace(/[a-z()]/g, '').replace(/[ ]/g, ',').split(',');\n    return [a[0] || 0, a[1] || 0, a[2] || 0, a[3] || 0, a[4] || 0, a[5] || 1];\n  } // generic function to move any burg to any group\n\n\n  function moveBurgToGroup(id, g) {\n    $('#burgLabels [data-id=' + id + ']').detach().appendTo($('#burgLabels > #' + g));\n    $('#burgIcons [data-id=' + id + ']').detach().appendTo($('#burgIcons > #' + g));\n    var rSize = $('#burgIcons > #' + g).attr('size');\n    $('#burgIcons [data-id=' + id + ']').attr('r', rSize);\n    var el = $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']');\n\n    if (el.length) {\n      var to = g === 'towns' ? $('#town-anchors') : $('#capital-anchors');\n      el.detach().appendTo(to);\n      var useSize = to.attr('size');\n\n      var x = _.round(manors[id].x - useSize * 0.47, 2);\n\n      var y = _.round(manors[id].y - useSize * 0.47, 2);\n\n      el.attr('x', x).attr('y', y).attr('width', useSize).attr('height', useSize);\n    }\n\n    updateCountryEditors();\n  } // generate cultures for a new map based on options and namesbase\n\n\n  function generateCultures() {\n    var count = +culturesInput.value;\n    cultures = d3.shuffle(defaultCultures).slice(0, count);\n    var centers = d3.range(cultures.length).map(function (d, i) {\n      var x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1);\n      var y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1);\n      var center = [x, y];\n      cultures[i].center = center;\n      return center;\n    });\n    cultureTree = d3.quadtree(centers);\n  }\n\n  function manorsAndRegions() {\n    console.group('manorsAndRegions');\n    calculateChains();\n    rankPlacesGeography();\n    locateCapitals();\n    generateMainRoads();\n    rankPlacesEconomy();\n    locateTowns();\n    getNames();\n    shiftSettlements();\n    checkAccessibility();\n    defineRegions('withCultures');\n    generatePortRoads();\n    generateSmallRoads();\n    generateOceanRoutes();\n    calculatePopulation();\n    drawManors();\n    drawRegions();\n    console.groupEnd('manorsAndRegions');\n  } // Assess cells geographycal suitability for settlement\n\n\n  function rankPlacesGeography() {\n    console.time('rankPlacesGeography');\n    land.map(function (c) {\n      var score = 0;\n      c.flux = _.round(c.flux, 2); // get base score from height (will be biom)\n\n      if (c.height <= 40) score = 2;else if (c.height <= 50) score = 1.8;else if (c.height <= 60) score = 1.6;else if (c.height <= 80) score = 1.4;\n      score += (1 - c.height / 100) / 3;\n\n      if (c.ctype && Math.random() < 0.8 && !c.river) {\n        c.score = 0; // ignore 80% of extended cells\n      } else {\n        if (c.harbor) {\n          if (c.harbor === 1) {\n            score += 1;\n          } else {\n            score -= 0.3;\n          } // good sea harbor is valued\n\n        }\n\n        if (c.river) score += 1; // coastline is valued\n\n        if (c.river && c.ctype === 1) score += 1; // estuary is valued\n\n        if (c.flux > 1) score += Math.pow(c.flux, 0.3); // riverbank is valued\n\n        if (c.confluence) score += Math.pow(c.confluence, 0.7); // confluence is valued;\n\n        var neighbEv = c.neighbors.map(function (n) {\n          if (cells[n].height >= 20) return cells[n].height;\n        });\n        var difEv = c.height - d3.mean(neighbEv); // if (!isNaN(difEv)) score += difEv * 10 * (1 - c.height / 100); // local height maximums are valued\n      }\n\n      c.score = _.round(Math.random() * score + score, 3); // add random factor\n    });\n    land.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    console.timeEnd('rankPlacesGeography');\n  } // Assess the cells economical suitability for settlement\n\n\n  function rankPlacesEconomy() {\n    console.time('rankPlacesEconomy');\n    land.map(function (c) {\n      var score = c.score;\n      var path = c.path || 0; // roads are valued\n\n      if (path) {\n        path = Math.pow(path, 0.2);\n        var crossroad = c.crossroad || 0; // crossroads are valued\n\n        score = score + path + crossroad;\n      }\n\n      c.score = _.round(Math.random() * score + score, 2); // add random factor\n    });\n    land.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    console.timeEnd('rankPlacesEconomy');\n  } // calculate population for manors, cells and states\n\n\n  function calculatePopulation() {\n    // neutral population factors < 1 as neutral lands are usually pretty wild\n    var ruralFactor = 0.5,\n        urbanFactor = 0.9; // calculate population for each burg (based on trade/people attractors)\n\n    manors.map(function (m) {\n      var cell = cells[m.cell];\n      var score = cell.score;\n\n      if (score <= 0) {\n        score = _.round(Math.random(), 2);\n      }\n\n      if (cell.crossroad) {\n        score += cell.crossroad;\n      } // crossroads\n\n\n      if (cell.confluence) {\n        score += Math.pow(cell.confluence, 0.3);\n      } // confluences\n\n\n      if (m.i !== m.region && cell.port) {\n        score *= 1.5;\n      } // ports (not capital)\n\n\n      if (m.i === m.region && !cell.port) {\n        score *= 2;\n      } // land-capitals\n\n\n      if (m.i === m.region && cell.port) {\n        score *= 3;\n      } // port-capitals\n\n\n      if (m.region === 'neutral') score *= urbanFactor;\n      var rnd = 0.6 + Math.random() * 0.8; // random factor\n\n      m.population = _.round(score * rnd, 1);\n    }); // calculate rural population for each cell based on area + elevation (elevation to be changed to biome)\n\n    var graphSizeAdj = 90 / Math.sqrt(cells.length, 2); // adjust to different graphSize\n\n    land.map(function (l) {\n      var population = 0;\n      var elevationFactor = Math.pow(1 - l.height / 100, 3);\n      population = elevationFactor * l.area * graphSizeAdj;\n      if (l.region === 'neutral') population *= ruralFactor;\n      l.pop = _.round(population, 1);\n    }); // calculate population for each region\n\n    states.map(function (s, i) {\n      // define region burgs count\n      var burgs = $.grep(manors, function (e) {\n        return e.region === i;\n      });\n      s.burgs = burgs.length; // define region total and burgs population\n\n      var burgsPop = 0; // get summ of all burgs population\n\n      burgs.map(function (b) {\n        burgsPop += b.population;\n      });\n      s.urbanPopulation = _.round(burgsPop, 2);\n      var regionCells = $.grep(cells, function (e) {\n        return e.region === i;\n      });\n      var cellsPop = 0;\n      regionCells.map(function (c) {\n        cellsPop += c.pop;\n      });\n      s.cells = regionCells.length;\n      s.ruralPopulation = _.round(cellsPop, 1);\n    }); // collect data for neutrals\n\n    var neutralCells = $.grep(cells, function (e) {\n      return e.region === 'neutral';\n    });\n\n    if (neutralCells.length) {\n      var burgs = 0,\n          urbanPopulation = 0,\n          ruralPopulation = 0,\n          area = 0;\n      manors.forEach(function (m) {\n        if (m.region !== 'neutral') return;\n        urbanPopulation += m.population;\n        burgs++;\n      });\n      neutralCells.forEach(function (c) {\n        ruralPopulation += c.pop;\n        area += cells[c.index].area;\n      });\n      states.push({\n        i: states.length,\n        color: 'neutral',\n        name: 'Neutrals',\n        capital: 'neutral',\n        cells: neutralCells.length,\n        burgs: burgs,\n        urbanPopulation: _.round(urbanPopulation, 2),\n        ruralPopulation: _.round(ruralPopulation, 2),\n        area: Math.round(area)\n      });\n    }\n  }\n\n  function locateCapitals() {\n    console.time('locateCapitals'); // min distance detween capitals\n\n    var count = +regionsInput.value;\n    var spacing = (graphWidth + graphHeight) / 2 / count;\n    console.log(' states: ' + count);\n\n    for (var l = 0; manors.length < count; l++) {\n      var region = manors.length;\n      var x = land[l].data[0],\n          y = land[l].data[1];\n      var minDist = 10000; // dummy value\n\n      for (var c = 0; c < manors.length; c++) {\n        var dist = Math.hypot(x - manors[c].x, y - manors[c].y);\n        if (dist < minDist) minDist = dist;\n        if (minDist < spacing) break;\n      }\n\n      if (minDist >= spacing) {\n        var cell = land[l].index;\n        var closest = cultureTree.find(x, y);\n        var culture = getCultureId(closest);\n        manors.push({\n          i: region,\n          cell: cell,\n          x: x,\n          y: y,\n          region: region,\n          culture: culture\n        });\n      }\n\n      if (l === land.length - 1) {\n        console.error('Cannot place capitals with current spacing. Trying again with reduced spacing');\n        l = -1, manors = [], spacing /= 1.2;\n      }\n    } // For each capital create a country\n\n\n    var scheme = count <= 8 ? colors8 : colors20;\n    var mod = +powerInput.value;\n    manors.forEach(function (m, i) {\n      var power = _.round(Math.random() * mod / 2 + 1, 1);\n\n      var color = scheme(i / count);\n      states.push({\n        i: i,\n        color: color,\n        power: power,\n        capital: i\n      });\n      var p = cells[m.cell];\n      p.manor = i;\n      p.region = i;\n      p.culture = m.culture;\n    });\n    console.timeEnd('locateCapitals');\n  }\n\n  function locateTowns() {\n    console.time('locateTowns');\n    var count = +manorsInput.value;\n    var neutral = +neutralInput.value;\n    var manorTree = d3.quadtree();\n    manors.forEach(function (m) {\n      manorTree.add([m.x, m.y]);\n    });\n\n    for (var l = 0; manors.length < count && l < land.length; l++) {\n      var x = land[l].data[0],\n          y = land[l].data[1];\n      var c = manorTree.find(x, y);\n      var d = Math.hypot(x - c[0], y - c[1]);\n      if (d < 6) continue;\n      var cell = land[l].index;\n      var region = 'neutral',\n          culture = -1,\n          closest = neutral;\n\n      for (var _c = 0; _c < states.length; _c++) {\n        var dist = Math.hypot(manors[_c].x - x, manors[_c].y - y) / states[_c].power;\n\n        var cap = manors[_c].cell;\n        if (cells[cell].fn !== cells[cap].fn) dist *= 3;\n\n        if (dist < closest) {\n          region = _c;\n          closest = dist;\n        }\n      }\n\n      if (closest > neutral / 5 || region === 'neutral') {\n        var closestCulture = cultureTree.find(x, y);\n        culture = getCultureId(closestCulture);\n      } else {\n        culture = manors[region].culture;\n      }\n\n      land[l].manor = manors.length;\n      land[l].culture = culture;\n      land[l].region = region;\n      manors.push({\n        i: manors.length,\n        cell: cell,\n        x: x,\n        y: y,\n        region: region,\n        culture: culture\n      });\n      manorTree.add([x, y]);\n    }\n\n    if (manors.length < count) {\n      var error = 'Cannot place all burgs. Requested ' + count + ', placed ' + manors.length;\n      console.error(error);\n    }\n\n    console.timeEnd('locateTowns');\n  } // shift settlements from cell point\n\n\n  function shiftSettlements() {\n    for (var i = 0; i < manors.length; i++) {\n      var capital = i < regionsInput.value;\n      var cell = cells[manors[i].cell];\n      var x = manors[i].x,\n          y = manors[i].y;\n\n      if (capital && cell.harbor || cell.harbor === 1) {\n        // port: capital with any harbor and towns with good harbors\n        if (cell.haven === undefined) {\n          cell.harbor = undefined;\n        } else {\n          cell.port = cells[cell.haven].fn;\n          x = cell.coastX;\n          y = cell.coastY;\n        }\n      }\n\n      if (cell.river && cell.type !== 1) {\n        var shift = 0.2 * cell.flux;\n        if (shift < 0.2) shift = 0.2;\n        if (shift > 1) shift = 1;\n        shift = Math.random() > .5 ? shift : shift * -1;\n        x = _.round(x + shift, 2);\n        shift = Math.random() > .5 ? shift : shift * -1;\n        y = _.round(y + shift, 2);\n      }\n\n      cell.data[0] = manors[i].x = x;\n      cell.data[1] = manors[i].y = y;\n    }\n  } // Validate each island with manors has port\n\n\n  function checkAccessibility() {\n    console.time('checkAccessibility');\n\n    var _loop16 = function _loop16(f) {\n      if (!features[f].land) return \"continue\";\n      var manorsOnIsland = $.grep(land, function (e) {\n        return e.manor !== undefined && e.fn === f;\n      });\n      if (!manorsOnIsland.length) return \"continue\"; // if lake port is the only port on lake, remove port\n\n      var lakePorts = $.grep(manorsOnIsland, function (p) {\n        return p.port && !features[p.port].border;\n      });\n\n      if (lakePorts.length) {\n        var _lakes = [];\n        lakePorts.forEach(function (p) {\n          _lakes[p.port] = _lakes[p.port] ? _lakes[p.port] + 1 : 1;\n        });\n        lakePorts.forEach(function (p) {\n          if (_lakes[p.port] === 1) p.port = undefined;\n        });\n      } // check how many ocean ports are there on island\n\n\n      var oceanPorts = $.grep(manorsOnIsland, function (p) {\n        return p.port && features[p.port].border;\n      });\n      if (oceanPorts.length) return \"continue\";\n      var portCandidates = $.grep(manorsOnIsland, function (c) {\n        return c.harbor && features[cells[c.harbor].fn].border && c.ctype === 1;\n      });\n\n      if (portCandidates.length) {\n        // No ports on island. Upgrading first burg to port\n        var candidate = portCandidates[0];\n        candidate.harbor = 1;\n        candidate.port = cells[candidate.haven].fn;\n        var manor = manors[portCandidates[0].manor];\n        candidate.data[0] = manor.x = candidate.coastX;\n        candidate.data[1] = manor.y = candidate.coastY; // add score for each burg on island (as it's the only port)\n\n        candidate.score += Math.floor((portCandidates.length - 1) / 2);\n      } else {\n        // No ports on island. Reducing score for burgs\n        manorsOnIsland.forEach(function (e) {\n          e.score -= 2;\n        });\n      }\n    };\n\n    for (var f = 0; f < features.length; f++) {\n      var _ret4 = _loop16(f);\n\n      if (_ret4 === \"continue\") continue;\n    }\n\n    console.timeEnd('checkAccessibility');\n  }\n\n  function generateMainRoads() {\n    console.time('generateMainRoads');\n    lineGen.curve(d3.curveBasis);\n    if (states.length < 2 || manors.length < 2) return;\n\n    var _loop17 = function _loop17(f) {\n      if (!features[f].land) return \"continue\";\n      var manorsOnIsland = $.grep(land, function (e) {\n        return e.manor !== undefined && e.fn === f;\n      });\n\n      if (manorsOnIsland.length > 1) {\n        for (var d = 1; d < manorsOnIsland.length; d++) {\n          for (var m = 0; m < d; m++) {\n            var path = findLandPath(manorsOnIsland[d].index, manorsOnIsland[m].index, 'main');\n            restorePath(manorsOnIsland[m].index, manorsOnIsland[d].index, 'main', path);\n          }\n        }\n      }\n    };\n\n    for (var f = 0; f < features.length; f++) {\n      var _ret5 = _loop17(f);\n\n      if (_ret5 === \"continue\") continue;\n    }\n\n    console.timeEnd('generateMainRoads');\n  } // add roads from port to capital if capital is not a port\n\n\n  function generatePortRoads() {\n    console.time('generatePortRoads');\n    if (!states.length || manors.length < 2) return;\n    var portless = [];\n\n    for (var s = 0; s < states.length; s++) {\n      var cell = manors[s].cell;\n      if (cells[cell].port === undefined) portless.push(s);\n    }\n\n    var _loop18 = function _loop18(l) {\n      var ports = $.grep(land, function (l) {\n        return l.port !== undefined && l.region === portless[l];\n      });\n      if (!ports.length) return \"continue\";\n      var minDist = 1000,\n          end = -1;\n      ports.map(function (p) {\n        var dist = Math.hypot(e.data[0] - p.data[0], e.data[1] - p.data[1]);\n\n        if (dist < minDist && dist > 1) {\n          minDist = dist;\n          end = p.index;\n        }\n      });\n\n      if (end !== -1) {\n        var _start2 = manors[portless[l]].cell;\n        var path = findLandPath(_start2, end, 'direct');\n        restorePath(end, _start2, 'main', path);\n      }\n    };\n\n    for (var l = 0; l < portless.length; l++) {\n      var _ret6 = _loop18(l);\n\n      if (_ret6 === \"continue\") continue;\n    }\n\n    console.timeEnd('generatePortRoads');\n  }\n\n  function generateSmallRoads() {\n    console.time('generateSmallRoads');\n    if (manors.length < 2) return;\n\n    var _loop19 = function _loop19(f) {\n      var manorsOnIsland = $.grep(land, function (e) {\n        return e.manor !== undefined && e.fn === f;\n      });\n      var l = manorsOnIsland.length;\n\n      if (l > 1) {\n        var secondary = Math.round((l + 8) / 10);\n\n        for (var s = 0; s < secondary; s++) {\n          start = manorsOnIsland[Math.floor(Math.random() * l)].index;\n          end = manorsOnIsland[Math.floor(Math.random() * l)].index;\n          dist = Math.hypot(cells[start].data[0] - cells[end].data[0], cells[start].data[1] - cells[end].data[1]);\n\n          if (dist > 10) {\n            path = findLandPath(start, end, 'direct');\n            restorePath(end, start, 'small', path);\n          }\n        }\n\n        manorsOnIsland.map(function (e, d) {\n          if (!e.path && d > 0) {\n            var _start3 = e.index;\n\n            var _end = -1;\n\n            var road = $.grep(land, function (e) {\n              return e.path && e.fn === f;\n            });\n\n            if (road.length > 0) {\n              var minDist = 10000;\n              road.map(function (i) {\n                var dist = Math.hypot(e.data[0] - i.data[0], e.data[1] - i.data[1]);\n\n                if (dist < minDist) {\n                  minDist = dist;\n                  _end = i.index;\n                }\n              });\n            } else {\n              _end = manorsOnIsland[0].index;\n            }\n\n            var _path = findLandPath(_start3, _end, 'main');\n\n            restorePath(_end, _start3, 'small', _path);\n          }\n        });\n      }\n    };\n\n    for (var f = 0; f < features.length; f++) {\n      var start;\n      var end;\n      var dist;\n      var path;\n\n      _loop19(f);\n    }\n\n    console.timeEnd('generateSmallRoads');\n  }\n\n  function generateOceanRoutes() {\n    console.time('generateOceanRoutes');\n    lineGen.curve(d3.curveBasis);\n    var cAnchors = icons.selectAll('#capital-anchors');\n    var tAnchors = icons.selectAll('#town-anchors');\n    var cSize = cAnchors.attr('size') || 2;\n    var tSize = tAnchors.attr('size') || 1;\n    var ports = []; // groups all ports on water feature\n\n    for (var m = 0; m < manors.length; m++) {\n      var cell = manors[m].cell;\n      var port = cells[cell].port;\n      if (port === undefined) continue;\n      if (ports[port] === undefined) ports[port] = [];\n      ports[port].push(cell); // draw anchor icon\n\n      var group = m < states.length ? cAnchors : tAnchors;\n      var size = m < states.length ? cSize : tSize;\n\n      var x = _.round(cells[cell].data[0] - size * 0.47, 2);\n\n      var y = _.round(cells[cell].data[1] - size * 0.47, 2);\n\n      group.append('use').attr('xlink:href', '#icon-anchor').attr('data-id', m).attr('x', x).attr('y', y).attr('width', size).attr('height', size);\n      icons.selectAll('use').on('click', editIcon);\n    }\n\n    for (var w = 0; w < ports.length; w++) {\n      if (!ports[w]) continue;\n      if (ports[w].length < 2) continue;\n      var onIsland = [];\n\n      for (var i = 0; i < ports[w].length; i++) {\n        var _cell = ports[w][i];\n        var fn = cells[_cell].fn;\n        if (onIsland[fn] === undefined) onIsland[fn] = [];\n        onIsland[fn].push(_cell);\n      }\n\n      for (var _fn = 0; _fn < onIsland.length; _fn++) {\n        if (!onIsland[_fn]) continue;\n        if (onIsland[_fn].length < 2) continue;\n        var _start4 = onIsland[_fn][0];\n        var paths = findOceanPaths(_start4, -1);\n\n        for (var h = 1; h < onIsland[_fn].length; h++) {\n          // routes from all ports on island to 1st port on island\n          restorePath(onIsland[_fn][h], _start4, 'ocean', paths);\n        } // inter-island routes\n\n\n        for (var c = _fn + 1; c < onIsland.length; c++) {\n          if (!onIsland[c]) continue;\n          if (!onIsland[c].length) continue;\n\n          if (onIsland[_fn].length > 3) {\n            var end = onIsland[c][0];\n            restorePath(end, _start4, 'ocean', paths);\n          }\n        }\n\n        if (features[w].border && !features[_fn].border && onIsland[_fn].length > 5) {\n          // encircle the island\n          onIsland[_fn].sort(function (a, b) {\n            return cells[b].cost - cells[a].cost;\n          });\n\n          for (var a = 2; a < onIsland[_fn].length && a < 10; a++) {\n            var from = onIsland[_fn][1],\n                to = onIsland[_fn][a];\n            var dist = Math.hypot(cells[from].data[0] - cells[to].data[0], cells[from].data[1] - cells[to].data[1]);\n            var distPath = getPathDist(from, to);\n\n            if (distPath > dist * 4 + 10) {\n              var totalCost = cells[from].cost + cells[to].cost;\n              var pathsAdd = findOceanPaths(from, to);\n\n              if (cells[to].cost < totalCost) {\n                restorePath(to, from, 'ocean', pathsAdd);\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    console.timeEnd('generateOceanRoutes');\n  }\n\n  function findLandPath(start, end, type) {\n    // A* algorithm\n    var queue = new PriorityQueue({\n      comparator: function comparator(a, b) {\n        return a.p - b.p;\n      }\n    });\n    var cameFrom = [];\n    var costTotal = [];\n    costTotal[start] = 0;\n    queue.queue({\n      e: start,\n      p: 0\n    });\n\n    var _loop20 = function _loop20() {\n      var next = queue.dequeue().e;\n\n      if (next === end) {\n        return \"break\";\n      }\n\n      var pol = cells[next];\n      pol.neighbors.forEach(function (e) {\n        if (cells[e].height >= 20) {\n          var cost = cells[e].height / 100 * 2;\n\n          if (cells[e].path && type === 'main') {\n            cost = 0.15;\n          } else {\n            if (typeof e.manor === 'undefined') {\n              cost += 0.1;\n            }\n\n            if (typeof e.river !== 'undefined') {\n              cost -= 0.1;\n            }\n\n            if (cells[e].harbor) {\n              cost *= 0.3;\n            }\n\n            if (cells[e].path) {\n              cost *= 0.5;\n            }\n\n            cost += Math.hypot(cells[e].data[0] - pol.data[0], cells[e].data[1] - pol.data[1]) / 30;\n          }\n\n          var costNew = costTotal[next] + cost;\n\n          if (!cameFrom[e] || costNew < costTotal[e]) {\n            //\n            costTotal[e] = costNew;\n            cameFrom[e] = next;\n            var dist = Math.hypot(cells[e].data[0] - cells[end].data[0], cells[e].data[1] - cells[end].data[1]) / 15;\n            var priority = costNew + dist;\n            queue.queue({\n              e: e,\n              p: priority\n            });\n          }\n        }\n      });\n    };\n\n    while (queue.length > 0) {\n      var _ret7 = _loop20();\n\n      if (_ret7 === \"break\") break;\n    }\n\n    return cameFrom;\n  }\n\n  function findOceanPaths(start, end) {\n    var queue = new PriorityQueue({\n      comparator: function comparator(a, b) {\n        return a.p - b.p;\n      }\n    });\n    var next;\n    var cameFrom = [],\n        costTotal = [];\n    cameFrom[start] = 'no', costTotal[start] = 0;\n    queue.queue({\n      e: start,\n      p: 0\n    });\n\n    var _loop21 = function _loop21() {\n      next = queue.dequeue().e;\n      var pol = cells[next];\n      pol.neighbors.forEach(function (e) {\n        if (cells[e].ctype < 0 || cells[e].haven === next) {\n          var cost = 1;\n          if (cells[e].ctype > 0) cost += 100;\n\n          if (cells[e].ctype < -1) {\n            var dist = Math.hypot(cells[e].data[0] - pol.data[0], cells[e].data[1] - pol.data[1]);\n            cost += 50 + dist * 2;\n          }\n\n          if (cells[e].path && cells[e].ctype < 0) cost *= 0.8;\n          var costNew = costTotal[next] + cost;\n\n          if (!cameFrom[e]) {\n            costTotal[e] = costNew;\n            cells[e].cost = costNew;\n            cameFrom[e] = next;\n            queue.queue({\n              e: e,\n              p: costNew\n            });\n          }\n        }\n      });\n    };\n\n    while (queue.length > 0 && next !== end) {\n      _loop21();\n    }\n\n    return cameFrom;\n  }\n\n  function getPathDist(start, end) {\n    var queue = new PriorityQueue({\n      comparator: function comparator(a, b) {\n        return a.p - b.p;\n      }\n    });\n    var next, costNew;\n    var cameFrom = [];\n    var costTotal = [];\n    cameFrom[start] = 'no';\n    costTotal[start] = 0;\n    queue.queue({\n      e: start,\n      p: 0\n    });\n\n    var _loop22 = function _loop22() {\n      next = queue.dequeue().e;\n      var pol = cells[next];\n      pol.neighbors.forEach(function (e) {\n        if (cells[e].path && (cells[e].ctype === -1 || cells[e].haven === next)) {\n          var dist = Math.hypot(cells[e].data[0] - pol.data[0], cells[e].data[1] - pol.data[1]);\n          costNew = costTotal[next] + dist;\n\n          if (!cameFrom[e]) {\n            costTotal[e] = costNew;\n            cameFrom[e] = next;\n            queue.queue({\n              e: e,\n              p: costNew\n            });\n          }\n        }\n      });\n    };\n\n    while (queue.length > 0 && next !== end) {\n      _loop22();\n    }\n\n    return costNew;\n  }\n\n  function restorePath(end, start, type, from) {\n    var path = [],\n        current = end;\n    var limit = 1000;\n    var prev = cells[end];\n\n    if (type === 'ocean' || !prev.path) {\n      path.push({\n        scX: prev.data[0],\n        scY: prev.data[1],\n        i: end\n      });\n    }\n\n    if (!prev.path) {\n      prev.path = 1;\n    }\n\n    for (var i = 0; i < limit; i++) {\n      current = from[current];\n      var cur = cells[current];\n\n      if (!cur) {\n        break;\n      }\n\n      if (cur.path) {\n        cur.path += 1;\n        path.push({\n          scX: cur.data[0],\n          scY: cur.data[1],\n          i: current\n        });\n        prev = cur;\n        drawPath();\n      } else {\n        cur.path = 1;\n\n        if (prev) {\n          path.push({\n            scX: prev.data[0],\n            scY: prev.data[1],\n            i: prev.index\n          });\n        }\n\n        prev = undefined;\n        path.push({\n          scX: cur.data[0],\n          scY: cur.data[1],\n          i: current\n        });\n      }\n\n      if (current === start || !from[current]) {\n        break;\n      }\n    }\n\n    drawPath();\n\n    function drawPath() {\n      if (path.length > 1) {\n        // mark crossroades\n        if (type === 'main' || type === 'small') {\n          var plus = type === 'main' ? 4 : 2;\n          var f = cells[path[0].i];\n\n          if (f.path > 1) {\n            if (!f.crossroad) {\n              f.crossroad = 0;\n            }\n\n            f.crossroad += plus;\n          }\n\n          var t = cells[path[path.length - 1].i];\n\n          if (t.path > 1) {\n            if (!t.crossroad) {\n              t.crossroad = 0;\n            }\n\n            t.crossroad += plus;\n          }\n        } // draw path segments\n\n\n        var line = lineGen(path);\n        line = round(line, 1);\n        var id = 0; // to create unique route id\n\n        if (type === 'main') {\n          id = roads.selectAll('path').size();\n          roads.append('path').attr('d', line).attr('id', 'road' + id).on('click', editRoute);\n        } else if (type === 'small') {\n          id = trails.selectAll('path').size();\n          trails.append('path').attr('d', line).attr('id', 'trail' + id).on('click', editRoute);\n        } else if (type === 'ocean') {\n          id = searoutes.selectAll('path').size();\n          searoutes.append('path').attr('d', line).attr('id', 'searoute' + id).on('click', editRoute);\n        }\n      }\n\n      path = [];\n    }\n  } // Append burg elements\n\n\n  function drawManors() {\n    console.time('drawManors');\n    var capitalIcons = burgIcons.select('#capitals');\n    var capitalLabels = burgLabels.select('#capitals');\n    var townIcons = burgIcons.select('#towns');\n    var townLabels = burgLabels.select('#towns');\n    var capitalSize = capitalIcons.attr('size') || 1;\n    var townSize = townIcons.attr('size') || 0.5;\n    capitalIcons.selectAll('*').remove();\n    capitalLabels.selectAll('*').remove();\n    townIcons.selectAll('*').remove();\n    townLabels.selectAll('*').remove();\n\n    for (var i = 0; i < manors.length; i++) {\n      var x = manors[i].x,\n          y = manors[i].y;\n      var cell = manors[i].cell;\n      var name = manors[i].name;\n      var ic = i < states.length ? capitalIcons : townIcons;\n      var lb = i < states.length ? capitalLabels : townLabels;\n      var size = i < states.length ? capitalSize : townSize;\n      ic.append('circle').attr('id', 'burg' + i).attr('data-id', i).attr('cx', x).attr('cy', y).attr('r', size).on('click', editBurg);\n      lb.append('text').attr('data-id', i).attr('x', x).attr('y', y).attr('dy', '-0.35em').text(name).on('click', editBurg);\n    }\n\n    console.timeEnd('drawManors');\n  } // get settlement and country names based on option selected\n\n\n  function getNames() {\n    console.time('getNames'); // if names source is an external resource\n\n    if (namesInput.value === '1') {\n      var request = new XMLHttpRequest();\n      var url = 'https://archivist.xalops.com/archivist-core/api/name/settlement?count=';\n      request.open('GET', url + manors.length, true);\n\n      request.onload = function () {\n        var names = JSON.parse(request.responseText);\n\n        for (var i = 0; i < manors.length; i++) {\n          manors[i].name = names[i];\n          burgLabels.select('[data-id=\\'' + i + '\\']').text(names[i]);\n\n          if (i < states.length) {\n            states[i].name = generateStateName(i);\n            labels.select('#countries').select('#regionLabel' + i).text(states[i].name);\n          }\n        }\n\n        console.log(names);\n      };\n\n      request.send(null);\n    }\n\n    if (namesInput.value !== '0') return;\n\n    for (var i = 0; i < manors.length; i++) {\n      var culture = manors[i].culture;\n      manors[i].name = generateName(culture);\n      if (i < states.length) states[i].name = generateStateName(i);\n    }\n\n    console.timeEnd('getNames');\n  }\n\n  function calculateChains() {\n    for (var c = 0; c < nameBase.length; c++) {\n      chain[c] = calculateChain(c);\n    }\n  } // calculate Markov's chain from namesbase data\n\n\n  function calculateChain(c) {\n    var chain = [];\n    var d = nameBase[c].join(' ').toLowerCase();\n    var method = nameBases[c].method;\n\n    for (var i = -1, prev = ' ', str = ''; i < d.length - 2; prev = str, i += str.length, str = '') {\n      var vowel = 0,\n          f = ' ';\n\n      if (method === 'let-to-let') {\n        str = d[i + 1];\n      } else {\n        for (var _c2 = i + 1; str.length < 5; _c2++) {\n          if (d[_c2] === undefined) break;\n          str += d[_c2];\n          if (str === ' ') break;\n          if (d[_c2] !== 'o' && d[_c2] !== 'e' && VOWELS.includes(d[_c2]) && d[_c2 + 1] === d[_c2]) break;\n\n          if (d[_c2 + 2] === ' ') {\n            str += d[_c2 + 1];\n            break;\n          }\n\n          if (VOWELS.includes(d[_c2])) vowel++;\n          if (vowel && VOWELS.includes(d[_c2 + 2])) break;\n        }\n      }\n\n      if (i >= 0) {\n        f = d[i];\n        if (method === 'syl-to-syl') f = prev;\n      }\n\n      if (chain[f] === undefined) chain[f] = [];\n      chain[f].push(str);\n    }\n\n    return chain;\n  } // generate random name using Markov's chain\n\n\n  function generateName(culture, base) {\n    if (base === undefined) {\n      if (!cultures[culture]) {\n        console.error('culture ' + culture + ' is not defined. Will load default cultures and set first culture');\n        generateCultures();\n        culture = 0;\n      }\n\n      base = cultures[culture].base;\n    }\n\n    if (!nameBases[base]) {\n      console.error('nameBase ' + base + ' is not defined. Will load default names data and first base');\n      if (!nameBases[0]) applyDefaultNamesData();\n      base = 0;\n    }\n\n    var method = nameBases[base].method;\n\n    var error = function error(base) {\n      tip('Names data for base ' + nameBases[base].name + ' is incorrect. Please fix in Namesbase Editor');\n      editNamesbase();\n    };\n\n    if (method === 'selection') {\n      if (nameBase[base].length < 1) {\n        error(base);\n        return;\n      }\n\n      var rnd = _.random(nameBase[base].length - 1);\n\n      return nameBase[base][rnd];\n    }\n\n    var data = chain[base];\n\n    if (data === undefined || data[' '] === undefined) {\n      error(base);\n      return;\n    }\n\n    var max = nameBases[base].max;\n    var min = nameBases[base].min;\n    var d = nameBases[base].d;\n    var word = '',\n        variants = data[' '];\n\n    if (variants === undefined) {\n      error(base);\n      return;\n    }\n\n    var cur = variants[_.random(variants.length - 1)];\n\n    for (var i = 0; i < 21; i++) {\n      if (cur === ' ' && Math.random() < 0.8) {\n        // space means word end, but we don't want to end if word is too short\n        if (word.length < min) {\n          word = '';\n          variants = data[' '];\n        } else {\n          break;\n        }\n      } else {\n        var l = method === 'let-to-syl' && cur.length > 1 ? cur[cur.length - 1] : cur;\n        variants = data[l]; // word is getting too long, restart\n\n        word += cur; // add current el to word\n\n        if (word.length > max) word = '';\n      }\n\n      if (variants === undefined) {\n        error(base);\n        return;\n      }\n\n      cur = variants[_.random(variants.length - 1)];\n    } // very rare case, let's just select a random name\n\n\n    if (word.length < 2) word = nameBase[base][_.random(nameBase[base].length - 1)]; // do not allow multi-word name if word is foo short or not allowed for culture\n\n    if (word.includes(' ')) {\n      var words = word.split(' ');\n\n      if (Math.random() > nameBases[base].m) {\n        word = words.join('');\n      } else {\n        for (var _i2 = 0; _i2 < words.length; _i2++) {\n          if (words[_i2].length < 2) {\n            if (!_i2) words[1] = words[0] + words[1];\n            if (_i2) words[_i2 - 1] += words[_i2];\n            words.splice(_i2, 1);\n            _i2--;\n          }\n        }\n\n        word = words.join(' ');\n      }\n    } // parse word to get a final name\n\n\n    return _toConsumableArray(word).reduce(function (r, c, i, data) {\n      if (c === ' ') {\n        if (!r.length) return '';\n        if (i + 1 === data.length) return r;\n      }\n\n      if (!r.length) return c.toUpperCase();\n      if (r.slice(-1) === ' ') return r + c.toUpperCase();\n\n      if (c === data[i - 1]) {\n        if (!d.includes(c)) return r;\n        if (c === data[i - 2]) return r;\n      }\n\n      return r + c;\n    }, '');\n  } // Define areas based on the closest manor to a polygon\n\n\n  function defineRegions(withCultures) {\n    console.time('defineRegions');\n    var manorTree = d3.quadtree();\n    manors.forEach(function (m) {\n      if (m.region !== 'removed') manorTree.add([m.x, m.y]);\n    });\n    var neutral = +neutralInput.value;\n    land.forEach(function (i) {\n      if (i.manor !== undefined && manors[i.manor].region !== 'removed') {\n        i.region = manors[i.manor].region;\n        if (withCultures && manors[i.manor].culture !== undefined) i.culture = manors[i.manor].culture;\n        return;\n      }\n\n      var x = i.data[0],\n          y = i.data[1];\n      var dist = 100000,\n          manor = null;\n\n      if (manors.length) {\n        var c = manorTree.find(x, y);\n        dist = Math.hypot(c[0] - x, c[1] - y);\n        manor = getManorId(c);\n      }\n\n      if (dist > neutral / 2 || manor === null) {\n        i.region = 'neutral';\n\n        if (withCultures) {\n          var closestCulture = cultureTree.find(x, y);\n          i.culture = getCultureId(closestCulture);\n        }\n      } else {\n        var cell = manors[manor].cell;\n\n        if (cells[cell].fn !== i.fn) {\n          var minDist = dist * 3;\n          land.forEach(function (l) {\n            if (l.fn === i.fn && l.manor !== undefined) {\n              if (manors[l.manor].region === 'removed') return;\n              var distN = Math.hypot(l.data[0] - x, l.data[1] - y);\n\n              if (distN < minDist) {\n                minDist = distN;\n                manor = l.manor;\n              }\n            }\n          });\n        }\n\n        i.region = manors[manor].region;\n        if (withCultures) i.culture = manors[manor].culture;\n      }\n    });\n    console.timeEnd('defineRegions');\n  } // Define areas cells\n\n\n  function drawRegions() {\n    console.time('drawRegions');\n    labels.select('#countries').selectAll('*').remove(); // arrays to store edge data\n\n    var edges = [],\n        coastalEdges = [],\n        borderEdges = [],\n        neutralEdges = [];\n\n    for (var a = 0; a < states.length; a++) {\n      edges[a] = [];\n      coastalEdges[a] = [];\n    }\n\n    var e = diagram.edges;\n\n    for (var i = 0; i < e.length; i++) {\n      if (e[i] === undefined) continue;\n\n      var _start5 = e[i][0].join(' ');\n\n      var end = e[i][1].join(' ');\n      var p = {\n        start: _start5,\n        end: end\n      };\n\n      if (e[i].left === undefined) {\n        var _r = e[i].right.index;\n        var _rr = cells[_r].region;\n        if (_Number$isInteger(_rr)) edges[_rr].push(p);\n        continue;\n      }\n\n      if (e[i].right === undefined) {\n        var _l = e[i].left.index;\n        var _lr = cells[_l].region;\n        if (_Number$isInteger(_lr)) edges[_lr].push(p);\n        continue;\n      }\n\n      var l = e[i].left.index;\n      var r = e[i].right.index;\n      var lr = cells[l].region;\n      var rr = cells[r].region;\n      if (lr === rr) continue;\n\n      if (_Number$isInteger(lr)) {\n        edges[lr].push(p);\n\n        if (rr === undefined) {\n          coastalEdges[lr].push(p);\n        } else if (rr === 'neutral') {\n          neutralEdges.push(p);\n        }\n      }\n\n      if (_Number$isInteger(rr)) {\n        edges[rr].push(p);\n\n        if (lr === undefined) {\n          coastalEdges[rr].push(p);\n        } else if (lr === 'neutral') {\n          neutralEdges.push(p);\n        } else if (_Number$isInteger(lr)) {\n          borderEdges.push(p);\n        }\n      }\n    }\n\n    edges.map(function (e, i) {\n      if (e.length) {\n        drawRegion(e, i);\n        drawRegionCoast(coastalEdges[i], i);\n      }\n    });\n    drawBorders(borderEdges, 'state');\n    drawBorders(neutralEdges, 'neutral');\n    console.timeEnd('drawRegions');\n  }\n\n  function drawRegion(edges, region) {\n    var path = '';\n    var array = [];\n    lineGen.curve(d3.curveLinear);\n\n    var _loop23 = function _loop23() {\n      var edgesOrdered = []; // to store points in a correct order\n\n      var start = edges[0].start;\n      var end = edges[0].end;\n      edges.shift();\n      var spl = start.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n      spl = end.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n\n      for (var i = 0; end !== start && i < 2000; i++) {\n        var next = $.grep(edges, function (e) {\n          return e.start == end || e.end == end;\n        });\n\n        if (next.length > 0) {\n          if (next[0].start == end) {\n            end = next[0].end;\n          } else if (next[0].end == end) {\n            end = next[0].start;\n          }\n\n          spl = end.split(' ');\n          edgesOrdered.push({\n            scX: spl[0],\n            scY: spl[1]\n          });\n        }\n\n        var rem = edges.indexOf(next[0]);\n        edges.splice(rem, 1);\n      }\n\n      path += lineGen(edgesOrdered) + 'Z ';\n      array[array.length] = edgesOrdered.map(function (e) {\n        return [+e.scX, +e.scY];\n      });\n    };\n\n    while (edges.length > 2) {\n      _loop23();\n    }\n\n    var color = states[region].color;\n    regions.append('path').attr('d', round(path, 1)).attr('fill', color).attr('class', 'region' + region);\n    array.sort(function (a, b) {\n      return b.length - a.length;\n    });\n    var capital = states[region].capital; // add capital cell as a hole\n\n    if (!isNaN(capital)) {\n      var capitalCell = manors[capital].cell;\n      array.push(polygons[capitalCell]);\n    }\n\n    var name = states[region].name;\n    var c = polylabel(array, 1.0); // pole of inaccessibility\n\n    labels.select('#countries').append('text').attr('id', 'regionLabel' + region).attr('x', Math.round(c[0])).attr('y', Math.round(c[1])).text(name).on('click', editLabel);\n    states[region].area = Math.round(Math.abs(d3.polygonArea(array[0]))); // define region area\n  }\n\n  function drawRegionCoast(edges, region) {\n    var path = '';\n\n    var _loop24 = function _loop24() {\n      var edgesOrdered = []; // to store points in a correct order\n\n      var start = edges[0].start;\n      var end = edges[0].end;\n      edges.shift();\n      var spl = start.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n      spl = end.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n      var next = $.grep(edges, function (e) {\n        return e.start == end || e.end == end;\n      });\n\n      while (next.length > 0) {\n        if (next[0].start == end) {\n          end = next[0].end;\n        } else if (next[0].end == end) {\n          end = next[0].start;\n        }\n\n        spl = end.split(' ');\n        edgesOrdered.push({\n          scX: spl[0],\n          scY: spl[1]\n        });\n        var rem = edges.indexOf(next[0]);\n        edges.splice(rem, 1);\n        next = $.grep(edges, function (e) {\n          return e.start == end || e.end == end;\n        });\n      }\n\n      path += lineGen(edgesOrdered);\n    };\n\n    while (edges.length > 0) {\n      _loop24();\n    }\n\n    var color = states[region].color;\n    regions.append('path').attr('d', round(path, 1)).attr('fill', 'none').attr('stroke', color).attr('stroke-width', 5).attr('class', 'region' + region);\n  }\n\n  function drawBorders(edges, type) {\n    var path = '';\n\n    if (edges.length < 1) {\n      return;\n    }\n\n    var _loop25 = function _loop25() {\n      var edgesOrdered = []; // to store points in a correct order\n\n      var start = edges[0].start;\n      var end = edges[0].end;\n      edges.shift();\n      var spl = start.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n      spl = end.split(' ');\n      edgesOrdered.push({\n        scX: spl[0],\n        scY: spl[1]\n      });\n      var next = $.grep(edges, function (e) {\n        return e.start == end || e.end == end;\n      });\n\n      while (next.length > 0) {\n        if (next[0].start == end) {\n          end = next[0].end;\n        } else if (next[0].end == end) {\n          end = next[0].start;\n        }\n\n        spl = end.split(' ');\n        edgesOrdered.push({\n          scX: spl[0],\n          scY: spl[1]\n        });\n        var rem = edges.indexOf(next[0]);\n        edges.splice(rem, 1);\n        next = $.grep(edges, function (e) {\n          return e.start == end || e.end == end;\n        });\n      }\n\n      path += lineGen(edgesOrdered);\n    };\n\n    while (edges.length > 0) {\n      _loop25();\n    }\n\n    if (type === 'state') {\n      stateBorders.append('path').attr('d', round(path, 1));\n    }\n\n    if (type === 'neutral') {\n      neutralBorders.append('path').attr('d', round(path, 1));\n    }\n  } // generate region name\n\n\n  function generateStateName(state) {\n    var culture = null;\n    if (states[state]) if (manors[states[state].capital]) culture = manors[states[state].capital].culture;\n    var name = 'NameIdontWant';\n\n    if (Math.random() < 0.85 || culture === null) {\n      // culture is random if capital is not yet defined\n      if (culture === null) culture = _.random(cultures.length - 1); // try to avoid too long words as a basename\n\n      for (var i = 0; i < 20 && name.length > 7; i++) {\n        name = generateName(culture);\n      }\n    } else {\n      name = manors[state].name;\n    }\n\n    var base = cultures[culture].base;\n    var addSuffix = false; // handle special cases\n\n    var e = name.slice(-2);\n\n    if (base === 5 && (e === 'sk' || e === 'ev' || e === 'ov')) {\n      // remove -sk and -ev/-ov for Ruthenian\n      name = name.slice(0, -2);\n      addSuffix = true;\n    } else if (name.length > 5 && base === 1 && name.slice(-3) === 'ton') {\n      // remove -ton ending for English\n      name = name.slice(0, -3);\n      addSuffix = true;\n    } else if (name.length > 6 && name.slice(-4) === 'berg') {\n      // remove -berg ending for any\n      name = name.slice(0, -4);\n      addSuffix = true;\n    } else if (base === 12) {\n      // Japanese ends on vowels\n      if (VOWELS.includes(name.slice(-1))) return name;\n      return name + 'u';\n    } else if (base === 10) {\n      // Korean has \"guk\" suffix\n      if (name.slice(-3) === 'guk') return name;\n      if (name.slice(-1) === 'g') name = name.slice(0, -1);\n      if (Math.random() < 0.2 && name.length < 7) name = name + 'guk'; // 20% for \"guk\"\n\n      return name;\n    } else if (base === 11) {\n      // Chinese has \"guo\" suffix\n      if (name.slice(-3) === 'guo') return name;\n      if (name.slice(-1) === 'g') name = name.slice(0, -1);\n      if (Math.random() < 0.3 && name.length < 7) name = name + ' Guo'; // 30% for \"guo\"\n\n      return name;\n    } // define if suffix should be used\n\n\n    var vowel = VOWELS.includes(name.slice(-1)); // last char is vowel\n\n    if (vowel && name.length > 3) {\n      if (Math.random() < 0.85) {\n        if (VOWELS.includes(name.slice(-2, -1))) {\n          name = name.slice(0, -2);\n          addSuffix = true; // 85% for vv\n        } else if (Math.random() < 0.7) {\n          name = name.slice(0, -1);\n          addSuffix = true; // ~60% for cv\n        }\n      }\n    } else if (Math.random() < 0.6) {\n      addSuffix = true; // 60% for cc and vc\n    }\n\n    if (addSuffix === false) return name;\n    var suffix = 'ia'; // common latin suffix\n\n    var rnd = Math.random();\n    if (rnd < 0.05 && base === 3) suffix = 'terra'; // 5% \"terra\" for Italian\n    else if (rnd < 0.05 && base === 4) suffix = 'terra'; // 5% \"terra\" for Spanish\n      else if (rnd < 0.05 && base == 2) suffix = 'terre'; // 5% \"terre\" for French\n        else if (rnd < 0.5 && base == 0) suffix = 'land'; // 50% \"land\" for German\n          else if (rnd < 0.4 && base == 1) suffix = 'land'; // 40% \"land\" for English\n            else if (rnd < 0.3 && base == 6) suffix = 'land'; // 30% \"land\" for Nordic\n              else if (rnd < 0.1 && base == 7) suffix = 'eia'; // 10% \"eia\" for Greek (\"ia\" is also Greek)\n                else if (rnd < 0.4 && base == 9) suffix = 'maa'; // 40% \"maa\" for Finnic\n\n    if (name.slice(-1 * suffix.length) === suffix) return name; // no suffix if name already ends with it\n\n    if (name.slice(-1) === suffix.charAt(0)) name = name.slice(0, -1); // remove name last letter if it's a suffix first letter\n\n    return name + suffix;\n  } // re-calculate cultures\n\n\n  function recalculateCultures(fullRedraw) {\n    console.time('recalculateCultures'); // For each capital find closest culture and assign it to capital\n\n    states.forEach(function (s) {\n      if (s.capital === 'neutral' || s.capital === 'select') return;\n      var capital = manors[s.capital];\n      var c = cultureTree.find(capital.x, capital.y);\n      capital.culture = getCultureId(c);\n    }); // For each town if distance to its capital > neutral / 2,\n    // assign closest culture to the town; else assign capital's culture\n\n    var manorTree = d3.quadtree();\n    var neutral = +neutralInput.value;\n    manors.forEach(function (m) {\n      if (m.region === 'removed') return;\n      manorTree.add([m.x, m.y]);\n\n      if (m.region === 'neutral') {\n        var _culture2 = cultureTree.find(m.x, m.y);\n\n        m.culture = getCultureId(_culture2);\n        return;\n      }\n\n      var c = states[m.region].capital;\n\n      if (c !== 'neutral' && c !== 'select') {\n        var dist = Math.hypot(m.x - manors[c].x, m.y - manors[c].y);\n\n        if (dist <= neutral / 5) {\n          m.culture = manors[c].culture;\n          return;\n        }\n      }\n\n      var culture = cultureTree.find(m.x, m.y);\n      m.culture = getCultureId(culture);\n    }); // For each land cell if distance to closest manor > neutral / 2,\n    // assign closest culture to the cell; else assign manors's culture\n\n    var changed = [];\n    land.forEach(function (i) {\n      var x = i.data[0],\n          y = i.data[1];\n      var c = manorTree.find(x, y);\n      var culture = i.culture;\n      var dist = Math.hypot(c[0] - x, c[1] - y);\n      var manor = getManorId(c);\n\n      if (dist > neutral / 2 || manor === undefined) {\n        var closestCulture = cultureTree.find(i.data[0], i.data[1]);\n        i.culture = getCultureId(closestCulture);\n      } else {\n        var cell = manors[manor].cell;\n\n        if (cells[cell].fn !== i.fn) {\n          var minDist = dist * 3;\n          land.forEach(function (l) {\n            if (l.fn === i.fn && l.manor !== undefined) {\n              if (manors[l.manor].region === 'removed') return;\n              var distN = Math.hypot(l.data[0] - x, l.data[1] - y);\n\n              if (distN < minDist) {\n                minDist = distN;\n                manor = l.manor;\n              }\n            }\n          });\n        }\n\n        i.culture = manors[manor].culture;\n      } // re-color cells\n\n\n      if (i.culture !== culture || fullRedraw) {\n        var clr = cultures[i.culture].color;\n        cults.select('#cult' + i.index).attr('fill', clr).attr('stroke', clr);\n      }\n    });\n    console.timeEnd('recalculateCultures');\n  } // get culture Id from center coordinates\n\n\n  function getCultureId(c) {\n    for (var i = 0; i < cultures.length; i++) {\n      if (cultures[i].center[0] === c[0]) if (cultures[i].center[1] === c[1]) return i;\n    }\n  } // get manor Id from center coordinates\n\n\n  function getManorId(c) {\n    for (var i = 0; i < manors.length; i++) {\n      if (manors[i].x === c[0]) if (manors[i].y === c[1]) return i;\n    }\n  } // focus on coorditanes, cell or burg provided in searchParams\n\n\n  function focusOn() {\n    if (params.get('from') === 'MFCG') {\n      // focus on burg from MFCG\n      findBurgForMFCG();\n      return;\n    }\n\n    var s = params.get('scale') || 8;\n    var x = params.get('x');\n    var y = params.get('y');\n    var c = params.get('cell');\n\n    if (c !== null) {\n      x = cells[+c].data[0];\n      y = cells[+c].data[1];\n    }\n\n    var b = params.get('burg');\n\n    if (b !== null) {\n      x = manors[+b].x;\n      y = manors[+b].y;\n    }\n\n    if (x !== null && y !== null) zoomTo(x, y, s, 1600);\n  } // find burg from MFCG and focus on it\n\n\n  function findBurgForMFCG() {\n    if (!manors.length) {\n      console.error('No burgs generated. Cannot select a burg for MFCG');\n      return;\n    }\n\n    var size = +params.get('size');\n    var coast = +params.get('coast');\n    var port = +params.get('port');\n    var river = +params.get('river');\n    var selection = defineSelection(coast, port, river);\n    if (!selection.length) selection = defineSelection(coast, !port, !river);\n    if (!selection.length) selection = defineSelection(!coast, 0, !river);\n    if (!selection.length) selection = manors[0]; // select first if nothing is found\n\n    if (!selection.length) {\n      console.error('Cannot find a burg for MFCG');\n      return;\n    }\n\n    function defineSelection(coast, port, river) {\n      var selection = [];\n      if (port && river) selection = $.grep(manors, function (e) {\n        return cells[e.cell].port !== undefined && cells[e.cell].river !== undefined;\n      });else if (!port && coast && river) selection = $.grep(manors, function (e) {\n        return cells[e.cell].port === undefined && cells[e.cell].ctype === 1 && cells[e.cell].river !== undefined;\n      });else if (!coast && !river) selection = $.grep(manors, function (e) {\n        return cells[e.cell].ctype !== 1 && cells[e.cell].river === undefined;\n      });else if (!coast && river) selection = $.grep(manors, function (e) {\n        return cells[e.cell].ctype !== 1 && cells[e.cell].river !== undefined;\n      });else if (coast && !river) selection = $.grep(manors, function (e) {\n        return cells[e.cell].ctype === 1 && cells[e.cell].river === undefined;\n      });\n      return selection;\n    } // select a burg with closes population from selection\n\n\n    var selected = d3.scan(selection, function (a, b) {\n      return Math.abs(a.population - size) - Math.abs(b.population - size);\n    });\n    var burg = selection[selected].i;\n\n    if (size && burg !== undefined) {\n      manors[burg].population = size;\n    } else {\n      return;\n    } // focus on found burg\n\n\n    var label = burgLabels.select('[data-id=\\'' + burg + '\\']');\n\n    if (!label.size()) {\n      console.error('Cannot find a label for MFCG burg ' + burg);\n      return;\n    }\n\n    tip('Here stands the glorious city of ' + manors[burg].name, true);\n    label.classed('drag', true).on('mouseover', function () {\n      d3.select(this).classed('drag', false);\n      tip('', true);\n    });\n    var x = +label.attr('x'),\n        y = +label.attr('y');\n    zoomTo(x, y, 8, 1600);\n  } // draw Cultures\n\n\n  function toggleCultures() {\n    if (cults.selectAll('path').size() == 0) {\n      land.map(function (i) {\n        var color = cultures[i.culture].color;\n        cults.append('path').attr('d', 'M' + polygons[i.index].join('L') + 'Z').attr('id', 'cult' + i.index).attr('fill', color).attr('stroke', color);\n      });\n    } else {\n      cults.selectAll('path').remove();\n    }\n  } // clean data to get rid of redundand info\n\n\n  function cleanData() {\n    console.time('cleanData');\n    cells.map(function (c) {\n      delete c.cost;\n      delete c.used;\n      delete c.coastX;\n      delete c.coastY;\n      if (c.ctype === undefined) delete c.ctype;\n      if (c.lake === undefined) delete c.lake;\n      c.height = Math.trunc(c.height);\n      if (c.height >= 20) c.flux = _.round(c.flux, 2);\n    }); // restore layers if they was turned on\n\n    if (!$('#toggleHeight').hasClass('buttonoff') && !terrs.selectAll('path').size()) _toggleHeight();\n    if (!$('#toggleCultures').hasClass('buttonoff') && !cults.selectAll('path').size()) toggleCultures();\n    closeDialogs();\n    invokeActiveZooming();\n    console.timeEnd('cleanData');\n  } // close all dialogs except stated\n\n\n  function closeDialogs(except) {\n    except = except || '#except';\n    $('.dialog:visible').not(except).each(function (e) {\n      $(this).dialog('close');\n    });\n  } // change transparency for modal windowa\n\n\n  function changeDialogsTransparency(v) {\n    localStorage.setItem('transparency', v);\n    var alpha = (100 - +v) / 100;\n    var optionsColor = 'rgba(164, 139, 149, ' + alpha + ')'; // purple-red\n\n    var dialogsColor = 'rgba(255, 255, 255, ' + alpha + ')'; // white\n\n    document.getElementById('options').style.backgroundColor = optionsColor;\n    document.getElementById('dialogs').style.backgroundColor = dialogsColor;\n  } // Draw the water flux system (for dubugging)\n\n\n  function toggleFlux() {\n    var colorFlux = d3.scaleSequential(d3chromatic.interpolateBlues);\n\n    if (terrs.selectAll('path').size() == 0) {\n      land.map(function (i) {\n        terrs.append('path').attr('d', 'M' + polygons[i.index].join('L') + 'Z').attr('fill', colorFlux(0.1 + i.flux)).attr('stroke', colorFlux(0.1 + i.flux));\n      });\n    } else {\n      terrs.selectAll('path').remove();\n    }\n  } // Draw the Relief (need to create more beautiness)\n\n\n  function drawRelief() {\n    console.time('drawRelief');\n    var h,\n        count,\n        rnd,\n        cx,\n        cy,\n        swampCount = 0;\n    var hills = terrain.select('#hills');\n    var mounts = terrain.select('#mounts');\n    var swamps = terrain.select('#swamps');\n    var forests = terrain.select('#forests');\n    terrain.selectAll('g').selectAll('g').remove(); // sort the land to Draw the top element first (reduce the elements overlapping)\n\n    land.sort(compareY);\n\n    for (var i = 0; i < land.length; i++) {\n      if (land[i].river) continue; // no icons on rivers\n\n      var cell = land[i].index;\n      var p = d3.polygonCentroid(polygons[cell]); // polygon centroid point\n\n      if (p === undefined) continue; // something is wrong with data\n\n      var height = land[i].height;\n      var area = land[i].area;\n\n      if (height >= 70) {\n        // mount icon\n        h = (height - 55) * 0.12;\n\n        for (var c = 0, a = area; Math.random() < a / 50; c++, a -= 50) {\n          if (polygons[cell][c] === undefined) break;\n          var g = mounts.append('g').attr('data-cell', cell);\n\n          if (c < 2) {\n            cx = p[0] - h / 100 * (1 - c / 10) - c * 2;\n            cy = p[1] + h / 400 + c;\n          } else {\n            var p2 = polygons[cell][c];\n            cx = (p[0] * 1.2 + p2[0] * 0.8) / 2;\n            cy = (p[1] * 1.2 + p2[1] * 0.8) / 2;\n          }\n\n          rnd = Math.random() * 0.8 + 0.2;\n          var mount = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h + rnd) + ',' + (cy - h / 1.2 + rnd) + ' L' + (cx + h * 2) + ',' + cy;\n          var shade = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h / 1.5) + ',' + cy;\n          var dash = 'M' + (cx - 0.1) + ',' + (cy + 0.3) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.3);\n          dash += 'M' + (cx + 0.4) + ',' + (cy + 0.6) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.6);\n          g.append('path').attr('d', round(mount, 1)).attr('stroke', '#5c5c70');\n          g.append('path').attr('d', round(shade, 1)).attr('fill', '#999999');\n          g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes');\n        }\n      } else if (height > 50) {\n        // hill icon\n        h = (height - 40) / 10;\n        if (h > 1.7) h = 1.7;\n\n        for (var _c3 = 0, _a = area; Math.random() < _a / 30; _c3++, _a -= 30) {\n          if (land[i].ctype === 1 && _c3 > 0) break;\n          if (polygons[cell][_c3] === undefined) break;\n\n          var _g = hills.append('g').attr('data-cell', cell);\n\n          if (_c3 < 2) {\n            cx = p[0] - h - _c3 * 1.2;\n            cy = p[1] + h / 4 + _c3 / 1.6;\n          } else {\n            var _p2 = polygons[cell][_c3];\n            cx = (p[0] * 1.2 + _p2[0] * 0.8) / 2;\n            cy = (p[1] * 1.2 + _p2[1] * 0.8) / 2;\n          }\n\n          var hill = 'M' + cx + ',' + cy + ' Q' + (cx + h) + ',' + (cy - h) + ' ' + (cx + 2 * h) + ',' + cy;\n\n          var _shade = 'M' + (cx + 0.6 * h) + ',' + (cy + 0.1) + ' Q' + (cx + h * 0.95) + ',' + (cy - h * 0.91) + ' ' + (cx + 2 * h * 0.97) + ',' + cy;\n\n          var _dash = 'M' + (cx - 0.1) + ',' + (cy + 0.2) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.2);\n\n          _dash += 'M' + (cx + 0.4) + ',' + (cy + 0.4) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.4);\n\n          _g.append('path').attr('d', round(hill, 1)).attr('stroke', '#5c5c70');\n\n          _g.append('path').attr('d', round(_shade, 1)).attr('fill', 'white');\n\n          _g.append('path').attr('d', round(_dash, 1)).attr('class', 'strokes');\n        }\n      } // swamp icons\n\n\n      if (height >= 21 && height < 22 && swampCount < +swampinessInput.value && land[i].used != 1) {\n        var _g2 = swamps.append('g').attr('data-cell', cell);\n\n        swampCount++;\n        land[i].used = 1;\n        var swamp = drawSwamp(p[0], p[1]);\n        land[i].neighbors.forEach(function (e) {\n          if (cells[e].height >= 20 && cells[e].height < 30 && !cells[e].river && cells[e].used != 1) {\n            cells[e].used = 1;\n            swamp += drawSwamp(cells[e].data[0], cells[e].data[1]);\n          }\n        });\n\n        _g2.append('path').attr('d', round(swamp, 1));\n      } // forest icons\n\n\n      if (Math.random() < height / 100 && height >= 22 && height < 48) {\n        for (var _c4 = 0, _a2 = area; Math.random() < _a2 / 15; _c4++, _a2 -= 15) {\n          if (land[i].ctype === 1 && _c4 > 0) break;\n          if (polygons[cell][_c4] === undefined) break;\n\n          var _g3 = forests.append('g').attr('data-cell', cell);\n\n          if (_c4 === 0) {\n            cx = _.round(p[0] - 1 - Math.random(), 1);\n            cy = p[1] - 2;\n          } else {\n            var _p3 = polygons[cell][_c4];\n\n            if (_c4 > 1) {\n              var dist = Math.hypot(_p3[0] - polygons[cell][_c4 - 1][0], _p3[1] - polygons[cell][_c4 - 1][1]);\n              if (dist < 2) continue;\n            }\n\n            cx = (p[0] * 0.5 + _p3[0] * 1.5) / 2;\n            cy = (p[1] * 0.5 + _p3[1] * 1.5) / 2 - 1;\n          }\n\n          var forest = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 v0.75 h0.1 v-0.75 q0.95,-0.47 -0.05,-1.25 z ';\n          var light = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 h0.1 q0.95,-0.47 -0.05,-1.25 z ';\n\n          var _shade2 = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 q-0.2,-0.55 0,-1.1 z ';\n\n          _g3.append('path').attr('d', forest);\n\n          _g3.append('path').attr('d', light).attr('fill', 'white').attr('stroke', 'none');\n\n          _g3.append('path').attr('d', _shade2).attr('fill', '#999999').attr('stroke', 'none');\n        }\n      }\n    }\n\n    terrain.selectAll('g').selectAll('g').on('click', editReliefIcon);\n    console.timeEnd('drawRelief');\n  }\n\n  function addReliefIcon(height, type, cx, cy, cell) {\n    var g = terrain.select('#' + type).append('g').attr('data-cell', cell);\n\n    if (type === 'mounts') {\n      var h = height >= 0.7 ? (height - 0.55) * 12 : 1.8;\n      var rnd = Math.random() * 0.8 + 0.2;\n      var mount = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h + rnd) + ',' + (cy - h / 1.2 + rnd) + ' L' + (cx + h * 2) + ',' + cy;\n      var shade = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h / 1.5) + ',' + cy;\n      var dash = 'M' + (cx - 0.1) + ',' + (cy + 0.3) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.3);\n      dash += 'M' + (cx + 0.4) + ',' + (cy + 0.6) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.6);\n      g.append('path').attr('d', round(mount, 1)).attr('stroke', '#5c5c70');\n      g.append('path').attr('d', round(shade, 1)).attr('fill', '#999999');\n      g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes');\n    }\n\n    if (type === 'hills') {\n      var _h = height > 0.5 ? (height - 0.4) * 10 : 1.2;\n\n      if (_h > 1.8) _h = 1.8;\n      var hill = 'M' + cx + ',' + cy + ' Q' + (cx + _h) + ',' + (cy - _h) + ' ' + (cx + 2 * _h) + ',' + cy;\n\n      var _shade3 = 'M' + (cx + 0.6 * _h) + ',' + (cy + 0.1) + ' Q' + (cx + _h * 0.95) + ',' + (cy - _h * 0.91) + ' ' + (cx + 2 * _h * 0.97) + ',' + cy;\n\n      var _dash2 = 'M' + (cx - 0.1) + ',' + (cy + 0.2) + ' L' + (cx + 2 * _h + 0.1) + ',' + (cy + 0.2);\n\n      _dash2 += 'M' + (cx + 0.4) + ',' + (cy + 0.4) + ' L' + (cx + 2 * _h - 0.3) + ',' + (cy + 0.4);\n      g.append('path').attr('d', round(hill, 1)).attr('stroke', '#5c5c70');\n      g.append('path').attr('d', round(_shade3, 1)).attr('fill', 'white');\n      g.append('path').attr('d', round(_dash2, 1)).attr('class', 'strokes');\n    }\n\n    if (type === 'swamps') {\n      var swamp = drawSwamp(cx, cy);\n      g.append('path').attr('d', round(swamp, 1));\n    }\n\n    if (type === 'forests') {\n      var _rnd2 = Math.random();\n\n      var _h2 = _rnd2 * 0.4 + 0.6;\n\n      var forest = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 v0.75 h0.1 v-0.75 q0.95,-0.47 -0.05,-1.25 z ';\n      var light = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 h0.1 q0.95,-0.47 -0.05,-1.25 z ';\n\n      var _shade4 = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 q-0.2,-0.55 0,-1.1 z ';\n\n      g.append('path').attr('d', forest);\n      g.append('path').attr('d', light).attr('fill', 'white').attr('stroke', 'none');\n      g.append('path').attr('d', _shade4).attr('fill', '#999999').attr('stroke', 'none');\n    }\n\n    g.on('click', editReliefIcon);\n    return g;\n  }\n\n  function compareY(a, b) {\n    if (a.data[1] > b.data[1]) return 1;\n    if (a.data[1] < b.data[1]) return -1;\n    return 0;\n  }\n\n  function drawSwamp(x, y) {\n    var h = 0.6;\n    var line = '';\n\n    for (var c = 0; c < 3; c++) {\n      var cx = void 0;\n      var cy = void 0;\n\n      if (c == 0) {\n        cx = x;\n        cy = y - 0.5 - Math.random();\n      }\n\n      if (c == 1) {\n        cx = x + h + Math.random();\n        cy = y + h + Math.random();\n      }\n\n      if (c == 2) {\n        cx = x - h - Math.random();\n        cy = y + 2 * h + Math.random();\n      }\n\n      line += 'M' + cx + ',' + cy + ' H' + (cx - h / 6) + ' M' + cx + ',' + cy + ' H' + (cx + h / 6) + ' M' + cx + ',' + cy + ' L' + (cx - h / 3) + ',' + (cy - h / 2) + ' M' + cx + ',' + cy + ' V' + (cy - h / 1.5) + ' M' + cx + ',' + cy + ' L' + (cx + h / 3) + ',' + (cy - h / 2);\n      line += 'M' + (cx - h) + ',' + cy + ' H' + (cx - h / 2) + ' M' + (cx + h / 2) + ',' + cy + ' H' + (cx + h);\n    }\n\n    return line;\n  } // Complete the map for the \"customize\" mode\n\n\n  function getMap() {\n    if (customization !== 1) {\n      tip('Nothing to complete! Click on \"Edit\" or \"Clear all\" to enter a heightmap customization mode', null, 'error');\n      return;\n    }\n\n    if (+landmassCounter.innerHTML < 150) {\n      tip('Insufficient land area! Please add more land cells to complete the map', null, 'error');\n      return;\n    }\n\n    exitCustomization();\n    console.time('TOTAL');\n    markFeatures();\n    drawOcean();\n    elevateLakes();\n    resolveDepressionsPrimary();\n    reGraph();\n    resolveDepressionsSecondary();\n    flux();\n    addLakes();\n    if (!changeHeights.checked) restoreCustomHeights();\n    drawCoastline();\n    drawRelief();\n    var keepData = states.length && manors.length;\n\n    if (keepData) {\n      restoreRegions();\n    } else {\n      generateCultures();\n      manorsAndRegions();\n    }\n\n    cleanData();\n    console.timeEnd('TOTAL');\n  } // Add support \"click to add\" button events\n\n\n  $('#customizeTab').click(clickToAdd);\n\n  function clickToAdd() {\n    if (modules.clickToAdd) return;\n    modules.clickToAdd = true; // add label on click\n\n    $('#addLabel').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        restoreDefaultEvents();\n      } else {\n        $('.pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        closeDialogs('.stable');\n        viewbox.style('cursor', 'crosshair').on('click', addLabelOnClick);\n      }\n    });\n\n    function addLabelOnClick() {\n      var point = d3.mouse(this);\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2); // get culture in clicked point to generate a name\n\n\n      var closest = cultureTree.find(x, y);\n      var culture = cultureTree.data().indexOf(closest) || 0;\n      var name = generateName(culture);\n      var group = labels.select('#addedLabels');\n\n      if (!group.size()) {\n        group = labels.append('g').attr('id', 'addedLabels').attr('fill', '#3e3e4b').attr('opacity', 1).attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC').attr('font-size', 18).attr('data-size', 18);\n      }\n\n      var id = 'label' + _Date$now().toString().slice(7);\n\n      group.append('text').attr('id', id).attr('x', x).attr('y', y).text(name).on('click', editLabel);\n\n      if (d3.event.shiftKey === false) {\n        $('#addLabel').removeClass('pressed');\n        restoreDefaultEvents();\n      }\n    } // add burg on click\n\n\n    $('#addBurg').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        restoreDefaultEvents();\n        tip('', true);\n      } else {\n        $('.pressed').removeClass('pressed');\n        $(this).attr('data-state', -1).addClass('pressed');\n        $('#burgAdd, #burgAddfromEditor').addClass('pressed');\n        viewbox.style('cursor', 'crosshair').on('click', addBurgOnClick);\n        tip('Click on map to place burg icon with a label. Hold Shift to place several', true);\n      }\n    });\n\n    function addBurgOnClick() {\n      var point = d3.mouse(this);\n      var index = getIndex(point);\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2); // get culture in clicked point to generate a name\n\n\n      var culture = cells[index].culture;\n      if (culture === undefined) culture = 0;\n      var name = generateName(culture);\n\n      if (cells[index].height < 20) {\n        tip('Cannot place burg in the water! Select a land cell', null, 'error');\n        return;\n      }\n\n      if (cells[index].manor !== undefined) {\n        tip('There is already a burg in this cell. Please select a free cell', null, 'error');\n        $('#grid').fadeIn();\n        d3.select('#toggleGrid').classed('buttonoff', false);\n        return;\n      }\n\n      var i = manors.length;\n      var size = burgIcons.select('#towns').attr('size');\n      burgIcons.select('#towns').append('circle').attr('id', 'burg' + i).attr('data-id', i).attr('cx', x).attr('cy', y).attr('r', size).on('click', editBurg);\n      burgLabels.select('#towns').append('text').attr('data-id', i).attr('x', x).attr('y', y).attr('dy', '-0.35em').text(name).on('click', editBurg);\n      invokeActiveZooming();\n\n      if (d3.event.shiftKey === false) {\n        $('#addBurg, #burgAdd, #burgAddfromEditor').removeClass('pressed');\n        restoreDefaultEvents();\n      }\n\n      var region,\n          state = +$('#addBurg').attr('data-state');\n\n      if (state !== -1) {\n        region = states[state].capital === 'neutral' ? 'neutral' : state;\n        var oldRegion = cells[index].region;\n\n        if (region !== oldRegion) {\n          cells[index].region = region;\n          redrawRegions();\n        }\n      } else {\n        region = cells[index].region;\n        state = region === 'neutral' ? states.length - 1 : region;\n      }\n\n      cells[index].manor = i;\n      var score = cells[index].score;\n\n      if (score <= 0) {\n        score = _.round(Math.random(), 2);\n      }\n\n      if (cells[index].crossroad) {\n        score += cells[index].crossroad;\n      } // crossroads\n\n\n      if (cells[index].confluence) {\n        score += Math.pow(cells[index].confluence, 0.3);\n      } // confluences\n\n\n      if (cells[index].port !== undefined) {\n        score *= 3;\n      } // port-capital\n\n\n      var population = _.round(score, 1);\n\n      manors.push({\n        i: i,\n        cell: index,\n        x: x,\n        y: y,\n        region: region,\n        culture: culture,\n        name: name,\n        population: population\n      });\n      recalculateStateData(state);\n      updateCountryEditors();\n      tip('', true);\n    } // add river on click\n\n\n    $('#addRiver').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        unselect();\n      } else {\n        $('.pressed').removeClass('pressed');\n        unselect();\n        $(this).addClass('pressed');\n        closeDialogs('.stable');\n        viewbox.style('cursor', 'crosshair').on('click', addRiverOnClick);\n        tip('Click on map to place new river or extend an existing one', true);\n      }\n    });\n\n    function addRiverOnClick() {\n      var point = d3.mouse(this);\n      var index = diagram.find(point[0], point[1]).index;\n      var cell = cells[index];\n      if (cell.river || cell.height < 20) return;\n      var dataRiver = []; // to store river points\n\n      var last = $('#rivers > path').last();\n      var river = last.length ? +last.attr('id').slice(5) + 1 : 0;\n      cell.flux = 0.85;\n\n      var _loop26 = function _loop26() {\n        cell.river = river;\n        var x = cell.data[0],\n            y = cell.data[1];\n        dataRiver.push({\n          x: x,\n          y: y,\n          cell: index\n        });\n        var nHeights = [];\n        cell.neighbors.forEach(function (e) {\n          nHeights.push(cells[e].height);\n        });\n        var minId = nHeights.indexOf(d3.min(nHeights));\n        var min = cell.neighbors[minId];\n        var tx = cells[min].data[0],\n            ty = cells[min].data[1];\n\n        if (cells[min].height < 20) {\n          var px = (x + tx) / 2;\n          var py = (y + ty) / 2;\n          dataRiver.push({\n            x: px,\n            y: py,\n            cell: index\n          });\n          cell = undefined;\n        } else {\n          if (cells[min].river === undefined) {\n            cells[min].flux += cell.flux;\n            cell = cells[min];\n          } else {\n            var r = cells[min].river;\n            var riverEl = $('#river' + r);\n            var riverCells = $.grep(land, function (e) {\n              return e.river === r;\n            });\n            riverCells.sort(function (a, b) {\n              return b.height - a.height;\n            });\n            var riverCellsUpper = $.grep(riverCells, function (e) {\n              return e.height > cells[min].height;\n            });\n\n            if (dataRiver.length > riverCellsUpper.length) {\n              // new river is more perspective\n              var avPrec = _.round(precInput.value / Math.sqrt(cells.length), 2);\n\n              var dataRiverMin = [];\n              riverCells.map(function (c) {\n                if (c.height < cells[min].height) {\n                  cells[c.index].river = undefined;\n                  cells[c.index].flux = avPrec;\n                } else {\n                  dataRiverMin.push({\n                    x: c.data[0],\n                    y: c.data[1],\n                    cell: c.index\n                  });\n                }\n              });\n              cells[min].flux += cell.flux;\n\n              if (cells[min].confluence) {\n                cells[min].confluence += riverCellsUpper.length;\n              } else {\n                cells[min].confluence = riverCellsUpper.length;\n              }\n\n              cell = cells[min]; // redraw old river's upper part or remove if small\n\n              if (dataRiverMin.length > 1) {\n                riverAmended = amendRiver(dataRiverMin, 1);\n                d = drawRiver(riverAmended, 1.3, 1);\n                riverEl.attr('d', d).attr('data-width', 1.3).attr('data-increment', 1);\n              } else {\n                riverEl.remove();\n                dataRiverMin.map(function (c) {\n                  cells[c.cell].river = undefined;\n                });\n              }\n            } else {\n              if (cells[min].confluence) {\n                cells[min].confluence += dataRiver.length;\n              } else {\n                cells[min].confluence = dataRiver.length;\n              }\n\n              cells[min].flux += cell.flux;\n              dataRiver.push({\n                x: tx,\n                y: ty,\n                cell: min\n              });\n              cell = undefined;\n            }\n          }\n        }\n      };\n\n      while (cell) {\n        var riverAmended;\n        var d;\n\n        _loop26();\n      }\n\n      var rndFactor = 0.2 + Math.random() * 1.6; // random factor in range 0.2-1.8\n\n      var riverAmended = amendRiver(dataRiver, rndFactor);\n      var d = drawRiver(riverAmended, 1.3, 1);\n      rivers.append('path').attr('d', d).attr('id', 'river' + river).attr('data-width', 1.3).attr('data-increment', 1).on('click', editRiver);\n    } // add relief icon on click\n\n\n    $('#addRelief').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        restoreDefaultEvents();\n      } else {\n        $('.pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        closeDialogs('.stable');\n        viewbox.style('cursor', 'crosshair').on('click', addReliefOnClick);\n        tip('Click on map to place relief icon. Hold Shift to place several', true);\n      }\n    });\n\n    function addReliefOnClick() {\n      var point = d3.mouse(this);\n      var index = getIndex(point);\n      var height = cells[index].height;\n\n      if (height < 20) {\n        tip('Cannot place icon in the water! Select a land cell');\n        return;\n      }\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2);\n\n      var type = reliefGroup.value;\n      addReliefIcon(height / 100, type, x, y, index);\n\n      if (d3.event.shiftKey === false) {\n        $('#addRelief').removeClass('pressed');\n        restoreDefaultEvents();\n      }\n\n      tip('', true);\n    } // add route on click\n\n\n    $('#addRoute').click(function () {\n      if (!modules.editRoute) editRoute();\n      $('#routeNew').click();\n    }); // add marker on click\n\n    $('#addMarker').click(function () {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed');\n        restoreDefaultEvents();\n      } else {\n        $('.pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        $('#markerAdd').addClass('pressed');\n        viewbox.style('cursor', 'crosshair').on('click', addMarkerOnClick);\n      }\n    });\n\n    function addMarkerOnClick() {\n      var point = d3.mouse(this);\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2);\n\n      var selected = markerSelectGroup.value;\n      var valid = selected && d3.select('#defs-markers').select('#' + selected).size() === 1;\n      var symbol = valid ? '#' + selected : '#marker0';\n      var desired = valid ? markers.select('[data-id=\\'' + symbol + '\\']').attr('data-size') : 1;\n      if (isNaN(desired)) desired = 1;\n\n      var id = 'marker' + _Date$now().toString().slice(7); // unique id\n\n\n      var size = desired * 5 + 25 / scale;\n      markers.append('use').attr('id', id).attr('xlink:href', symbol).attr('data-id', symbol).attr('data-x', x).attr('data-y', y).attr('x', x - size / 2).attr('y', y - size).attr('data-size', desired).attr('width', size).attr('height', size).on('click', editMarker);\n\n      if (d3.event.shiftKey === false) {\n        $('#addMarker, #markerAdd').removeClass('pressed');\n        restoreDefaultEvents();\n      }\n    }\n  } // return cell / polly Index or error\n\n\n  function getIndex(point) {\n    var c = diagram.find(point[0], point[1]);\n\n    if (!c) {\n      console.error('Cannot find closest cell for points' + point[0] + ', ' + point[1]);\n      return;\n    }\n\n    return c.index;\n  } // re-calculate data for a particular state\n\n\n  function recalculateStateData(state) {\n    var s = states[state] || states[states.length - 1];\n    if (s.capital === 'neutral') state = 'neutral';\n    var burgs = $.grep(manors, function (e) {\n      return e.region === state;\n    });\n    s.burgs = burgs.length;\n    var burgsPop = 0; // get summ of all burgs population\n\n    burgs.map(function (b) {\n      burgsPop += b.population;\n    });\n    s.urbanPopulation = _.round(burgsPop, 1);\n    var regionCells = $.grep(cells, function (e) {\n      return e.region === state;\n    });\n    var cellsPop = 0,\n        area = 0;\n    regionCells.map(function (c) {\n      cellsPop += c.pop;\n      area += c.area;\n    });\n    s.cells = regionCells.length;\n    s.area = Math.round(area);\n    s.ruralPopulation = _.round(cellsPop, 1);\n  }\n\n  function changeSelectedOnClick() {\n    var point = d3.mouse(this);\n    var index = diagram.find(point[0], point[1]).index;\n    if (cells[index].height < 20) return;\n    $('.selected').removeClass('selected');\n    var color; // select state\n\n    if (customization === 2) {\n      var assigned = regions.select('#temp').select('path[data-cell=\\'' + index + '\\']');\n      var s = assigned.size() ? assigned.attr('data-state') : cells[index].region;\n      if (s === 'neutral') s = states.length - 1;\n      color = states[s].color;\n      if (color === 'neutral') color = 'white';\n      $('#state' + s).addClass('selected');\n    } // select culture\n\n\n    if (customization === 4) {\n      var _assigned = cults.select('#cult' + index);\n\n      var c = _assigned.attr('data-culture') !== null ? +_assigned.attr('data-culture') : cells[index].culture;\n      color = cultures[c].color;\n      $('#culture' + c).addClass('selected');\n    }\n\n    debug.selectAll('.circle').attr('stroke', color);\n  } // fetch default fonts if not done before\n\n\n  function loadDefaultFonts() {\n    if (!$('link[href=\"fonts.css\"]').length) {\n      $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"fonts.css\">');\n      var fontsToAdd = ['Amatic+SC:700', 'IM+Fell+English', 'Great+Vibes', 'MedievalSharp', 'Metamorphous', 'Nova+Script', 'Uncial+Antiqua', 'Underdog', 'Caesar+Dressing', 'Bitter', 'Yellowtail', 'Montez', 'Shadows+Into+Light', 'Fredericka+the+Great', 'Orbitron', 'Dancing+Script:700', 'Architects+Daughter', 'Kaushan+Script', 'Gloria+Hallelujah', 'Satisfy', 'Comfortaa:700', 'Cinzel'];\n      fontsToAdd.forEach(function (f) {\n        if (FONTS.indexOf(f) === -1) FONTS.push(f);\n      });\n      updateFontOptions();\n    }\n  }\n\n  function fetchFonts(url) {\n    return new _Promise(function (resolve, reject) {\n      if (url === '') {\n        tip('Use a direct link to any @font-face declaration or just font name to fetch from Google Fonts');\n        return;\n      }\n\n      if (url.indexOf('http') === -1) {\n        url = url.replace(url.charAt(0), url.charAt(0).toUpperCase()).split(' ').join('+');\n        url = 'https://fonts.googleapis.com/css?family=' + url;\n      }\n\n      var fetched = addFonts(url).then(function (fetched) {\n        if (fetched === undefined) {\n          tip('Cannot fetch font for this value!');\n          return;\n        }\n\n        if (fetched === 0) {\n          tip('Already in the fonts list!');\n          return;\n        }\n\n        updateFontOptions();\n\n        if (fetched === 1) {\n          tip('Font ' + FONTS[FONTS.length - 1] + ' is fetched');\n        } else if (fetched > 1) {\n          tip(fetched + ' fonts are added to the list');\n        }\n\n        resolve(fetched);\n      });\n    });\n  }\n\n  function addFonts(url) {\n    $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + url + '\">');\n    return fetch(url).then(function (resp) {\n      return resp.text();\n    }).then(function (text) {\n      var s = document.createElement('style');\n      s.innerHTML = text;\n      document.head.appendChild(s);\n      var styleSheet = Array.prototype.filter.call(document.styleSheets, function (sS) {\n        return sS.ownerNode === s;\n      })[0];\n\n      var FontRule = function FontRule(rule) {\n        var family = rule.style.getPropertyValue('font-family');\n        var font = family.replace(/['\"]+/g, '').replace(/ /g, '+');\n        var weight = rule.style.getPropertyValue('font-weight');\n        if (weight !== '400') font += ':' + weight;\n\n        if (FONTS.indexOf(font) == -1) {\n          FONTS.push(font);\n          fetched++;\n        }\n      };\n\n      var fetched = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(styleSheet.cssRules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var r = _step.value;\n          FontRule(r);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      document.head.removeChild(s);\n      return fetched;\n    }).catch(function () {});\n  } // Update font list for Label and Burg Editors\n\n\n  function updateFontOptions() {\n    labelFontSelect.innerHTML = '';\n\n    for (var i = 0; i < FONTS.length; i++) {\n      var opt = document.createElement('option');\n      opt.value = i;\n      var font = FONTS[i].split(':')[0].replace(/\\+/g, ' ');\n      opt.style.fontFamily = opt.innerHTML = font;\n      labelFontSelect.add(opt);\n    }\n\n    burgSelectDefaultFont.innerHTML = labelFontSelect.innerHTML;\n  } // Save in .map format, based on FileSystem API\n\n\n  function saveMap() {\n    console.time('saveMap'); // data convention: 0 - params; 1 - all points; 2 - cells; 3 - manors; 4 - states;\n    // 5 - svg; 6 - options (see below); 7 - cultures;\n    // 8 - empty (former nameBase); 9 - empty (former nameBases); 10 - heights; 11 - notes;\n    // size stats: points = 6%, cells = 36%, manors and states = 2%, svg = 56%;\n\n    var date = new Date();\n    var dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    var license = 'File can be loaded in azgaar.github.io/Fantasy-Map-Generator';\n    var params = version + '|' + license + '|' + dateString + '|' + seed;\n    var options = customization + '|' + distanceUnit.value + '|' + distanceScale.value + '|' + areaUnit.value + '|' + barSize.value + '|' + barLabel.value + '|' + barBackOpacity.value + '|' + barBackColor.value + '|' + populationRate.value + '|' + urbanization.value; // set zoom / transform values to default\n\n    svg.attr('width', graphWidth).attr('height', graphHeight);\n    var transform = d3.zoomTransform(svg.node());\n    viewbox.attr('transform', null);\n    var oceanBack = ocean.select('rect');\n    var oceanShift = [oceanBack.attr('x'), oceanBack.attr('y'), oceanBack.attr('width'), oceanBack.attr('height')];\n    oceanBack.attr('x', 0).attr('y', 0).attr('width', graphWidth).attr('height', graphHeight);\n    var svg_xml = new XMLSerializer().serializeToString(svg.node());\n    var line = '\\r\\n';\n    var data = params + line + _JSON$stringify(points) + line + _JSON$stringify(cells) + line;\n    data += _JSON$stringify(manors) + line + _JSON$stringify(states) + line + svg_xml + line + options + line;\n    data += _JSON$stringify(cultures) + line + '' + line + '' + line + heights + line + _JSON$stringify(notes) + line;\n    var dataBlob = new Blob([data], {\n      type: 'text/plain'\n    });\n    var dataURL = window.URL.createObjectURL(dataBlob);\n    var link = document.createElement('a');\n    link.download = 'fantasy_map_' + _Date$now() + '.map';\n    link.href = dataURL;\n    document.body.appendChild(link);\n    link.click(); // restore initial values\n\n    svg.attr('width', svgWidth).attr('height', svgHeight);\n    zoom.transform(svg, transform);\n    oceanBack.attr('x', oceanShift[0]).attr('y', oceanShift[1]).attr('width', oceanShift[2]).attr('height', oceanShift[3]);\n    console.timeEnd('saveMap');\n    window.setTimeout(function () {\n      window.URL.revokeObjectURL(dataURL);\n    }, 4000);\n  } // Map Loader based on FileSystem API\n\n\n  $('#mapToLoad').change(function () {\n    console.time('loadMap');\n    closeDialogs();\n    var fileToLoad = this.files[0];\n    this.value = '';\n    uploadFile(fileToLoad);\n  });\n\n  function uploadFile(file, callback) {\n    console.time('loadMap');\n    var fileReader = new FileReader();\n\n    fileReader.onload = function (fileLoadedEvent) {\n      var dataLoaded = fileLoadedEvent.target.result;\n      var data = dataLoaded.split('\\r\\n'); // data convention: 0 - params; 1 - all points; 2 - cells; 3 - manors; 4 - states;\n      // 5 - svg; 6 - options; 7 - cultures; 8 - none; 9 - none; 10 - heights; 11 - notes;\n\n      var params = data[0].split('|');\n      var mapVersion = params[0] || data[0];\n\n      if (mapVersion !== version) {\n        var message = \"The Map version \"; // mapVersion reference was not added to downloaded map before v. 0.52b, so I cannot support really old files\n\n        if (mapVersion.length <= 10) {\n          message += \"(\".concat(mapVersion, \") does not match the Generator version (\").concat(version, \"). The map will be auto-updated.\\n                    In case of critical issues you may send the .map file\\n                    <a href=\\\"mailto:maxganiev@yandex.ru?Subject=Map%20update%20request\\\" target=\\\"_blank\\\">to me</a>\\n                    or just keep using\\n                    <a href=\\\"https://github.com/Azgaar/Fantasy-Map-Generator/wiki/Changelog\\\" target=\\\"_blank\\\">an appropriate version</a>\\n                    of the Generator\");\n        } else if (!mapVersion || _parseFloat(mapVersion) < 0.54) {\n          message += \"you are trying to load is too old and cannot be updated. Please re-create the map or just keep using\\n                    <a href=\\\"https://github.com/Azgaar/Fantasy-Map-Generator/wiki/Changelog\\\" target=\\\"_blank\\\">an archived version</a>\\n                    of the Generator. Please note the Generator is still on demo and a lot of changes are being made every month\";\n        }\n\n        alertMessage.innerHTML = message;\n        $('#alert').dialog({\n          title: 'Warning',\n          buttons: {\n            OK: function OK() {\n              loadDataFromMap(data);\n            }\n          }\n        });\n      } else {\n        loadDataFromMap(data);\n      }\n\n      if (mapVersion.length > 10) {\n        console.error('Cannot load map');\n      }\n    };\n\n    fileReader.readAsText(file, 'UTF-8');\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  function loadDataFromMap(data) {\n    closeDialogs(); // update seed\n\n    var params = data[0].split('|');\n\n    if (params[3]) {\n      seed = params[3];\n      $('#optionsSeed').value = seed;\n    } // get options\n\n\n    if (data[0] === '0.52b' || data[0] === '0.53b') {\n      customization = 0;\n    } else if (data[6]) {\n      var options = data[6].split('|');\n      customization = +options[0] || 0;\n      if (options[1]) distanceUnit.value = options[1];\n      if (options[2]) distanceScale.value = options[2];\n      if (options[3]) areaUnit.value = options[3];\n      if (options[4]) barSize.value = options[4];\n      if (options[5]) barLabel.value = options[5];\n      if (options[6]) barBackOpacity.value = options[6];\n      if (options[7]) barBackColor.value = options[7];\n      if (options[8]) populationRate.value = options[8];\n      if (options[9]) urbanization.value = options[9];\n    } // replace old svg\n\n\n    svg.remove();\n\n    if (data[0] === '0.52b' || data[0] === '0.53b') {\n      states = []; // no states data in old maps\n\n      document.body.insertAdjacentHTML('afterbegin', data[4]);\n    } else {\n      states = JSON.parse(data[4]);\n      document.body.insertAdjacentHTML('afterbegin', data[5]);\n    }\n\n    svg = d3.select('svg'); // always change graph size to the size of loaded map\n\n    var nWidth = +svg.attr('width'),\n        nHeight = +svg.attr('height');\n    graphWidth = nWidth;\n    graphHeight = nHeight;\n    voronoi = d3.voronoi().extent([[-1, -1], [graphWidth + 1, graphHeight + 1]]);\n    zoom.translateExtent([[0, 0], [graphWidth, graphHeight]]).scaleExtent([1, 20]).scaleTo(svg, 1);\n    viewbox.attr('transform', null); // temporary fit loaded svg element to current canvas size\n\n    svg.attr('width', svgWidth).attr('height', svgHeight);\n\n    if (nWidth !== svgWidth || nHeight !== svgHeight) {\n      alertMessage.innerHTML = \"The loaded map has size \".concat(nWidth, \" x \").concat(nHeight, \" pixels, while the current canvas size is \").concat(svgWidth, \" x \").concat(svgHeight, \" pixels.\\n                              Click \\\"Rescale\\\" to fit the map to the current canvas size. Click \\\"OK\\\" to browse the map without rescaling\");\n      $('#alert').dialog({\n        title: 'Map size conflict',\n        buttons: {\n          Rescale: function Rescale() {\n            applyLoadedData(data); // rescale loaded map\n\n            var xRatio = svgWidth / nWidth;\n            var yRatio = svgHeight / nHeight;\n\n            var scaleTo = _.round(Math.min(xRatio, yRatio), 4); // calculate frames to scretch ocean background\n\n\n            var extent = 100 / scaleTo + '%';\n            var xShift = (nWidth * scaleTo - svgWidth) / 2 / scaleTo;\n            var yShift = (nHeight * scaleTo - svgHeight) / 2 / scaleTo;\n            svg.select('#ocean').selectAll('rect').attr('x', xShift).attr('y', yShift).attr('width', extent).attr('height', extent);\n            zoom.translateExtent([[0, 0], [nWidth, nHeight]]).scaleExtent([scaleTo, 20]).scaleTo(svg, scaleTo);\n            $(this).dialog('close');\n          },\n          OK: function OK() {\n            changeMapSize();\n            applyLoadedData(data);\n            $(this).dialog('close');\n          }\n        }\n      });\n    } else {\n      applyLoadedData(data);\n    }\n  }\n\n  function applyLoadedData(data) {\n    // redefine variables\n    defs = svg.select('#deftemp');\n    viewbox = svg.select('#viewbox');\n    ocean = viewbox.select('#ocean');\n    oceanLayers = ocean.select('#oceanLayers');\n    oceanPattern = ocean.select('#oceanPattern');\n    landmass = viewbox.select('#landmass');\n    grid = viewbox.select('#grid');\n    overlay = viewbox.select('#overlay');\n    terrs = viewbox.select('#terrs');\n    cults = viewbox.select('#cults');\n    routes = viewbox.select('#routes');\n    roads = routes.select('#roads');\n    trails = routes.select('#trails');\n    rivers = viewbox.select('#rivers');\n    terrain = viewbox.select('#terrain');\n    regions = viewbox.select('#regions');\n    borders = viewbox.select('#borders');\n    stateBorders = borders.select('#stateBorders');\n    neutralBorders = borders.select('#neutralBorders');\n    coastline = viewbox.select('#coastline');\n    lakes = viewbox.select('#lakes');\n    searoutes = routes.select('#searoutes');\n    labels = viewbox.select('#labels');\n    icons = viewbox.select('#icons');\n    markers = viewbox.select('#markers');\n    ruler = viewbox.select('#ruler');\n    debug = viewbox.select('#debug');\n\n    if (!d3.select('#defs-markers').size()) {\n      var symbol = '<g id=\"defs-markers\"><symbol id=\"marker0\" viewBox=\"0 0 30 30\"><path d=\"M6,19 l9,10 L24,19\" fill=\"#000000\" stroke=\"none\"></path><circle cx=\"15\" cy=\"15\" r=\"10\" stroke-width=\"1\" stroke=\"#000000\" fill=\"#ffffff\"></circle><text x=\"50%\" y=\"50%\" fill=\"#000000\" stroke-width=\"0\" stroke=\"#000000\" font-size=\"22px\" dominant-baseline=\"central\">?</text></symbol></g>';\n      var cont = document.getElementsByTagName('defs');\n      cont[0].insertAdjacentHTML('afterbegin', symbol);\n      markers = viewbox.append('g').attr('id', 'markers');\n    } // version control: ensure required groups are created with correct data\n\n\n    if (!labels.select('#burgLabels').size()) {\n      labels.append('g').attr('id', 'burgLabels');\n      $('#labels #capitals, #labels #towns').detach().appendTo($('#burgLabels'));\n    }\n\n    if (!icons.select('#burgIcons').size()) {\n      icons.append('g').attr('id', 'burgIcons');\n      $('#icons #capitals, #icons #towns').detach().appendTo($('#burgIcons'));\n      icons.select('#burgIcons').select('#capitals').attr('size', 1).attr('fill-opacity', .7).attr('stroke-opacity', 1);\n      icons.select('#burgIcons').select('#towns').attr('size', .5).attr('fill-opacity', .7).attr('stroke-opacity', 1);\n    }\n\n    icons.selectAll('g').each(function () {\n      var size = this.getAttribute('font-size');\n      if (size === null || size === undefined) return;\n      this.removeAttribute('font-size');\n      this.setAttribute('size', size);\n    });\n    icons.select('#burgIcons').selectAll('circle').each(function () {\n      this.setAttribute('r', this.parentNode.getAttribute('size'));\n    });\n    icons.selectAll('use').each(function () {\n      var size = this.parentNode.getAttribute('size');\n      if (size === null || size === undefined) return;\n      this.setAttribute('width', size);\n      this.setAttribute('height', size);\n    });\n\n    if (!labels.select('#countries').size()) {\n      labels.append('g').attr('id', 'countries').attr('fill', '#3e3e4b').attr('opacity', 1).attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC').attr('font-size', 14).attr('data-size', 14);\n    }\n\n    burgLabels = labels.select('#burgLabels');\n    burgIcons = icons.select('#burgIcons'); // restore events\n\n    svg.call(zoom);\n    restoreDefaultEvents();\n    viewbox.on('touchmove mousemove', moved);\n    overlay.selectAll('*').call(d3.drag().on('start', elementDrag));\n    terrain.selectAll('g').selectAll('g').on('click', editReliefIcon);\n    labels.selectAll('text').on('click', editLabel);\n    icons.selectAll('circle, path, use').on('click', editIcon);\n    burgLabels.selectAll('text').on('click', editBurg);\n    burgIcons.selectAll('circle, path, use').on('click', editBurg);\n    rivers.selectAll('path').on('click', editRiver);\n    routes.selectAll('path').on('click', editRoute);\n    markers.selectAll('use').on('click', editMarker);\n    svg.select('#scaleBar').call(d3.drag().on('start', elementDrag)).on('click', editScale);\n    ruler.selectAll('g').call(d3.drag().on('start', elementDrag));\n    ruler.selectAll('g').selectAll('text').on('click', removeParent);\n    ruler.selectAll('.opisometer').selectAll('circle').call(d3.drag().on('start', opisometerEdgeDrag));\n    ruler.selectAll('.linear').selectAll('circle:not(.center)').call(d3.drag().on('drag', rulerEdgeDrag));\n    ruler.selectAll('.linear').selectAll('circle.center').call(d3.drag().on('drag', rulerCenterDrag)); // update data\n\n    var newPoints = [];\n    riversData = [], queue = [], elSelected = '';\n    points = JSON.parse(data[1]);\n    cells = JSON.parse(data[2]);\n    manors = JSON.parse(data[3]);\n    if (data[7]) cultures = JSON.parse(data[7]);\n    if (data[7] === undefined) generateCultures();\n    if (data[11]) notes = JSON.parse(data[11]); // place random point\n\n    function placePoint() {\n      var x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1);\n      var y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1);\n      return [x, y];\n    } // ensure each culure has a valid namesbase assigned, if not assign first base\n\n\n    if (!nameBase[0]) applyDefaultNamesData();\n    cultures.forEach(function (c) {\n      var b = c.base;\n      if (b === undefined) c.base = 0;\n      if (!nameBase[b] || !nameBases[b]) c.base = 0;\n      if (c.center === undefined) c.center = placePoint();\n    });\n    var graphSizeAdj = 90 / Math.sqrt(cells.length, 2); // adjust to different graphSize\n    // cells validations\n\n    cells.forEach(function (c, d) {\n      // collect points\n      newPoints.push(c.data); // update old 0-1 height range to a new 0-100 range\n\n      if (c.height < 1) c.height = Math.trunc(c.height * 100);\n      if (c.height === 1 && c.region !== undefined && c.flux !== undefined) c.height = 100; // check if there are any unavailable cultures\n\n      if (c.culture > cultures.length - 1) {\n        var center = [c.data[0], c.data[1]];\n        var cult = {\n          name: 'AUTO_' + c.culture,\n          color: '#ff0000',\n          base: 0,\n          center: center\n        };\n        cultures.push(cult);\n      }\n\n      if (c.height >= 20) {\n        if (!polygons[d] || !polygons[d].length) return; // calculate area\n\n        if (c.area === undefined || isNaN(c.area)) {\n          var area = d3.polygonArea(polygons[d]);\n          c.area = _.round(Math.abs(area), 2);\n        } // calculate population\n\n\n        if (c.pop === undefined || isNaN(c.pop)) {\n          var population = 0;\n          var elevationFactor = Math.pow((100 - c.height) / 100, 3);\n          population = elevationFactor * c.area * graphSizeAdj;\n          if (c.region === 'neutral') population *= 0.5;\n          c.pop = _.round(population, 1);\n        } // if culture is undefined, set to 0\n\n\n        if (c.culture === undefined || isNaN(c.culture)) c.culture = 0;\n      }\n    });\n    land = $.grep(cells, function (e) {\n      return e.height >= 20;\n    });\n    calculateVoronoi(newPoints); // get heights Uint8Array\n\n    if (data[10]) {\n      heights = new Uint8Array(data[10].split(','));\n    } else {\n      heights = new Uint8Array(points.length);\n\n      for (var i = 0; i < points.length; i++) {\n        var cell = diagram.find(points[i][0], points[i][1]).index;\n        heights[i] = cells[cell].height;\n      }\n    } // restore Heightmap customization mode\n\n\n    if (customization === 1) {\n      optionsTrigger.click();\n      $('#customizeHeightmap, #customizationMenu').slideDown();\n      $('#openEditor').slideUp();\n      updateHistory();\n      customizeTab.click();\n      paintBrushes.click();\n      tip('The map is in Heightmap customization mode. Please finalize the Heightmap', true);\n    } // restore Country Edition mode\n\n\n    if (customization === 2 || customization === 3) tip('The map is in Country Edition mode. Please complete the assignment', true); // restore layers state\n\n    d3.select('#toggleCultures').classed('buttonoff', !cults.selectAll('path').size());\n    d3.select('#toggleHeight').classed('buttonoff', !terrs.selectAll('path').size());\n    d3.select('#toggleCountries').classed('buttonoff', regions.style('display') === 'none');\n    d3.select('#toggleRivers').classed('buttonoff', rivers.style('display') === 'none');\n    d3.select('#toggleOcean').classed('buttonoff', oceanPattern.style('display') === 'none');\n    d3.select('#toggleRelief').classed('buttonoff', terrain.style('display') === 'none');\n    d3.select('#toggleBorders').classed('buttonoff', borders.style('display') === 'none');\n    d3.select('#toggleIcons').classed('buttonoff', icons.style('display') === 'none');\n    d3.select('#toggleLabels').classed('buttonoff', labels.style('display') === 'none');\n    d3.select('#toggleRoutes').classed('buttonoff', routes.style('display') === 'none');\n    d3.select('#toggleGrid').classed('buttonoff', grid.style('display') === 'none'); // update map to support some old versions and fetch fonts\n\n    labels.selectAll('g').each(function (d) {\n      var el = d3.select(this);\n      if (el.attr('id') === 'burgLabels') return;\n      var font = el.attr('data-font');\n      if (font && FONTS.indexOf(font) === -1) addFonts('https://fonts.googleapis.com/css?family=' + font);\n      if (!el.attr('data-size')) el.attr('data-size', +el.attr('font-size'));\n      if (el.style('display') === 'none') el.node().style.display = null;\n    });\n    invokeActiveZooming();\n    console.timeEnd('loadMap');\n  } // get square grid with some jirrering\n\n\n  function getJitteredGrid() {\n    var sizeMod = _.round((graphWidth + graphHeight) / 1500, 2); // screen size modifier\n\n\n    spacing = _.round(7.5 * sizeMod / graphSize, 2); // space between points before jirrering\n\n    var radius = spacing / 2; // square radius\n\n    var jittering = radius * 0.9; // max deviation\n\n    var jitter = function jitter() {\n      return Math.random() * 2 * jittering - jittering;\n    };\n\n    var points = [];\n\n    for (var y = radius; y < graphHeight; y += spacing) {\n      for (var x = radius; x < graphWidth; x += spacing) {\n        var xj = _.round(x + jitter(), 2);\n\n        var yj = _.round(y + jitter(), 2);\n\n        points.push([xj, yj]);\n      }\n    }\n\n    return points;\n  } // Hotkeys, see github.com/Azgaar/Fantasy-Map-Generator/wiki/Hotkeys\n\n\n  d3.select('body').on('keydown', function () {\n    var active = document.activeElement.tagName;\n    if (active === 'INPUT' || active === 'SELECT' || active === 'TEXTAREA') return;\n    var key = d3.event.keyCode;\n    var ctrl = d3.event.ctrlKey;\n    var p = d3.mouse(this);\n    if (key === 117) $('#randomMap').click(); // \"F6\" for new map\n    else if (key === 27) closeDialogs(); // Escape to close all dialogs\n      else if (key === 79) optionsTrigger.click(); // \"O\" to toggle options\n        else if (key === 80) saveAsImage('png'); // \"P\" to save as PNG\n          else if (key === 83) saveAsImage('svg'); // \"S\" to save as SVG\n            else if (key === 77) saveMap(); // \"M\" to save MAP file\n              else if (key === 76) mapToLoad.click(); // \"L\" to load MAP\n                else if (key === 32) console.table(cells[diagram.find(p[0], p[1]).index]); // Space to log focused cell data\n                  else if (key === 192) console.log(cells); // \"`\" to log cells data\n                    else if (key === 66) console.table(manors); // \"B\" to log burgs data\n                      else if (key === 67) console.table(states); // \"C\" to log countries data\n                        else if (key === 70) console.table(features); // \"F\" to log features data\n                          else if (key === 37) zoom.translateBy(svg, 10, 0); // Left to scroll map left\n                            else if (key === 39) zoom.translateBy(svg, -10, 0); // Right to scroll map right\n                              else if (key === 38) zoom.translateBy(svg, 0, 10); // Up to scroll map up\n                                else if (key === 40) zoom.translateBy(svg, 0, -10); // Up to scroll map up\n                                  else if (key === 107) zoom.scaleBy(svg, 1.2); // Plus to zoom map up\n                                    else if (key === 109) zoom.scaleBy(svg, 0.8); // Minus to zoom map out\n                                      else if (key === 48 || key === 96) resetZoom(); // 0 to reset zoom\n                                        else if (key === 49 || key === 97) zoom.scaleTo(svg, 1); // 1 to zoom to 1\n                                          else if (key === 50 || key === 98) zoom.scaleTo(svg, 2); // 2 to zoom to 2\n                                            else if (key === 51 || key === 99) zoom.scaleTo(svg, 3); // 3 to zoom to 3\n                                              else if (key === 52 || key === 100) zoom.scaleTo(svg, 4); // 4 to zoom to 4\n                                                else if (key === 53 || key === 101) zoom.scaleTo(svg, 5); // 5 to zoom to 5\n                                                  else if (key === 54 || key === 102) zoom.scaleTo(svg, 6); // 6 to zoom to 6\n                                                    else if (key === 55 || key === 103) zoom.scaleTo(svg, 7); // 7 to zoom to 7\n                                                      else if (key === 56 || key === 104) zoom.scaleTo(svg, 8); // 8 to zoom to 8\n                                                        else if (key === 57 || key === 105) zoom.scaleTo(svg, 9); // 9 to zoom to 9\n                                                          else if (key === 9) $('#updateFullscreen').click(); // Tab to fit map to fullscreen\n                                                            else if (ctrl && key === 90) undo.click(); // Ctrl + \"Z\" to toggle undo\n                                                              else if (ctrl && key === 89) redo.click(); // Ctrl + \"Y\" to toggle undo\n  }); // move layers on mapLayers dragging (jquery sortable)\n\n  function moveLayer(event, ui) {\n    var el = getLayer(ui.item.attr('id'));\n\n    if (el) {\n      var prev = getLayer(ui.item.prev().attr('id'));\n      var next = getLayer(ui.item.next().attr('id'));\n\n      if (prev) {\n        el.insertAfter(prev);\n      } else if (next) {\n        el.insertBefore(next);\n      }\n    }\n  } // define connection between option layer buttons and actual svg groups\n\n\n  function getLayer(id) {\n    if (id === 'toggleGrid') {\n      return $('#grid');\n    }\n\n    if (id === 'toggleOverlay') {\n      return $('#overlay');\n    }\n\n    if (id === 'toggleHeight') {\n      return $('#terrs');\n    }\n\n    if (id === 'toggleCultures') {\n      return $('#cults');\n    }\n\n    if (id === 'toggleRoutes') {\n      return $('#routes');\n    }\n\n    if (id === 'toggleRivers') {\n      return $('#rivers');\n    }\n\n    if (id === 'toggleCountries') {\n      return $('#regions');\n    }\n\n    if (id === 'toggleBorders') {\n      return $('#borders');\n    }\n\n    if (id === 'toggleRelief') {\n      return $('#terrain');\n    }\n\n    if (id === 'toggleLabels') {\n      return $('#labels');\n    }\n\n    if (id === 'toggleIcons') {\n      return $('#icons');\n    }\n  } // UI Button handlers\n\n\n  $('button, a, li, i').on('click', function () {\n    var id = this.id;\n    var parent = this.parentNode.id;\n\n    if (debug.selectAll('.tag').size()) {\n      debug.selectAll('.tag, .line').remove();\n    }\n\n    if (id === 'toggleCountries') {\n      $('#regions').fadeToggle();\n    }\n\n    if (id === 'toggleCultures') {\n      toggleCultures();\n    }\n\n    if (id === 'toggleFlux') {\n      toggleFlux();\n    }\n\n    if (parent === 'mapLayers' || parent === 'styleContent') {\n      $(this).toggleClass('buttonoff');\n    }\n\n    if (id === 'randomMap' || id === 'regenerate') {\n      changeSeed();\n      exitCustomization();\n      undraw();\n      resetZoom(1000);\n      generate();\n      return;\n    }\n\n    if (id === 'editCountries') editCountries();\n    if (id === 'editCultures') editCultures();\n    if (id === 'editScale' || id === 'editScaleCountries' || id === 'editScaleBurgs') editScale();\n\n    if (id === 'countriesManually') {\n      customization = 2;\n      tip('Click to select a country, drag the circle to re-assign', true);\n      mockRegions();\n      var temp = regions.append('g').attr('id', 'temp');\n      $('#countriesBottom').children().hide();\n      $('#countriesManuallyButtons').show(); // highlight capital cells as it's not allowed to change capital's state that way\n\n      states.map(function (s) {\n        if (s.capital === 'neutral' || s.capital === 'select') return;\n        var capital = s.capital;\n        var index = manors[capital].cell;\n        temp.append('path').attr('data-cell', index).attr('data-state', s.i).attr('d', 'M' + polygons[index].join('L') + 'Z').attr('fill', s.color).attr('stroke', 'red').attr('stroke-width', .7);\n      });\n      viewbox.style('cursor', 'crosshair').call(drag).on('click', changeSelectedOnClick);\n    }\n\n    if (id === 'countriesRegenerate') {\n      customization = 3;\n      tip('Manually change \"Expansion\" value for a country or click on \"Randomize\" button', true);\n      mockRegions();\n      regions.append('g').attr('id', 'temp');\n      $('#countriesBottom').children().hide();\n      $('#countriesRegenerateButtons').show();\n      $('.statePower, .icon-resize-full, .stateCells, .icon-check-empty').toggleClass('hidden');\n      $('div[data-sortby=\\'expansion\\'],div[data-sortby=\\'cells\\']').toggleClass('hidden');\n    }\n\n    if (id === 'countriesManuallyComplete') {\n      debug.selectAll('.circle').remove();\n      var changedCells = regions.select('#temp').selectAll('path');\n      var changedStates = [];\n      changedCells.each(function () {\n        var el = d3.select(this);\n        var cell = +el.attr('data-cell');\n        var stateOld = cells[cell].region;\n\n        if (stateOld === 'neutral') {\n          stateOld = states.length - 1;\n        }\n\n        var stateNew = +el.attr('data-state');\n        var region = states[stateNew].color === 'neutral' ? 'neutral' : stateNew;\n        cells[cell].region = region;\n\n        if (cells[cell].manor !== undefined) {\n          manors[cells[cell].manor].region = region;\n        }\n\n        changedStates.push(stateNew, stateOld);\n      });\n      changedStates = _toConsumableArray(new _Set(changedStates));\n      changedStates.map(function (s) {\n        recalculateStateData(s);\n      });\n      var last = states.length - 1;\n\n      if (states[last].capital === 'neutral' && states[last].cells === 0) {\n        $('#state' + last).remove();\n        states.splice(-1);\n      }\n\n      $('#countriesManuallyCancel').click();\n\n      if (changedStates.length) {\n        editCountries();\n      }\n    }\n\n    if (id === 'countriesManuallyCancel') {\n      redrawRegions();\n      debug.selectAll('.circle').remove();\n\n      if (grid.style('display') === 'inline') {\n        toggleGrid.click();\n      }\n\n      if (labels.style('display') === 'none') {\n        toggleLabels.click();\n      }\n\n      $('#countriesBottom').children().show();\n      $('#countriesManuallyButtons, #countriesRegenerateButtons').hide();\n      $('.selected').removeClass('selected');\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').addClass('hidden');\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').removeClass('hidden');\n      customization = 0;\n      restoreDefaultEvents();\n    }\n\n    if (id === 'countriesApply') {\n      $('#countriesManuallyCancel').click();\n    }\n\n    if (id === 'countriesRandomize') {\n      var _mod = +powerInput.value * 2;\n\n      $('.statePower').each(function (e, i) {\n        var state = +this.parentNode.id.slice(5);\n        if (states[state].capital === 'neutral') return;\n\n        var power = _.round(Math.random() * _mod / 2 + 1, 1);\n\n        $(this).val(power);\n        $(this).parent().attr('data-expansion', power);\n        states[state].power = power;\n      });\n      regenerateCountries();\n    }\n\n    if (id === 'countriesAddM' || id === 'countriesAddR' || id === 'countriesAddG') {\n      var i = states.length; // move neutrals to the last line\n\n      if (states[i - 1].capital === 'neutral') {\n        states[i - 1].i = i;\n        i -= 1;\n      }\n\n      var name = generateStateName(0);\n\n      var _color = colors20(i);\n\n      states.push({\n        i: i,\n        color: _color,\n        name: name,\n        capital: 'select',\n        cells: 0,\n        burgs: 0,\n        urbanPopulation: 0,\n        ruralPopulation: 0,\n        area: 0,\n        power: 1\n      });\n      states.sort(function (a, b) {\n        return a.i - b.i;\n      });\n      editCountries();\n    }\n\n    if (id === 'countriesRegenerateNames') {\n      var editor = d3.select('#countriesBody');\n      states.forEach(function (s) {\n        if (s.capital === 'neutral') return;\n        s.name = generateStateName(s.i);\n        labels.select('#regionLabel' + s.i).text(s.name);\n        editor.select('#state' + s.i).select('.stateName').attr('value', s.name);\n      });\n    }\n\n    if (id === 'countriesPercentage') {\n      var el = $('#countriesEditor');\n\n      if (el.attr('data-type') === 'absolute') {\n        el.attr('data-type', 'percentage');\n        var totalCells = land.length;\n        var totalBurgs = +countriesFooterBurgs.innerHTML;\n        var totalArea = countriesFooterArea.innerHTML;\n        totalArea = getInteger(totalArea.split(' ')[0]);\n        var totalPopulation = getInteger(countriesFooterPopulation.innerHTML);\n        $('#countriesBody > .states').each(function () {\n          var cells = Math.round($(this).attr('data-cells') / totalCells * 100);\n          var burgs = Math.round($(this).attr('data-burgs') / totalBurgs * 100);\n          var area = Math.round($(this).attr('data-area') / totalArea * 100);\n          var population = Math.round($(this).attr('data-population') / totalPopulation * 100);\n          $(this).children().filter('.stateCells').text(cells + '%');\n          $(this).children().filter('.stateBurgs').text(burgs + '%');\n          $(this).children().filter('.stateArea').text(area + '%');\n          $(this).children().filter('.statePopulation').val(population + '%');\n        });\n      } else {\n        el.attr('data-type', 'absolute');\n        editCountries();\n      }\n    }\n\n    if (id === 'countriesExport') {\n      if ($('.statePower').length === 0) {\n        return;\n      }\n\n      var unit = areaUnit.value === 'square' ? distanceUnit.value + '2' : areaUnit.value;\n      var data = 'Country,Capital,Cells,Burgs,Area (' + unit + '),Population\\n'; // countries headers\n\n      $('#countriesBody > .states').each(function () {\n        var country = $(this).attr('data-country');\n\n        if (country === 'bottom') {\n          data += 'neutral,';\n        } else {\n          data += country + ',';\n        }\n\n        var capital = $(this).attr('data-capital');\n\n        if (capital === 'bottom' || capital === 'select') {\n          data += ',';\n        } else {\n          data += capital + ',';\n        }\n\n        data += $(this).attr('data-cells') + ',';\n        data += $(this).attr('data-burgs') + ',';\n        data += $(this).attr('data-area') + ',';\n        var population = +$(this).attr('data-population');\n        data += population + '\\n';\n      });\n      data += '\\nBurg,Country,Culture,Population\\n'; // burgs headers\n\n      manors.map(function (m) {\n        if (m.region === 'removed') return; // skip removed burgs\n\n        data += m.name + ',';\n        var country = m.region === 'neutral' ? 'neutral' : states[m.region].name;\n        data += country + ',';\n        data += cultures[m.culture].name + ',';\n        var population = m.population * urbanization.value * populationRate.value * 1000;\n        data += population + '\\n';\n      });\n      var dataBlob = new Blob([data], {\n        type: 'text/plain'\n      });\n      var url = window.URL.createObjectURL(dataBlob);\n      var link = document.createElement('a');\n      document.body.appendChild(link);\n      link.download = 'countries_data' + _Date$now() + '.csv';\n      link.href = url;\n      link.click();\n      window.setTimeout(function () {\n        window.URL.revokeObjectURL(url);\n      }, 2000);\n    }\n\n    if (id === 'burgNamesImport') burgsListToLoad.click();\n\n    if (id === 'removeCountries') {\n      alertMessage.innerHTML = \"Are you sure you want remove all countries?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove countries',\n        buttons: {\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          },\n          Remove: function Remove() {\n            $(this).dialog('close');\n            $('#countriesBody').empty();\n            manors.map(function (m) {\n              m.region = 'neutral';\n            });\n            land.map(function (l) {\n              l.region = 'neutral';\n            });\n            states.map(function (s) {\n              var c = +s.capital;\n              if (isNaN(c)) return;\n              moveBurgToGroup(c, 'towns');\n            });\n            removeAllLabelsInGroup('countries');\n            regions.selectAll('path').remove();\n            states = [];\n            states.push({\n              i: 0,\n              color: 'neutral',\n              capital: 'neutral',\n              name: 'Neutrals'\n            });\n            recalculateStateData(0);\n\n            if ($('#burgsEditor').is(':visible')) {\n              $('#burgsEditor').dialog('close');\n            }\n\n            editCountries();\n          }\n        }\n      });\n    }\n\n    if (id === 'removeBurgs') {\n      alertMessage.innerHTML = \"Are you sure you want to remove all burgs associated with the country?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove associated burgs',\n        buttons: {\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          },\n          Remove: function Remove() {\n            $(this).dialog('close');\n            var state = +$('#burgsEditor').attr('data-state');\n            var region = states[state].capital === 'neutral' ? 'neutral' : state;\n            $('#burgsBody').empty();\n            manors.map(function (m) {\n              if (m.region !== region) {\n                return;\n              }\n\n              m.region = 'removed';\n              cells[m.cell].manor = undefined;\n              labels.select('[data-id=\\'' + m.i + '\\']').remove();\n              icons.selectAll('[data-id=\\'' + m.i + '\\']').remove();\n            });\n            states[state].urbanPopulation = 0;\n            states[state].burgs = 0;\n            states[state].capital = 'select';\n\n            if ($('#countriesEditor').is(':visible')) {\n              editCountries();\n              $('#burgsEditor').dialog('moveToTop');\n            }\n\n            burgsFooterBurgs.innerHTML = 0;\n            burgsFooterPopulation.value = 0;\n          }\n        }\n      });\n    }\n\n    if (id === 'changeCapital') {\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed');\n      } else {\n        $('.pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n      }\n    }\n\n    if (id === 'regenerateBurgNames') {\n      var s = +$('#burgsEditor').attr('data-state');\n      $('.burgName').each(function (e, i) {\n        var b = +this.parentNode.id.slice(5);\n        var name = generateName(manors[b].culture);\n        $(this).val(name);\n        $(this).parent().attr('data-burg', name);\n        manors[b].name = name;\n        labels.select('[data-id=\\'' + b + '\\']').text(name);\n      });\n\n      if ($('#countriesEditor').is(':visible')) {\n        if (states[s].capital === 'neutral') {\n          return;\n        }\n\n        var c = states[s].capital;\n        $('#state' + s).attr('data-capital', manors[c].name);\n        $('#state' + s + ' > .stateCapital').val(manors[c].name);\n      }\n    }\n\n    if (id === 'burgAdd') {\n      var state = +$('#burgsEditor').attr('data-state');\n      clickToAdd(); // to load on click event function\n\n      $('#addBurg').click().attr('data-state', state);\n    }\n\n    if (id === 'toggleScaleBar') {\n      $('#scaleBar').toggleClass('hidden');\n    }\n\n    if (id === 'addRuler') {\n      $('#ruler').show();\n      var rulerNew = ruler.append('g').attr('class', 'linear').call(d3.drag().on('start', elementDrag));\n\n      var factor = _.round(1 / Math.pow(scale, 0.3), 1);\n\n      var y = Math.floor(Math.random() * graphHeight * 0.5 + graphHeight * 0.25);\n      var x1 = graphWidth * 0.2,\n          x2 = graphWidth * 0.8;\n\n      var dash = _.round(30 / distanceScale.value, 2);\n\n      rulerNew.append('line').attr('x1', x1).attr('y1', y).attr('x2', x2).attr('y2', y).attr('class', 'white').attr('stroke-width', factor);\n      rulerNew.append('line').attr('x1', x1).attr('y1', y).attr('x2', x2).attr('y2', y).attr('class', 'gray').attr('stroke-width', factor).attr('stroke-dasharray', dash);\n      rulerNew.append('circle').attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('cx', x1).attr('cy', y).attr('data-edge', 'left').call(d3.drag().on('drag', rulerEdgeDrag));\n      rulerNew.append('circle').attr('r', 2 * factor).attr('stroke-width', 0.5 * factor).attr('cx', x2).attr('cy', y).attr('data-edge', 'rigth').call(d3.drag().on('drag', rulerEdgeDrag));\n      rulerNew.append('circle').attr('r', 1.2 * factor).attr('stroke-width', 0.3 * factor).attr('cx', graphWidth / 2).attr('cy', y).attr('class', 'center').call(d3.drag().on('start', rulerCenterDrag));\n      var dist = Math.round(x2 - x1);\n      var label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value;\n      rulerNew.append('text').attr('x', graphWidth / 2).attr('y', y).attr('dy', -1).attr('data-dist', dist).text(label).text(label).on('click', removeParent).attr('font-size', 10 * factor);\n      return;\n    }\n\n    if (id === 'addOpisometer' || id === 'addPlanimeter') {\n      if ($(this).hasClass('pressed')) {\n        restoreDefaultEvents();\n        $(this).removeClass('pressed');\n      } else {\n        $(this).addClass('pressed');\n        viewbox.style('cursor', 'crosshair').call(drag);\n      }\n\n      return;\n    }\n\n    if (id === 'removeAllRulers') {\n      if ($('#ruler > g').length < 1) {\n        return;\n      }\n\n      alertMessage.innerHTML = \"Are you sure you want to remove all placed rulers?\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove all rulers',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            $('#ruler > g').remove();\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n      return;\n    }\n\n    if (id === 'editHeightmap') {\n      $('#customizeHeightmap').slideToggle();\n    }\n\n    if (id === 'fromScratch') {\n      alertMessage.innerHTML = 'Are you sure you want to clear the map? All progress will be lost';\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Clear map',\n        buttons: {\n          Clear: function Clear() {\n            closeDialogs();\n            undraw();\n            placePoints();\n            calculateVoronoi(points);\n            detectNeighbors('grid');\n            drawScaleBar();\n            customizeHeightmap();\n            openBrushesPanel();\n            $(this).dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    }\n\n    if (id === 'fromHeightmap') {\n      var _message = \"Hightmap is a basic element on which secondary data (rivers, burgs, countries etc) is based.\\n    If you want to significantly change the hightmap, it may be better to clean up all the secondary data\\n    and let the system to re-generate it based on the updated hightmap. In case of minor changes, you can keep the data.\\n    Newly added lands will be considered as neutral. Burgs located on a removed land cells will be deleted.\\n    Rivers and small lakes will be re-gerenated based on updated heightmap. Routes won't be regenerated.\";\n      alertMessage.innerHTML = _message;\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Edit Heightmap',\n        buttons: {\n          'Clean up': function CleanUp() {\n            editHeightmap('clean');\n            $(this).dialog('close');\n          },\n          Keep: function Keep() {\n            $(this).dialog('close');\n            editHeightmap('keep');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n      return;\n    } // heightmap customization buttons\n\n\n    if (customization === 1) {\n      if (id === 'paintBrushes') {\n        openBrushesPanel();\n      }\n\n      if (id === 'rescaleExecute') {\n        var subject = rescaleLower.value + '-' + rescaleHigher.value;\n        var sign = conditionSign.value;\n        var modifier = rescaleModifier.value;\n\n        if (sign === '×') {\n          modifyHeights(subject, 0, +modifier);\n        }\n\n        if (sign === '÷') {\n          modifyHeights(subject, 0, 1 / modifier);\n        }\n\n        if (sign === '+') {\n          modifyHeights(subject, +modifier, 1);\n        }\n\n        if (sign === '-') {\n          modifyHeights(subject, -1 * modifier, 1);\n        }\n\n        if (sign === '^') {\n          modifyHeights(subject, 0, '^' + modifier);\n        }\n\n        updateHeightmap();\n        updateHistory();\n      }\n\n      if (id === 'rescaleButton') {\n        $('#modifyButtons').children().not('#rescaleButton, .condition').toggle();\n      }\n\n      if (id === 'rescaleCondButton') {\n        $('#modifyButtons').children().not('#rescaleCondButton, #rescaler').toggle();\n      }\n\n      if (id === 'undo' || id === 'templateUndo') {\n        restoreHistory(historyStage - 1);\n      }\n\n      if (id === 'redo' || id === 'templateRedo') {\n        restoreHistory(historyStage + 1);\n      }\n\n      if (id === 'smoothHeights') {\n        smoothHeights(4);\n        updateHeightmap();\n        updateHistory();\n      }\n\n      if (id === 'disruptHeights') {\n        disruptHeights();\n        updateHeightmap();\n        updateHistory();\n      }\n\n      if (id === 'getMap') getMap();\n\n      if (id === 'applyTemplate') {\n        if ($('#templateEditor').is(':visible')) {\n          return;\n        }\n\n        $('#templateEditor').dialog({\n          title: 'Template Editor',\n          minHeight: 'auto',\n          width: 'auto',\n          resizable: false,\n          position: {\n            my: 'right top',\n            at: 'right-10 top+10',\n            of: 'svg'\n          }\n        });\n      }\n\n      if (id === 'convertImage') {\n        convertImage();\n      }\n\n      if (id === 'convertImageGrid') {\n        $('#grid').fadeToggle();\n      }\n\n      if (id === 'convertImageHeights') {\n        $('#landmass').fadeToggle();\n      }\n\n      if (id === 'perspectiveView') {\n        if ($('#perspectivePanel').is(':visible')) return;\n        $('#perspectivePanel').dialog({\n          title: 'Perspective View',\n          width: 520,\n          height: 190,\n          position: {\n            my: 'center center',\n            at: 'center center',\n            of: 'svg'\n          }\n        });\n        drawPerspective();\n        return;\n      }\n    }\n\n    if (parent === 'mapFilters') {\n      $('svg').attr('filter', '');\n\n      if ($(this).hasClass('pressed')) {\n        $('#mapFilters .pressed').removeClass('pressed');\n      } else {\n        $('#mapFilters .pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        $('svg').attr('filter', 'url(#filter-' + id + ')');\n      }\n\n      return;\n    }\n\n    if (id === 'updateFullscreen') {\n      mapWidthInput.value = window.innerWidth;\n      mapHeightInput.value = window.innerHeight;\n      localStorage.removeItem('mapHeight');\n      localStorage.removeItem('mapWidth');\n      changeMapSize();\n    }\n\n    if (id === 'zoomExtentDefault') {\n      zoomExtentMin.value = 1;\n      zoomExtentMax.value = 20;\n      zoom.scaleExtent([1, 20]).scaleTo(svg, 1);\n    }\n\n    if (id === 'saveButton') {\n      $('#saveDropdown').slideToggle();\n    }\n\n    if (id === 'loadMap') {\n      mapToLoad.click();\n    }\n\n    if (id === 'zoomReset') {\n      resetZoom(1000);\n    }\n\n    if (id === 'zoomPlus') {\n      scale += 1;\n\n      if (scale > 40) {\n        scale = 40;\n      }\n\n      invokeActiveZooming();\n    }\n\n    if (id === 'zoomMinus') {\n      scale -= 1;\n\n      if (scale <= 1) {\n        scale = 1;\n        viewX = 0;\n        viewY = 0;\n      }\n\n      invokeActiveZooming();\n    }\n\n    if (id === 'styleFontPlus' || id === 'styleFontMinus') {\n      var el = viewbox.select('#' + styleElementSelect.value);\n      var mod = id === 'styleFontPlus' ? 1.1 : 0.9;\n      el.selectAll('g').each(function () {\n        var el = d3.select(this);\n\n        var size = _.round(el.attr('data-size') * mod, 2);\n\n        if (size < 2) {\n          size = 2;\n        }\n\n        el.attr('data-size', size).attr('font-size', _.round((size + size / scale) / 2, 2));\n      });\n      invokeActiveZooming();\n      return;\n    }\n\n    if (id === 'brushClear') {\n      if (customization === 1) {\n        var message = 'Are you sure you want to clear the map?';\n        alertMessage.innerHTML = message;\n        $('#alert').dialog({\n          resizable: false,\n          title: 'Clear map',\n          buttons: {\n            Clear: function Clear() {\n              $(this).dialog('close');\n              viewbox.style('cursor', 'crosshair').call(drag);\n              landmassCounter.innerHTML = '0';\n              $('#landmass').empty();\n              heights = new Uint8Array(heights.length); // clear history\n\n              history = [];\n              historyStage = 0;\n              updateHistory();\n              redo.disabled = templateRedo.disabled = true;\n              undo.disabled = templateUndo.disabled = true;\n            },\n            Cancel: function Cancel() {\n              $(this).dialog('close');\n            }\n          }\n        });\n      } else {\n        start.click();\n      }\n    }\n\n    if (id === 'templateComplete') getMap();\n\n    if (id === 'convertColorsMinus') {\n      var current = +convertColors.value - 1;\n\n      if (current < 4) {\n        current = 3;\n      }\n\n      convertColors.value = current;\n      heightsFromImage(current);\n    }\n\n    if (id === 'convertColorsPlus') {\n      var current = +convertColors.value + 1;\n\n      if (current > 255) {\n        current = 256;\n      }\n\n      convertColors.value = current;\n      heightsFromImage(current);\n    }\n\n    if (id === 'convertOverlayButton') {\n      $('#convertImageButtons').children().not(this).not('#convertColors').toggle();\n    }\n\n    if (id === 'convertAutoLum') {\n      autoAssing('lum');\n    }\n\n    if (id === 'convertAutoHue') {\n      autoAssing('hue');\n    }\n\n    if (id === 'convertComplete') {\n      completeConvertion();\n    }\n  }); // support save options\n\n  $('#saveDropdown > div').click(function () {\n    var id = this.id;\n    var dns_allow_popup_message = localStorage.getItem('dns_allow_popup_message');\n\n    if (!dns_allow_popup_message) {\n      localStorage.clear();\n      var message = 'Generator uses pop-up window to download files. ';\n      message += 'Please ensure your browser does not block popups. ';\n      message += 'Please check browser settings and turn off adBlocker if it is enabled';\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        title: 'File saver. Please enable popups!',\n        buttons: {\n          'Don\\'t show again': function DonTShowAgain() {\n            localStorage.setItem('dns_allow_popup_message', true);\n            $(this).dialog('close');\n          },\n          Close: function Close() {\n            $(this).dialog('close');\n          }\n        },\n        position: {\n          my: 'center',\n          at: 'center',\n          of: 'svg'\n        }\n      });\n    }\n\n    if (id === 'saveMap') {\n      saveMap();\n    }\n\n    if (id === 'saveSVG') {\n      saveAsImage('svg');\n    }\n\n    if (id === 'savePNG') {\n      saveAsImage('png');\n    }\n\n    $('#saveDropdown').slideUp('fast');\n  });\n\n  function editHeightmap(type) {\n    closeDialogs();\n    var regionData = [],\n        cultureData = [];\n\n    if (type !== 'clean') {\n      for (var i = 0; i < points.length; i++) {\n        var cell = diagram.find(points[i][0], points[i][1]).index; // if closest cell is a small lake, try to find a land neighbor\n\n        if (cells[cell].lake === 2) cells[cell].neighbors.forEach(function (n) {\n          if (cells[n].height >= 20) {\n            cell = n;\n          }\n        });\n        var region = cells[cell].region;\n        if (region === undefined) region = -1;\n        regionData.push(region);\n        var culture = cells[cell].culture;\n        if (culture === undefined) culture = -1;\n        cultureData.push(culture);\n      }\n    } else {\n      undraw();\n    }\n\n    calculateVoronoi(points);\n    detectNeighbors('grid');\n    drawScaleBar();\n\n    if (type === 'keep') {\n      svg.selectAll('#lakes, #coastline, #terrain, #rivers, #grid, #terrs, #landmass, #ocean, #regions').selectAll('path, circle, line').remove();\n      svg.select('#shape').remove();\n\n      for (var _i3 = 0; _i3 < points.length; _i3++) {\n        if (regionData[_i3] !== -1) cells[_i3].region = regionData[_i3];\n        if (cultureData[_i3] !== -1) cells[_i3].culture = cultureData[_i3];\n      }\n    }\n\n    mockHeightmap();\n    customizeHeightmap();\n    openBrushesPanel();\n  }\n\n  function openBrushesPanel() {\n    if ($('#brushesPanel').is(':visible')) {\n      return;\n    }\n\n    $('#brushesPanel').dialog({\n      title: 'Paint Brushes',\n      minHeight: 40,\n      width: 'auto',\n      maxWidth: 200,\n      resizable: false,\n      position: {\n        my: 'right top',\n        at: 'right-10 top+10',\n        of: 'svg'\n      }\n    }).on('dialogclose', function () {\n      restoreDefaultEvents();\n      $('#brushesButtons > .pressed').removeClass('pressed');\n    });\n    if (modules.openBrushesPanel) return;\n    modules.openBrushesPanel = true;\n    $('#brushesButtons > button').on('click', function () {\n      var rSlider = $('#brushRadiusLabel, #brushRadius');\n      debug.selectAll('.circle, .tag, .line').remove();\n\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed');\n        restoreDefaultEvents();\n        rSlider.attr('disabled', true).addClass('disabled');\n      } else {\n        $('#brushesButtons > .pressed').removeClass('pressed');\n        $(this).addClass('pressed');\n        viewbox.style('cursor', 'crosshair');\n        var id = this.id;\n\n        if (id === 'brushRange' || id === 'brushTrough') {\n          viewbox.on('click', placeLinearFeature);\n        } // on click brushes\n        else {\n            viewbox.call(drag).on('click', null);\n          } // on drag brushes\n\n\n        if ($(this).hasClass('feature')) {\n          rSlider.attr('disabled', true).addClass('disabled');\n        } else {\n          rSlider.attr('disabled', false).removeClass('disabled');\n        }\n      }\n    });\n  }\n\n  function drawPerspective() {\n    console.time('drawPerspective');\n    var width = 320,\n        height = 180;\n    var wRatio = graphWidth / width,\n        hRatio = graphHeight / height;\n    var lineCount = 320,\n        lineGranularity = 90;\n    var perspective = document.getElementById('perspective');\n    var pContext = perspective.getContext('2d');\n    var lines = [];\n    var i = lineCount;\n\n    while (i--) {\n      var x = i / lineCount * width | 0;\n      var canvasPoints = [];\n      lines.push(canvasPoints);\n      var j = Math.floor(lineGranularity);\n\n      while (j--) {\n        var y = j / lineGranularity * height | 0;\n        var index = getCellIndex(x * wRatio, y * hRatio);\n        var h = heights[index] - 20;\n        if (h < 1) h = 0;\n        canvasPoints.push([x, y, h]);\n      }\n    }\n\n    pContext.clearRect(0, 0, perspective.width, perspective.height);\n\n    for (var _i4 = 0; _i4 < lines.length; _i4++) {\n      var _canvasPoints = lines[_i4];\n\n      for (var _i5 = 0; _i5 < _canvasPoints.length - 1; _i5++) {\n        var pt1 = _canvasPoints[_i5];\n        var pt2 = _canvasPoints[_i5 + 1];\n        var avHeight = (pt1[2] + pt2[2]) / 200;\n        pContext.beginPath();\n        pContext.moveTo.apply(pContext, _toConsumableArray(transformPt(pt1)));\n        pContext.lineTo.apply(pContext, _toConsumableArray(transformPt(pt2)));\n        var clr = 'rgb(81, 103, 169)'; // water\n\n        if (avHeight !== 0) {\n          clr = color(1 - avHeight - 0.2);\n        }\n\n        pContext.strokeStyle = clr;\n        pContext.stroke();\n      }\n\n      for (var _i6 = 0; _i6 < _canvasPoints.length - 1; _i6++) {}\n    }\n\n    console.timeEnd('drawPerspective');\n  } // get square grid cell index based on coords\n\n\n  function getCellIndex(x, y) {\n    var index = diagram.find(x, y).index; // let cellsX = Math.round(graphWidth / spacing);\n    // let index = Math.ceil(y / spacing) * cellsX + Math.round(x / spacing);\n\n    return index;\n  }\n\n  function transformPt(pt) {\n    var width = 320,\n        maxHeight = 0.2;\n\n    var _projectIsometric = projectIsometric(pt[0], pt[1]),\n        _projectIsometric2 = _slicedToArray(_projectIsometric, 2),\n        x = _projectIsometric2[0],\n        y = _projectIsometric2[1];\n\n    return [x + width / 2 + 10, y + 10 - pt[2] * maxHeight];\n  }\n\n  function projectIsometric(x, y) {\n    var scale = 1,\n        yProj = 4;\n    return [(x - y) * scale, (x + y) / yProj * scale];\n  } // Execute custom template\n\n\n  $('#templateRun').on('click', function () {\n    if (customization !== 1) return;\n    var steps = $('#templateBody > div').length;\n    if (!steps) return;\n    heights = new Uint8Array(heights.length); // clean all heights\n\n    for (var step = 1; step <= steps; step++) {\n      var type = $('#templateBody div:nth-child(' + step + ')').attr('data-type');\n\n      if (type === 'Mountain') {\n        addMountain();\n        continue;\n      }\n\n      var count = $('#templateBody div:nth-child(' + step + ') .templateElCount').val();\n      var dist = $('#templateBody div:nth-child(' + step + ') .templateElDist').val();\n\n      if (count) {\n        if (count[0] !== '-' && count.includes('-')) {\n          var lim = count.split('-');\n          count = Math.floor(Math.random() * (+lim[1] - +lim[0] + 1) + +lim[0]);\n        } else {\n          count = +count; // parse string\n        }\n      }\n\n      if (type === 'Hill') {\n        addHill(count, +dist);\n      }\n\n      if (type === 'Pit') {\n        addPit(count);\n      }\n\n      if (type === 'Range') {\n        addRange(count);\n      }\n\n      if (type === 'Trough') {\n        addRange(-1 * count);\n      }\n\n      if (type === 'Strait') {\n        addStrait(count);\n      }\n\n      if (type === 'Add') {\n        modifyHeights(dist, count, 1);\n      }\n\n      if (type === 'Multiply') {\n        modifyHeights(dist, 0, count);\n      }\n\n      if (type === 'Smooth') {\n        smoothHeights(count);\n      }\n    }\n\n    mockHeightmap();\n    updateHistory();\n  });\n  $('#templateToLoad').change(function () {\n    var fileToLoad = this.files[0];\n    this.value = '';\n    var fileReader = new FileReader();\n\n    fileReader.onload = function (fileLoadedEvent) {\n      var dataLoaded = fileLoadedEvent.target.result;\n      var data = dataLoaded.split('\\r\\n');\n      $('#templateBody').empty();\n\n      if (data.length > 0) {\n        $('#templateBody').attr('data-changed', 1);\n        $('#templateSelect').attr('data-prev', 'templateCustom').val('templateCustom');\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        var line = data[i].split(' ');\n        this.addStep(line[0], line[1], line[2]);\n      }\n    };\n\n    fileReader.readAsText(fileToLoad, 'UTF-8');\n  }); // Image to Heightmap Converter dialog\n\n  function convertImage() {\n    canvas.width = svgWidth;\n    canvas.height = svgHeight; // turn off paint brushes drag and cursor\n\n    $('.pressed').removeClass('pressed');\n    restoreDefaultEvents();\n    var div = d3.select('#colorScheme');\n\n    if (div.selectAll('*').size() === 0) {\n      for (var i = 0; i <= 100; i++) {\n        var width = i < 20 || i > 70 ? '1px' : '3px';\n        if (i === 0) width = '4px';\n        var clr = color(1 - i / 100);\n        var style = 'background-color: ' + clr + '; width: ' + width;\n        div.append('div').attr('data-color', i).attr('style', style);\n      }\n\n      div.selectAll('*').on('touchmove mousemove', showHeight).on('click', assignHeight);\n    }\n\n    if ($('#imageConverter').is(':visible')) {\n      return;\n    }\n\n    $('#imageConverter').dialog({\n      title: 'Image to Heightmap Converter',\n      minHeight: 30,\n      width: 260,\n      resizable: false,\n      position: {\n        my: 'right top',\n        at: 'right-10 top+10',\n        of: 'svg'\n      }\n    }).on('dialogclose', function () {\n      completeConvertion();\n    });\n  } // Load image to convert\n\n\n  $('#convertImageLoad').on('click', function () {\n    imageToLoad.click();\n  });\n  $('#imageToLoad').change(function () {\n    console.time('loadImage'); // set style\n\n    resetZoom();\n    grid.attr('stroke-width', .2); // load image\n\n    var file = this.files[0];\n    this.value = ''; // reset input value to get triggered if the same file is uploaded\n\n    var reader = new FileReader();\n    var img = new Image(); // draw image\n\n    img.onload = function () {\n      ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n      heightsFromImage(+convertColors.value);\n      console.timeEnd('loadImage');\n    };\n\n    reader.onloadend = function () {\n      img.src = reader.result;\n    };\n\n    reader.readAsDataURL(file);\n  });\n\n  function heightsFromImage(count) {\n    var imageData = ctx.getImageData(0, 0, svgWidth, svgHeight);\n    var data = imageData.data;\n    $('#landmass > path, .color-div').remove();\n    $('#landmass, #colorsUnassigned').fadeIn();\n    $('#colorsAssigned').fadeOut();\n    var colors = [],\n        palette = [];\n    points.map(function (i) {\n      var x = Math.round(i[0]),\n          y = Math.round(i[1]);\n\n      if (y == svgHeight) {\n        y--;\n      }\n\n      if (x == svgWidth) {\n        x--;\n      }\n\n      var p = (x + y * svgWidth) * 4;\n      var r = data[p],\n          g = data[p + 1],\n          b = data[p + 2];\n      colors.push([r, g, b]);\n    });\n    var cmap = quantize(colors, count);\n    heights = new Uint8Array(points.length);\n    polygons.map(function (i, d) {\n      var nearest = cmap.nearest(colors[d]);\n      var rgb = 'rgb(' + nearest[0] + ', ' + nearest[1] + ', ' + nearest[2] + ')';\n      var hex = toHEX(rgb);\n\n      if (palette.indexOf(hex) === -1) {\n        palette.push(hex);\n      }\n\n      landmass.append('path').attr('d', 'M' + i.join('L') + 'Z').attr('data-i', d).attr('fill', hex).attr('stroke', hex);\n    });\n    landmass.selectAll('path').on('click', landmassClicked);\n    palette.sort(function (a, b) {\n      return d3.lab(a).b - d3.lab(b).b;\n    }).map(function (i) {\n      $('#colorsUnassigned').append('<div class=\"color-div\" id=\"' + i.substr(1) + '\" style=\"background-color: ' + i + ';\"/>');\n    });\n    $('.color-div').click(selectColor);\n  }\n\n  function landmassClicked() {\n    var color = d3.select(this).attr('fill');\n    $('#' + color.slice(1)).click();\n  }\n\n  function selectColor() {\n    landmass.selectAll('.selectedCell').classed('selectedCell', 0);\n    var el = d3.select(this);\n\n    if (el.classed('selectedColor')) {\n      el.classed('selectedColor', 0);\n    } else {\n      $('.selectedColor').removeClass('selectedColor');\n      el.classed('selectedColor', 1);\n      $('#colorScheme .hoveredColor').removeClass('hoveredColor');\n      $('#colorsSelectValue').text(0);\n\n      if (el.attr('data-height')) {\n        var height = el.attr('data-height');\n        $('#colorScheme div[data-color=\\'' + height + '\\']').addClass('hoveredColor');\n        $('#colorsSelectValue').text(height);\n      }\n\n      var _color2 = '#' + d3.select(this).attr('id');\n\n      landmass.selectAll('path').classed('selectedCell', 0);\n      landmass.selectAll('path[fill=\\'' + _color2 + '\\']').classed('selectedCell', 1);\n    }\n  }\n\n  function showHeight() {\n    var el = d3.select(this);\n    var height = el.attr('data-color');\n    $('#colorsSelectValue').text(height);\n    $('#colorScheme .hoveredColor').removeClass('hoveredColor');\n    el.classed('hoveredColor', 1);\n  }\n\n  function assignHeight() {\n    var sel = $('.selectedColor')[0];\n    var height = +d3.select(this).attr('data-color');\n    var rgb = color(1 - height / 100);\n    var hex = toHEX(rgb);\n    sel.style.backgroundColor = rgb;\n    sel.setAttribute('data-height', height);\n    var cur = '#' + sel.id;\n    sel.id = hex.substr(1);\n    landmass.selectAll('.selectedCell').each(function () {\n      d3.select(this).attr('fill', hex).attr('stroke', hex);\n      var i = +d3.select(this).attr('data-i');\n      heights[i] = height;\n    });\n    var parent = sel.parentNode;\n\n    if (parent.id === 'colorsUnassigned') {\n      colorsAssigned.appendChild(sel);\n      $('#colorsAssigned').fadeIn();\n\n      if ($('#colorsUnassigned .color-div').length < 1) {\n        $('#colorsUnassigned').fadeOut();\n      }\n    }\n\n    if ($('#colorsAssigned .color-div').length > 1) {\n      sortAssignedColors();\n    }\n  } // sort colors based on assigned height\n\n\n  function sortAssignedColors() {\n    var data = [];\n    var colors = d3.select('#colorsAssigned').selectAll('.color-div');\n    colors.each(function (d) {\n      var id = d3.select(this).attr('id');\n      var height = +d3.select(this).attr('data-height');\n      data.push({\n        id: id,\n        height: height\n      });\n    });\n    data.sort(function (a, b) {\n      return a.height - b.height;\n    }).map(function (i) {\n      $('#colorsAssigned').append($('#' + i.id));\n    });\n  } // auto assign color based on luminosity or hue\n\n\n  function autoAssing(type) {\n    var imageData = ctx.getImageData(0, 0, svgWidth, svgHeight);\n    var data = imageData.data;\n    $('#landmass > path, .color-div').remove();\n    $('#colorsAssigned').fadeIn();\n    $('#colorsUnassigned').fadeOut();\n    polygons.forEach(function (i, d) {\n      var x = Math.round(i.data[0]),\n          y = Math.round(i.data[1]);\n      if (y == svgHeight) y--;\n      if (x == svgWidth) x--;\n      var p = (x + y * svgWidth) * 4;\n      var r = data[p],\n          g = data[p + 1],\n          b = data[p + 2];\n      var lab = d3.lab('rgb(' + r + ', ' + g + ', ' + b + ')');\n\n      if (type === 'hue') {\n        var normalized = _.round(normalize(lab.b + lab.a / 2, -50, 200), 2);\n      } else {\n        var normalized = _.round(normalize(lab.l, 0, 100), 2);\n      }\n\n      var rgb = color(1 - normalized);\n      var hex = toHEX(rgb);\n      heights[d] = normalized * 100;\n      landmass.append('path').attr('d', 'M' + i.join('L') + 'Z').attr('data-i', d).attr('fill', hex).attr('stroke', hex);\n    });\n\n    var unique = _toConsumableArray(new _Set(heights)).sort();\n\n    unique.forEach(function (h) {\n      var rgb = color(1 - h / 100);\n      var hex = toHEX(rgb);\n      $('#colorsAssigned').append('<div class=\"color-div\" id=\"' + hex.substr(1) + '\" data-height=\"' + h + '\" style=\"background-color: ' + hex + ';\"/>');\n    });\n    $('.color-div').click(selectColor);\n  }\n\n  function normalize(val, min, max) {\n    var normalized = (val - min) / (max - min);\n\n    if (normalized < 0) {\n      normalized = 0;\n    }\n\n    if (normalized > 1) {\n      normalized = 1;\n    }\n\n    return normalized;\n  }\n\n  function completeConvertion() {\n    mockHeightmap();\n    restartHistory();\n    $('.color-div').remove();\n    $('#colorsAssigned, #colorsUnassigned').fadeOut();\n    grid.attr('stroke-width', .1);\n    canvas.style.opacity = convertOverlay.value = convertOverlayValue.innerHTML = 0; // turn on paint brushes drag and cursor\n\n    viewbox.style('cursor', 'crosshair').call(drag);\n    $('#imageConverter').dialog('close');\n  } // Clear the map\n\n\n  function undraw() {\n    viewbox.selectAll('path, circle, line, text, use, #ruler > g').remove();\n    defs.selectAll('*').remove();\n    landmass.select('rect').remove();\n    cells = [], land = [], riversData = [], manors = [], states = [], features = [], queue = [];\n  } // Enter Heightmap Customization mode\n\n\n  function customizeHeightmap() {\n    customization = 1;\n    tip('Heightmap customization mode is active. Click on \"Complete\" to finalize the Heightmap', true);\n    $('#getMap').removeClass('buttonoff').addClass('glow');\n    resetZoom();\n    landmassCounter.innerHTML = '0';\n    $('#grid').fadeIn();\n    $('#toggleGrid').removeClass('buttonoff');\n    restartHistory();\n    $('#customizationMenu').slideDown();\n    $('#openEditor').slideUp();\n  } // Remove all customization related styles, reset values\n\n\n  function exitCustomization() {\n    customization = 0;\n    tip('', true);\n    canvas.style.opacity = 0;\n    $('#customizationMenu').slideUp();\n    $('#getMap').addClass('buttonoff').removeClass('glow');\n    $('#landmass').empty();\n    $('#grid').empty().fadeOut();\n    $('#toggleGrid').addClass('buttonoff');\n    restoreDefaultEvents();\n\n    if (!$('#toggleHeight').hasClass('buttonoff')) {\n      _toggleHeight();\n    }\n\n    closeDialogs();\n    history = [];\n    historyStage = 0;\n    $('#customizeHeightmap').slideUp();\n    $('#openEditor').slideDown();\n    debug.selectAll('.circle, .tag, .line').remove();\n  } // open editCountries dialog\n\n\n  function editCountries() {\n    if (cults.selectAll('path').size()) $('#toggleCultures').click();\n    if (regions.style('display') === 'none') $('#toggleCountries').click();\n    layoutPreset.value = 'layoutPolitical';\n    $('#countriesBody').empty();\n    $('#countriesHeader').children().removeClass('icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down');\n    var totalArea = 0,\n        totalBurgs = 0,\n        unit,\n        areaConv;\n\n    if (areaUnit.value === 'square') {\n      unit = ' ' + distanceUnit.value + '²';\n    } else {\n      unit = ' ' + areaUnit.value;\n    }\n\n    var totalPopulation = 0;\n\n    for (var s = 0; s < states.length; s++) {\n      $('#countriesBody').append('<div class=\"states\" id=\"state' + s + '\"></div>');\n      var el = $('#countriesBody div:last-child');\n      var burgsCount = states[s].burgs;\n      totalBurgs += burgsCount; // calculate user-friendly area and population\n\n      var area = Math.round(states[s].area * Math.pow(distanceScale.value, 2));\n      totalArea += area;\n      areaConv = si(area) + unit;\n      var urban = Math.round(states[s].urbanPopulation * urbanization.value * populationRate.value);\n\n      var rural = _.round(states[s].ruralPopulation * populationRate.value);\n\n      var population = (urban + rural) * 1000;\n      totalPopulation += population;\n      var populationConv = si(population);\n      var title = '\\'Total population: ' + populationConv + '; Rural population: ' + rural + 'K; Urban population: ' + urban + 'K\\'';\n      var neutral = states[s].color === 'neutral' || states[s].capital === 'neutral'; // append elements to countriesBody\n\n      if (!neutral) {\n        el.append('<input onmouseover=\"tip(\\'Country color. Click to change\\')\" class=\"stateColor\" type=\"color\" value=\"' + states[s].color + '\"/>');\n        el.append('<input onmouseover=\"tip(\\'Country name. Click and type to change\\')\" class=\"stateName\" value=\"' + states[s].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>');\n        var capital = states[s].capital !== 'select' ? manors[states[s].capital].name : 'select';\n\n        if (capital === 'select') {\n          el.append('<button onmouseover=\"tip(\\'Click on map to select a capital or to create a new capital\\')\" class=\"selectCapital\" id=\"selectCapital' + s + '\">★ select</button>');\n        } else {\n          el.append('<span onmouseover=\"tip(\\'Country capital. Click to enlange\\')\" class=\"icon-star-empty enlange\"></span>');\n          el.append('<input onmouseover=\"tip(\\'Capital name. Click and type to rename\\')\" class=\"stateCapital\" value=\"' + capital + '\" autocorrect=\"off\" spellcheck=\"false\"/>');\n        }\n\n        el.append('<span onmouseover=\"tip(\\'Country expansionism (defines competitive size)\\')\" class=\"icon-resize-full hidden\"></span>');\n        el.append('<input onmouseover=\"tip(\\'Capital expansionism (defines competitive size)\\')\" class=\"statePower hidden\" type=\"number\" min=\"0\" max=\"99\" step=\"0.1\" value=\"' + states[s].power + '\"/>');\n      } else {\n        el.append('<input class=\"stateColor placeholder\" disabled type=\"color\"/>');\n        el.append('<input onmouseover=\"tip(\\'Neutral burgs are united into this group. Click to change the group name\\')\" class=\"stateName italic\" id=\"stateName' + s + '\" value=\"' + states[s].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>');\n        el.append('<span class=\"icon-star-empty placeholder\"></span>');\n        el.append('<input class=\"stateCapital placeholder\"/>');\n        el.append('<span class=\"icon-resize-full hidden placeholder\"></span>');\n        el.append('<input class=\"statePower hidden placeholder\" value=\"0.0\"/>');\n      }\n\n      el.append('<span onmouseover=\"tip(\\'Cells count\\')\" class=\"icon-check-empty\"></span>');\n      el.append('<div onmouseover=\"tip(\\'Cells count\\')\" class=\"stateCells\">' + states[s].cells + '</div>');\n      el.append('<span onmouseover=\"tip(\\'Burgs count. Click to see a full list\\')\" style=\"padding-right: 1px\" class=\"stateBIcon icon-dot-circled\"></span>');\n      el.append('<div onmouseover=\"tip(\\'Burgs count. Click to see a full list\\')\" class=\"stateBurgs\">' + burgsCount + '</div>');\n      el.append('<span onmouseover=\"tip(\\'Country area: ' + (area + unit) + '\\')\" style=\"padding-right: 4px\" class=\"icon-map-o\"></span>');\n      el.append('<div onmouseover=\"tip(\\'Country area: ' + (area + unit) + '\\')\" class=\"stateArea\">' + areaConv + '</div>');\n      el.append('<span onmouseover=\"tip(' + title + ')\" class=\"icon-male\"></span>');\n      el.append('<input onmouseover=\"tip(' + title + ')\" class=\"statePopulation\" value=\"' + populationConv + '\">');\n\n      if (!neutral) {\n        el.append('<span onmouseover=\"tip(\\'Remove country, all assigned cells will become Neutral\\')\" class=\"icon-trash-empty\"></span>');\n        el.attr('data-country', states[s].name).attr('data-capital', capital).attr('data-expansion', states[s].power).attr('data-cells', states[s].cells).attr('data-burgs', states[s].burgs).attr('data-area', area).attr('data-population', population);\n      } else {\n        el.attr('data-country', 'bottom').attr('data-capital', 'bottom').attr('data-expansion', 'bottom').attr('data-cells', states[s].cells).attr('data-burgs', states[s].burgs).attr('data-area', area).attr('data-population', population);\n      }\n    } // initialize jQuery dialog\n\n\n    if (!$('#countriesEditor').is(':visible')) {\n      $('#countriesEditor').dialog({\n        title: 'Countries Editor',\n        minHeight: 'auto',\n        minWidth: Math.min(svgWidth, 390),\n        position: {\n          my: 'right top',\n          at: 'right-10 top+10',\n          of: 'svg'\n        }\n      }).on('dialogclose', function () {\n        if (customization === 2 || customization === 3) {\n          $('#countriesManuallyCancel').click();\n        }\n      });\n    } // restore customization Editor version\n\n\n    if (customization === 3) {\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').removeClass('hidden');\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').addClass('hidden');\n    } else {\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').addClass('hidden');\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').removeClass('hidden');\n    } // populate total line on footer\n\n\n    countriesFooterCountries.innerHTML = states.length;\n\n    if (states[states.length - 1].capital === 'neutral') {\n      countriesFooterCountries.innerHTML = states.length - 1;\n    }\n\n    countriesFooterBurgs.innerHTML = totalBurgs;\n    countriesFooterArea.innerHTML = si(totalArea) + unit;\n    countriesFooterPopulation.innerHTML = si(totalPopulation); // handle events\n\n    $('#countriesBody .states').hover(focusOnState, unfocusState);\n    $('.enlange').click(function () {\n      var s = +this.parentNode.id.slice(5);\n      var capital = states[s].capital;\n      var l = labels.select('[data-id=\\'' + capital + '\\']');\n      var x = +l.attr('x'),\n          y = +l.attr('y');\n      zoomTo(x, y, 8, 1600);\n    });\n    $('.stateName').on('input', function () {\n      var s = +this.parentNode.id.slice(5);\n      states[s].name = this.value;\n      labels.select('#regionLabel' + s).text(this.value);\n\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          var _color3 = '<input title=\"Country color. Click to change\" type=\"color\" class=\"stateColor\" value=\"' + states[s].color + '\"/>';\n\n          $('div[aria-describedby=\\'burgsEditor\\'] .ui-dialog-title').text('Burgs of ' + this.value).prepend(_color3);\n        }\n      }\n    });\n    $('.states > .stateColor').on('change', function () {\n      var s = +this.parentNode.id.slice(5);\n      states[s].color = this.value;\n      regions.selectAll('.region' + s).attr('fill', this.value).attr('stroke', this.value);\n\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          $('.ui-dialog-title > .stateColor').val(this.value);\n        }\n      }\n    });\n    $('.stateCapital').on('input', function () {\n      var s = +this.parentNode.id.slice(5);\n      var capital = states[s].capital;\n      manors[capital].name = this.value;\n      labels.select('[data-id=\\'' + capital + '\\']').text(this.value);\n\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          $('#burgs' + capital + ' > .burgName').val(this.value);\n        }\n      }\n    }).hover(focusCapital, unfocus);\n    $('.stateBurgs, .stateBIcon').on('click', editBurgs).hover(focusBurgs, unfocus);\n    $('#countriesBody > .states').on('click', function () {\n      if (customization === 2) {\n        $('.selected').removeClass('selected');\n        $(this).addClass('selected');\n        var state = +$(this).attr('id').slice(5);\n        var _color4 = states[state].color;\n\n        if (_color4 === 'neutral') {\n          _color4 = 'white';\n        }\n\n        if (debug.selectAll('.circle').size()) debug.selectAll('.circle').attr('stroke', _color4);\n      }\n    });\n    $('.selectCapital').on('click', function () {\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed');\n        tooltip.setAttribute('data-main', '');\n        restoreDefaultEvents();\n      } else {\n        $(this).addClass('pressed');\n        viewbox.style('cursor', 'crosshair').on('click', selectCapital);\n        tip('Click on the map to select or create a new capital', true);\n      }\n    });\n\n    function selectCapital() {\n      var point = d3.mouse(this);\n      var index = getIndex(point);\n\n      var x = _.round(point[0], 2),\n          y = _.round(point[1], 2);\n\n      if (cells[index].height < 20) {\n        tip('Cannot place capital on the water! Select a land cell');\n        return;\n      }\n\n      var state = +$('.selectCapital.pressed').attr('id').replace('selectCapital', '');\n      var oldState = cells[index].region;\n\n      if (oldState === 'neutral') {\n        oldState = states.length - 1;\n      }\n\n      if (cells[index].manor !== undefined) {\n        // cell has burg\n        var burg = cells[index].manor;\n\n        if (states[oldState].capital === burg) {\n          tip('Existing capital cannot be selected as a new state capital! Select other cell');\n          return;\n        } else {\n          // make this burg a new capital\n          var urbanFactor = 0.9; // for old neutrals\n\n          manors[burg].region = state;\n\n          if (oldState === 'neutral') {\n            manors[burg].population *= 1 / urbanFactor;\n          }\n\n          manors[burg].population *= 2; // give capital x2 population bonus\n\n          states[state].capital = burg;\n          moveBurgToGroup(burg, 'capitals');\n        }\n      } else {\n        // free cell -> create new burg for a capital\n        var closest = cultureTree.find(x, y);\n        var culture = cultureTree.data().indexOf(closest) || 0;\n        var name = generateName(culture);\n        var i = manors.length;\n        cells[index].manor = i;\n        states[state].capital = i;\n        var score = cells[index].score;\n\n        if (score <= 0) {\n          score = _.round(Math.random(), 2);\n        }\n\n        if (cells[index].crossroad) {\n          score += cells[index].crossroad;\n        } // crossroads\n\n\n        if (cells[index].confluence) {\n          score += Math.pow(cells[index].confluence, 0.3);\n        } // confluences\n\n\n        if (cells[index].port !== undefined) {\n          score *= 3;\n        } // port-capital\n\n\n        var _population = _.round(score, 1);\n\n        manors.push({\n          i: i,\n          cell: index,\n          x: x,\n          y: y,\n          region: state,\n          culture: culture,\n          name: name,\n          population: _population\n        });\n        burgIcons.select('#capitals').append('circle').attr('id', 'burg' + i).attr('data-id', i).attr('cx', x).attr('cy', y).attr('r', 1).on('click', editBurg);\n        burgLabels.select('#capitals').append('text').attr('data-id', i).attr('x', x).attr('y', y).attr('dy', '-0.35em').text(name).on('click', editBurg);\n      }\n\n      cells[index].region = state;\n      cells[index].neighbors.map(function (n) {\n        if (cells[n].height < 20) {\n          return;\n        }\n\n        if (cells[n].manor !== undefined) {\n          return;\n        }\n\n        cells[n].region = state;\n      });\n      redrawRegions();\n      recalculateStateData(oldState); // re-calc old state data\n\n      recalculateStateData(state); // calc new state data\n\n      editCountries();\n      restoreDefaultEvents();\n    }\n\n    $('.statePower').on('input', function () {\n      var s = +this.parentNode.id.slice(5);\n      states[s].power = +this.value;\n      regenerateCountries();\n    });\n    $('.statePopulation').on('change', function () {\n      var s = +this.parentNode.id.slice(5);\n      var popOr = +$(this).parent().attr('data-population');\n      var popNew = getInteger(this.value);\n\n      if (!_Number$isInteger(popNew) || popNew < 1000) {\n        this.value = si(popOr);\n        return;\n      }\n\n      var change = popNew / popOr;\n      states[s].urbanPopulation = _.round(states[s].urbanPopulation * change, 2);\n      states[s].ruralPopulation = _.round(states[s].ruralPopulation * change, 2);\n      var urban = Math.round(states[s].urbanPopulation * urbanization.value * populationRate.value);\n      var rural = Math.round(states[s].ruralPopulation * populationRate.value);\n      var population = (urban + rural) * 1000;\n      $(this).parent().attr('data-population', population);\n      this.value = si(population);\n      var total = 0;\n      $('#countriesBody > div').each(function (e, i) {\n        total += +$(this).attr('data-population');\n      });\n      countriesFooterPopulation.innerHTML = si(total);\n\n      if (states[s].capital === 'neutral') {\n        s = 'neutral';\n      }\n\n      manors.map(function (m) {\n        if (m.region !== s) {\n          return;\n        }\n\n        m.population = _.round(m.population * change, 2);\n      });\n    }); // fully remove country\n\n    $('#countriesBody .icon-trash-empty').on('click', function () {\n      var s = +this.parentNode.id.slice(5);\n      alertMessage.innerHTML = \"Are you sure you want to remove the country? All lands and burgs will become neutral\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove country',\n        buttons: {\n          Remove: function Remove() {\n            removeCountry(s);\n            $(this).dialog('close');\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n\n    function removeCountry(s) {\n      var cellsCount = states[s].cells;\n      var capital = +states[s].capital;\n      if (!isNaN(capital)) moveBurgToGroup(capital, 'towns');\n      states.splice(s, 1);\n      states.map(function (s, i) {\n        s.i = i;\n      });\n      land.map(function (c) {\n        if (c.region === s) c.region = 'neutral';else if (c.region > s) c.region -= 1;\n      }); // do only if removed state had cells\n\n      if (cellsCount) {\n        manors.map(function (b) {\n          if (b.region === s) b.region = 'neutral';\n        }); // re-calculate neutral data\n\n        var i = states.length;\n\n        if (states[i - 1].capital !== 'neutral') {\n          states.push({\n            i: i,\n            color: 'neutral',\n            name: 'Neutrals',\n            capital: 'neutral'\n          });\n        }\n\n        recalculateStateData(i - 1); // re-calc data for neutrals\n\n        redrawRegions();\n      }\n\n      editCountries();\n    }\n\n    $('#countriesNeutral, #countriesNeutralNumber').on('change', regenerateCountries);\n  } // burgs list + editor\n\n\n  function editBurgs(context, s) {\n    if (s === undefined) {\n      s = +this.parentNode.id.slice(5);\n    }\n\n    $('#burgsEditor').attr('data-state', s);\n    $('#burgsBody').empty();\n    $('#burgsHeader').children().removeClass('icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down');\n    var region = states[s].capital === 'neutral' ? 'neutral' : s;\n    var burgs = $.grep(manors, function (e) {\n      return e.region === region;\n    });\n    var populationArray = [];\n    burgs.map(function (b) {\n      $('#burgsBody').append('<div class=\"states\" id=\"burgs' + b.i + '\"></div>');\n      var el = $('#burgsBody div:last-child');\n      el.append('<span title=\"Click to enlarge the burg\" style=\"padding-right: 2px\" class=\"enlarge icon-globe\"></span>');\n      el.append('<input title=\"Burg name. Click and type to change\" class=\"burgName\" value=\"' + b.name + '\" autocorrect=\"off\" spellcheck=\"false\"/>');\n      el.append('<span title=\"Burg culture\" class=\"icon-book\" style=\"padding-right: 2px\"></span>');\n      el.append('<div title=\"Burg culture\" class=\"burgCulture\">' + cultures[b.culture].name + '</div>');\n      var population = b.population * urbanization.value * populationRate.value * 1000;\n      populationArray.push(population);\n      population = population > 1e4 ? si(population) : _.round(population, -1);\n      el.append('<span title=\"Population\" class=\"icon-male\"></span>');\n      el.append('<input title=\"Population. Input to change\" class=\"burgPopulation\" value=\"' + population + '\"/>');\n      var capital = states[s].capital;\n      var type = 'z-burg'; // usual burg by default\n\n      if (b.i === capital) {\n        el.append('<span title=\"Capital\" class=\"icon-star-empty\"></span>');\n        type = 'c-capital';\n      } else {\n        el.append('<span class=\"icon-star-empty placeholder\"></span>');\n      }\n\n      if (cells[b.cell].port !== undefined) {\n        el.append('<span title=\"Port\" class=\"icon-anchor small\"></span>');\n\n        if (type === 'c-capital') {\n          type = 'a-capital-port';\n        } else {\n          type = 'p-port';\n        }\n      } else {\n        el.append('<span class=\"icon-anchor placeholder\"></span>');\n      }\n\n      if (b.i !== capital) {\n        el.append('<span title=\"Remove burg\" class=\"icon-trash-empty\"></span>');\n      }\n\n      el.attr('data-burg', b.name).attr('data-culture', cultures[b.culture].name).attr('data-population', b.population).attr('data-type', type);\n    });\n\n    if (!$('#burgsEditor').is(':visible')) {\n      $('#burgsEditor').dialog({\n        title: 'Burgs of ' + states[s].name,\n        minHeight: 'auto',\n        width: 'auto',\n        position: {\n          my: 'right bottom',\n          at: 'right-10 bottom-10',\n          of: 'svg'\n        }\n      });\n\n      var _color5 = '<input title=\"Country color. Click to change\" type=\"color\" class=\"stateColor\" value=\"' + states[s].color + '\"/>';\n\n      if (region !== 'neutral') {\n        $('div[aria-describedby=\\'burgsEditor\\'] .ui-dialog-title').prepend(_color5);\n      }\n    } // populate total line on footer\n\n\n    burgsFooterBurgs.innerHTML = burgs.length;\n    burgsFooterCulture.innerHTML = $('#burgsBody div:first-child .burgCulture').text();\n\n    var avPop = _.round(d3.mean(populationArray), -1);\n\n    burgsFooterPopulation.value = avPop;\n    $('.enlarge').click(function () {\n      var b = +this.parentNode.id.slice(5);\n      var l = labels.select('[data-id=\\'' + b + '\\']');\n      var x = +l.attr('x'),\n          y = +l.attr('y');\n      zoomTo(x, y, 8, 1600);\n    });\n    $('#burgsBody > div').hover(focusBurg, unfocus);\n    $('#burgsBody > div').click(function () {\n      if (!$('#changeCapital').hasClass('pressed')) return;\n      var s = +$('#burgsEditor').attr('data-state');\n      var newCap = +$(this).attr('id').slice(5);\n      var oldCap = +states[s].capital;\n\n      if (newCap === oldCap) {\n        tip('This burg is already a capital! Please select a different burg', null, 'error');\n        return;\n      }\n\n      $('#changeCapital').removeClass('pressed');\n      states[s].capital = newCap;\n      if (!isNaN(oldCap)) moveBurgToGroup(oldCap, 'towns');\n      recalculateStateData(s);\n      moveBurgToGroup(newCap, 'capitals');\n    });\n    $('.burgName').on('input', function () {\n      var b = +this.parentNode.id.slice(5);\n      manors[b].name = this.value;\n      labels.select('[data-id=\\'' + b + '\\']').text(this.value);\n\n      if (b === s && $('#countriesEditor').is(':visible')) {\n        $('#state' + s + ' > .stateCapital').val(this.value);\n      }\n    });\n    $('.ui-dialog-title > .stateColor').on('change', function () {\n      states[s].color = this.value;\n      regions.selectAll('.region' + s).attr('fill', this.value).attr('stroke', this.value);\n\n      if ($('#countriesEditor').is(':visible')) {\n        $('#state' + s + ' > .stateColor').val(this.value);\n      }\n    });\n    $('.burgPopulation').on('change', function () {\n      var b = +this.parentNode.id.slice(5);\n      var pop = getInteger(this.value);\n\n      if (!_Number$isInteger(pop) || pop < 10) {\n        var orig = _.round(manors[b].population * urbanization.value * populationRate.value * 1000, 2);\n\n        this.value = si(orig);\n        return;\n      }\n\n      populationRaw = _.round(pop / urbanization.value / populationRate.value / 1000, 2);\n      var change = populationRaw - manors[b].population;\n      manors[b].population = populationRaw;\n      $(this).parent().attr('data-population', populationRaw);\n      this.value = si(pop);\n      var state = manors[b].region;\n\n      if (state === 'neutral') {\n        state = states.length - 1;\n      }\n\n      states[state].urbanPopulation += change;\n      updateCountryPopulationUI(state);\n      var average = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000;\n      burgsFooterPopulation.value = _.round(average, -1);\n    });\n    $('#burgsFooterPopulation').on('change', function () {\n      var state = +$('#burgsEditor').attr('data-state');\n      var newPop = +this.value;\n      var avPop = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000;\n\n      if (!_Number$isInteger(newPop) || newPop < 10) {\n        this.value = _.round(avPop, -1);\n        return;\n      }\n\n      var change = +this.value / avPop;\n      $('#burgsBody > div').each(function (e, i) {\n        var b = +this.id.slice(5);\n\n        var pop = _.round(manors[b].population * change, 2);\n\n        manors[b].population = pop;\n        $(this).attr('data-population', pop);\n        var popUI = pop * urbanization.value * populationRate.value * 1000;\n        popUI = popUI > 1e4 ? si(popUI) : _.round(popUI, -1);\n        $(this).children().filter('.burgPopulation').val(popUI);\n      });\n      states[state].urbanPopulation = _.round(states[state].urbanPopulation * change, 2);\n      updateCountryPopulationUI(state);\n    });\n    $('#burgsBody .icon-trash-empty').on('click', function () {\n      alertMessage.innerHTML = \"Are you sure you want to remove the burg?\";\n      var b = +this.parentNode.id.slice(5);\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove burg',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            var state = +$('#burgsEditor').attr('data-state');\n            $('#burgs' + b).remove();\n            var cell = manors[b].cell;\n            manors[b].region = 'removed';\n            cells[cell].manor = undefined;\n            states[state].burgs = states[state].burgs - 1;\n            burgsFooterBurgs.innerHTML = states[state].burgs;\n            countriesFooterBurgs.innerHTML = +countriesFooterBurgs.innerHTML - 1;\n            states[state].urbanPopulation = states[state].urbanPopulation - manors[b].population;\n            var avPop = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000;\n            burgsFooterPopulation.value = _.round(avPop, -1);\n\n            if ($('#countriesEditor').is(':visible')) {\n              $('#state' + state + ' > .stateBurgs').text(states[state].burgs);\n            }\n\n            labels.select('[data-id=\\'' + b + '\\']').remove();\n            icons.select('[data-id=\\'' + b + '\\']').remove();\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n  } // onhover style functions\n\n\n  function focusOnState() {\n    var s = +this.id.slice(5);\n    labels.select('#regionLabel' + s).classed('drag', true);\n    document.getElementsByClassName('region' + s)[0].style.stroke = 'red';\n    document.getElementsByClassName('region' + s)[0].setAttribute('filter', 'url(#blur1)');\n  }\n\n  function unfocusState() {\n    var s = +this.id.slice(5);\n    labels.select('#regionLabel' + s).classed('drag', false);\n    document.getElementsByClassName('region' + s)[0].style.stroke = 'none';\n    document.getElementsByClassName('region' + s)[0].setAttribute('filter', null);\n  }\n\n  function focusCapital() {\n    var s = +this.parentNode.id.slice(5);\n    var capital = states[s].capital;\n    labels.select('[data-id=\\'' + capital + '\\']').classed('drag', true);\n    icons.select('[data-id=\\'' + capital + '\\']').classed('drag', true);\n  }\n\n  function focusBurgs() {\n    var s = +this.parentNode.id.slice(5);\n    var stateManors = $.grep(manors, function (e) {\n      return e.region === s;\n    });\n    stateManors.map(function (m) {\n      labels.select('[data-id=\\'' + m.i + '\\']').classed('drag', true);\n      icons.select('[data-id=\\'' + m.i + '\\']').classed('drag', true);\n    });\n  }\n\n  function focusBurg() {\n    var b = +this.id.slice(5);\n    var l = labels.select('[data-id=\\'' + b + '\\']');\n    l.classed('drag', true);\n  }\n\n  function unfocus() {\n    $('.drag').removeClass('drag');\n  } // save dialog position if \"stable\" dialog window is dragged\n\n\n  $('.stable').on('dialogdragstop', function (event, ui) {\n    sessionStorage.setItem(this.id, [ui.offset.left, ui.offset.top]);\n  }); // restore saved dialog position on \"stable\" dialog window open\n\n  $('.stable').on('dialogopen', function (event, ui) {\n    var pos = sessionStorage.getItem(this.id);\n\n    if (!pos) {\n      return;\n    }\n\n    pos = pos.split(',');\n\n    if (pos[0] > $(window).width() - 100 || pos[1] > $(window).width() - 40) {\n      return;\n    } // prevent showing out of screen\n\n\n    var at = \"left+\".concat(pos[0], \" top+\").concat(pos[1]);\n    $(this).dialog('option', 'position', {\n      my: 'left top',\n      at: at,\n      of: 'svg'\n    });\n  }); // open editCultures dialog\n\n  function editCultures() {\n    if (!cults.selectAll('path').size()) $('#toggleCultures').click();\n    if (regions.style('display') !== 'none') $('#toggleCountries').click();\n    layoutPreset.value = 'layoutCultural';\n    $('#culturesBody').empty();\n    $('#culturesHeader').children().removeClass('icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down'); // collect data\n\n    var cellsC = [],\n        areas = [],\n        rurPops = [],\n        urbPops = [];\n    var unit = areaUnit.value === 'square' ? ' ' + distanceUnit.value + '²' : ' ' + areaUnit.value;\n    land.map(function (l) {\n      var c = l.culture;\n      if (c === undefined) return;\n      cellsC[c] = cellsC[c] ? cellsC[c] + 1 : 1;\n      areas[c] = areas[c] ? areas[c] + l.area : l.area;\n      rurPops[c] = rurPops[c] ? rurPops[c] + l.pop : l.pop;\n    });\n    manors.map(function (m) {\n      var c = m.culture;\n      if (isNaN(c)) return;\n      urbPops[c] = urbPops[c] ? urbPops[c] + m.population : m.population;\n    });\n    if (!nameBases[0]) applyDefaultNamesData();\n\n    for (var c = 0; c < cultures.length; c++) {\n      $('#culturesBody').append('<div class=\"states cultures\" id=\"culture' + c + '\"></div>');\n\n      if (cellsC[c] === undefined) {\n        cellsC[c] = 0;\n        areas[c] = 0;\n        rurPops[c] = 0;\n      }\n\n      if (urbPops[c] === undefined) urbPops[c] = 0;\n      var area = Math.round(areas[c] * Math.pow(distanceScale.value, 2));\n      var areaConv = si(area) + unit;\n      var urban = Math.round(urbPops[c] * +urbanization.value * populationRate.value);\n      var rural = Math.round(rurPops[c] * populationRate.value);\n      var population = (urban + rural) * 1000;\n      var populationConv = si(population);\n      var title = '\\'Total population: ' + populationConv + '; Rural population: ' + rural + 'K; Urban population: ' + urban + 'K\\'';\n      var b = cultures[c].base;\n      if (b >= nameBases.length) b = 0;\n      var base = nameBases[b].name;\n      var el = $('#culturesBody div:last-child');\n      el.append('<input onmouseover=\"tip(\\'Culture color. Click to change\\')\" class=\"stateColor\" type=\"color\" value=\"' + cultures[c].color + '\"/>');\n      el.append('<input onmouseover=\"tip(\\'Culture name. Click and type to change\\')\" class=\"cultureName\" value=\"' + cultures[c].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>');\n      el.append('<span onmouseover=\"tip(\\'Culture cells count\\')\" class=\"icon-check-empty\"></span>');\n      el.append('<div onmouseover=\"tip(\\'Culture cells count\\')\" class=\"stateCells\">' + cellsC[c] + '</div>');\n      el.append('<span onmouseover=\"tip(\\'Culture area: ' + areaConv + '\\')\" style=\"padding-right: 4px\" class=\"icon-map-o\"></span>');\n      el.append('<div onmouseover=\"tip(\\'Culture area: ' + areaConv + '\\')\" class=\"stateArea\">' + areaConv + '</div>');\n      el.append('<span onmouseover=\"tip(' + title + ')\" class=\"icon-male\"></span>');\n      el.append('<div onmouseover=\"tip(' + title + ')\" class=\"culturePopulation\">' + populationConv + '</div>');\n      el.append('<span onmouseover=\"tip(\\'Click to re-generate names for burgs with this culture assigned\\')\" class=\"icon-arrows-cw\"></span>');\n      el.append('<select onmouseover=\"tip(\\'Culture namesbase. Click to change\\')\" class=\"cultureBase\"></select>');\n\n      if (cultures.length > 1) {\n        el.append('<span onmouseover=\"tip(\\'Remove culture. Remaining cultures will be recalculated\\')\" class=\"icon-trash-empty\"></span>');\n      }\n\n      el.attr('data-color', cultures[c].color).attr('data-culture', cultures[c].name).attr('data-cells', cellsC[c]).attr('data-area', area).attr('data-population', population).attr('data-base', base);\n    }\n\n    addCultureBaseOptions();\n    drawCultureCenters();\n    var activeCultures = cellsC.reduce(function (s, v) {\n      if (v) {\n        return s + 1;\n      } else {\n        return s;\n      }\n    }, 0);\n    culturesFooterCultures.innerHTML = activeCultures + '/' + cultures.length;\n    culturesFooterCells.innerHTML = land.length;\n    var totalArea = areas.reduce(function (s, v) {\n      return s + v;\n    });\n    totalArea = Math.round(totalArea * Math.pow(distanceScale.value, 2));\n    culturesFooterArea.innerHTML = si(totalArea) + unit;\n    var totalPopulation = rurPops.reduce(function (s, v) {\n      return s + v;\n    }) * urbanization.value;\n    totalPopulation += urbPops.reduce(function (s, v) {\n      return s + v;\n    });\n    culturesFooterPopulation.innerHTML = si(totalPopulation * 1000 * populationRate.value); // initialize jQuery dialog\n\n    if (!$('#culturesEditor').is(':visible')) {\n      $('#culturesEditor').dialog({\n        title: 'Cultures Editor',\n        minHeight: 'auto',\n        minWidth: Math.min(svgWidth, 336),\n        position: {\n          my: 'right top',\n          at: 'right-10 top+10',\n          of: 'svg'\n        },\n        close: function close() {\n          debug.select('#cultureCenters').selectAll('*').remove();\n          exitCulturesManualAssignment();\n        }\n      });\n    }\n\n    $('.cultures').hover(function () {\n      var c = +this.id.slice(7);\n      debug.select('#cultureCenter' + c).attr('stroke', '#000000e6');\n    }, function () {\n      var c = +this.id.slice(7);\n      debug.select('#cultureCenter' + c).attr('stroke', '#00000080');\n    });\n    $('.cultures').on('click', function () {\n      if (customization !== 4) return;\n      var c = +this.id.slice(7);\n      $('.selected').removeClass('selected');\n      $(this).addClass('selected');\n      var color = cultures[c].color;\n      debug.selectAll('.circle').attr('stroke', color);\n    });\n    $('.cultures .stateColor').on('input', function () {\n      var c = +this.parentNode.id.slice(7);\n      var old = cultures[c].color;\n      cultures[c].color = this.value;\n      debug.select('#cultureCenter' + c).attr('fill', this.value);\n      cults.selectAll('[fill=\"' + old + '\"]').attr('fill', this.value).attr('stroke', this.value);\n    });\n    $('.cultures .cultureName').on('input', function () {\n      var c = +this.parentNode.id.slice(7);\n      cultures[c].name = this.value;\n    });\n    $('.cultures .icon-arrows-cw').on('click', function () {\n      var c = +this.parentNode.id.slice(7);\n      manors.forEach(function (m) {\n        if (m.region === 'removed') return;\n        if (m.culture !== c) return;\n        m.name = generateName(c);\n        labels.select('[data-id=\\'' + m.i + '\\']').text(m.name);\n      });\n    });\n    $('#culturesBody .icon-trash-empty').on('click', function () {\n      var c = +this.parentNode.id.slice(7);\n      cultures.splice(c, 1);\n      var centers = cultures.map(function (c) {\n        return c.center;\n      });\n      cultureTree = d3.quadtree(centers);\n      recalculateCultures('fullRedraw');\n      editCultures();\n    });\n    if (modules.editCultures) return;\n    modules.editCultures = true;\n\n    function addCultureBaseOptions() {\n      $('.cultureBase').each(function () {\n        var c = +this.parentNode.id.slice(7);\n\n        for (var i = 0; i < nameBases.length; i++) {\n          this.options.add(new Option(nameBases[i].name, i));\n        }\n\n        this.value = cultures[c].base;\n        this.addEventListener('change', function () {\n          cultures[c].base = +this.value;\n        });\n      });\n    }\n\n    function drawCultureCenters() {\n      var cultureCenters = debug.select('#cultureCenters');\n\n      if (cultureCenters.size()) {\n        cultureCenters.selectAll('*').remove();\n      } else {\n        cultureCenters = debug.append('g').attr('id', 'cultureCenters');\n      }\n\n      for (var _c5 = 0; _c5 < cultures.length; _c5++) {\n        cultureCenters.append('circle').attr('id', 'cultureCenter' + _c5).attr('cx', cultures[_c5].center[0]).attr('cy', cultures[_c5].center[1]).attr('r', 6).attr('stroke-width', 2).attr('stroke', '#00000080').attr('fill', cultures[_c5].color).on('mousemove', cultureCenterTip).on('mouseleave', function () {\n          tip('', true);\n        }).call(d3.drag().on('start', cultureCenterDrag));\n      }\n    }\n\n    function cultureCenterTip() {\n      tip('Drag to move culture center and re-calculate cultures', true);\n    }\n\n    function cultureCenterDrag() {\n      var el = d3.select(this);\n      var c = +this.id.slice(13);\n      d3.event.on('drag', function () {\n        var x = d3.event.x,\n            y = d3.event.y;\n        el.attr('cx', x).attr('cy', y);\n        cultures[c].center = [x, y];\n        var centers = cultures.map(function (c) {\n          return c.center;\n        });\n        cultureTree = d3.quadtree(centers);\n        recalculateCultures();\n      });\n    }\n\n    $('#culturesPercentage').on('click', function () {\n      var el = $('#culturesEditor');\n\n      if (el.attr('data-type') === 'absolute') {\n        el.attr('data-type', 'percentage');\n        var totalCells = land.length;\n        var _totalArea = culturesFooterArea.innerHTML;\n        _totalArea = getInteger(_totalArea.split(' ')[0]);\n\n        var _totalPopulation = getInteger(culturesFooterPopulation.innerHTML);\n\n        $('#culturesBody > .cultures').each(function () {\n          var cells = Math.round($(this).attr('data-cells') / totalCells * 100);\n          var area = Math.round($(this).attr('data-area') / _totalArea * 100);\n          var population = Math.round($(this).attr('data-population') / _totalPopulation * 100);\n          $(this).children().filter('.stateCells').text(cells + '%');\n          $(this).children().filter('.stateArea').text(area + '%');\n          $(this).children().filter('.culturePopulation').text(population + '%');\n        });\n      } else {\n        el.attr('data-type', 'absolute');\n        editCultures();\n      }\n    });\n    $('#culturesManually').on('click', function () {\n      customization = 4;\n      tip('Click to select a culture, drag the circle to re-assign', true);\n      $('#culturesBottom').children().hide();\n      $('#culturesManuallyButtons').show();\n      viewbox.style('cursor', 'crosshair').call(drag).on('click', changeSelectedOnClick);\n      debug.select('#cultureCenters').selectAll('*').remove();\n    });\n    $('#culturesManuallyComplete').on('click', function () {\n      var changed = cults.selectAll('[data-culture]');\n      changed.each(function () {\n        var i = +this.id.slice(4);\n        var c = +this.getAttribute('data-culture');\n        this.removeAttribute('data-culture');\n        cells[i].culture = c;\n        var manor = cells[i].manor;\n        if (manor !== undefined) manors[manor].culture = c;\n      });\n      exitCulturesManualAssignment();\n      if (changed.size()) editCultures();\n    });\n    $('#culturesManuallyCancel').on('click', function () {\n      cults.selectAll('[data-culture]').each(function () {\n        var i = +this.id.slice(4);\n        var c = cells[i].culture;\n        this.removeAttribute('data-culture');\n        var color = cultures[c].color;\n        this.setAttribute('fill', color);\n        this.setAttribute('stroke', color);\n      });\n      exitCulturesManualAssignment();\n      drawCultureCenters();\n    });\n\n    function exitCulturesManualAssignment() {\n      debug.selectAll('.circle').remove();\n      $('#culturesBottom').children().show();\n      $('#culturesManuallyButtons').hide();\n      $('.selected').removeClass('selected');\n      customization = 0;\n      restoreDefaultEvents();\n    }\n\n    $('#culturesRandomize').on('click', function () {\n      var centers = cultures.map(function (c) {\n        var x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1);\n        var y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1);\n        var center = [x, y];\n        c.center = center;\n        return center;\n      });\n      cultureTree = d3.quadtree(centers);\n      recalculateCultures();\n      drawCultureCenters();\n      editCultures();\n    });\n    $('#culturesExport').on('click', function () {\n      var unit = areaUnit.value === 'square' ? distanceUnit.value + '2' : areaUnit.value;\n      var data = 'Culture,Cells,Area (' + unit + '),Population,Namesbase\\n'; // headers\n\n      $('#culturesBody > .cultures').each(function () {\n        data += $(this).attr('data-culture') + ',';\n        data += $(this).attr('data-cells') + ',';\n        data += $(this).attr('data-area') + ',';\n        data += $(this).attr('data-population') + ',';\n        data += $(this).attr('data-base') + '\\n';\n      });\n      var dataBlob = new Blob([data], {\n        type: 'text/plain'\n      });\n      var url = window.URL.createObjectURL(dataBlob);\n      var link = document.createElement('a');\n      document.body.appendChild(link);\n      link.download = 'cultures_data' + _Date$now() + '.csv';\n      link.href = url;\n      link.click();\n      window.setTimeout(function () {\n        window.URL.revokeObjectURL(url);\n      }, 2000);\n    });\n    $('#culturesRegenerateNames').on('click', function () {\n      manors.forEach(function (m) {\n        if (m.region === 'removed') return;\n        var culture = m.culture;\n        m.name = generateName(culture);\n        labels.select('[data-id=\\'' + m.i + '\\']').text(m.name);\n      });\n    });\n    $('#culturesEditNamesBase').on('click', editNamesbase);\n    $('#culturesAdd').on('click', function () {\n      var x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1);\n      var y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1);\n      var center = [x, y];\n      var culture, base, name, color;\n\n      if (cultures.length < defaultCultures.length) {\n        // add one of the default cultures\n        culture = cultures.length;\n        base = defaultCultures[culture].base;\n        color = defaultCultures[culture].color;\n        name = defaultCultures[culture].name;\n      } else {\n        // add random culture besed on one of the current ones\n        culture = _.random(cultures.length - 1);\n        name = generateName(culture);\n        color = colors20(cultures.length % 20);\n        base = cultures[culture].base;\n      }\n\n      cultures.push({\n        name: name,\n        color: color,\n        base: base,\n        center: center\n      });\n      var centers = cultures.map(function (c) {\n        return c.center;\n      });\n      cultureTree = d3.quadtree(centers);\n      recalculateCultures();\n      editCultures();\n    });\n  } // open editNamesbase dialog\n\n\n  function editNamesbase() {\n    // update list of bases\n    var select = document.getElementById('namesbaseSelect');\n\n    for (var i = select.options.length; i < nameBases.length; i++) {\n      var option = new Option(nameBases[i].name, i);\n      select.options.add(option);\n    } // restore previous state\n\n\n    var textarea = document.getElementById('namesbaseTextarea');\n    var selected = +textarea.getAttribute('data-base');\n    if (selected >= nameBases.length) selected = 0;\n    select.value = selected;\n    if (textarea.value === '') namesbaseUpdateInputs(selected);\n    var examples = document.getElementById('namesbaseExamples');\n    if (examples.innerHTML === '') namesbaseUpdateExamples(selected); // open a dialog\n\n    $('#namesbaseEditor').dialog({\n      title: 'Namesbase Editor',\n      minHeight: 'auto',\n      minWidth: Math.min(svgWidth, 400),\n      position: {\n        my: 'center',\n        at: 'center',\n        of: 'svg'\n      }\n    });\n    if (modules.editNamesbase) return;\n    modules.editNamesbase = true;\n\n    function namesbaseUpdateInputs(selected) {\n      var textarea = document.getElementById('namesbaseTextarea');\n      textarea.value = nameBase[selected].join(', ');\n      textarea.setAttribute('data-base', selected);\n      var name = document.getElementById('namesbaseName');\n      var method = document.getElementById('namesbaseMethod');\n      var min = document.getElementById('namesbaseMin');\n      var max = document.getElementById('namesbaseMax');\n      var dublication = document.getElementById('namesbaseDouble');\n      name.value = nameBases[selected].name;\n      method.value = nameBases[selected].method;\n      min.value = nameBases[selected].min;\n      max.value = nameBases[selected].max;\n      dublication.value = nameBases[selected].d;\n    }\n\n    function namesbaseUpdateExamples(selected) {\n      var examples = document.getElementById('namesbaseExamples');\n      var text = '';\n\n      for (var _i7 = 0; _i7 < 10; _i7++) {\n        var name = generateName(false, selected);\n\n        if (name === undefined) {\n          text = 'Cannot generate examples. Please verify the data';\n          break;\n        }\n\n        if (_i7 !== 0) text += ', ';\n        text += name;\n      }\n\n      examples.innerHTML = text;\n    }\n\n    $('#namesbaseSelect').on('change', function () {\n      var selected = +this.value;\n      namesbaseUpdateInputs(selected);\n      namesbaseUpdateExamples(selected);\n    });\n    $('#namesbaseName').on('input', function () {\n      var base = +textarea.getAttribute('data-base');\n      var select = document.getElementById('namesbaseSelect');\n      select.options[base].innerHTML = this.value;\n      nameBases[base].name = this.value;\n    });\n    $('#namesbaseTextarea').on('input', function () {\n      var base = +this.getAttribute('data-base');\n      var data = textarea.value.replace(/ /g, '').split(',');\n      nameBase[base] = data;\n\n      if (data.length < 3) {\n        chain[base] = [];\n\n        var _examples = document.getElementById('namesbaseExamples');\n\n        _examples.innerHTML = 'Please provide a correct source data';\n        return;\n      }\n\n      var method = document.getElementById('namesbaseMethod').value;\n      if (method !== 'selection') chain[base] = calculateChain(base);\n    });\n    $('#namesbaseMethod').on('change', function () {\n      var base = +textarea.getAttribute('data-base');\n      nameBases[base].method = this.value;\n      if (this.value !== 'selection') chain[base] = calculateChain(base);\n    });\n    $('#namesbaseMin').on('change', function () {\n      var base = +textarea.getAttribute('data-base');\n\n      if (+this.value > nameBases[base].max) {\n        tip('Minimal length cannot be greated that maximal');\n      } else {\n        nameBases[base].min = +this.value;\n      }\n    });\n    $('#namesbaseMax').on('change', function () {\n      var base = +textarea.getAttribute('data-base');\n\n      if (+this.value < nameBases[base].min) {\n        tip('Maximal length cannot be less than minimal');\n      } else {\n        nameBases[base].max = +this.value;\n      }\n    });\n    $('#namesbaseDouble').on('change', function () {\n      var base = +textarea.getAttribute('data-base');\n      nameBases[base].d = this.value;\n    });\n    $('#namesbaseDefault').on('click', function () {\n      alertMessage.innerHTML = \"Are you sure you want to restore the default namesbase?\\n      All custom bases will be removed and default ones will be assigned to existing cultures.\\n      Meanwhile existing names will not be changed.\";\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Restore default data',\n        buttons: {\n          Restore: function Restore() {\n            $(this).dialog('close');\n            $('#namesbaseEditor').dialog('close');\n            var select = document.getElementById('namesbaseSelect');\n            select.options.length = 0;\n            document.getElementById('namesbaseTextarea').value = '';\n            document.getElementById('namesbaseTextarea').setAttribute('data-base', 0);\n            document.getElementById('namesbaseExamples').innerHTML === '';\n            applyDefaultNamesData();\n            var baseMax = nameBases.length - 1;\n            cultures.forEach(function (c) {\n              if (c.base > baseMax) c.base = baseMax;\n            });\n            chains = {};\n            calculateChains();\n            editCultures();\n            editNamesbase();\n          },\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n    $('#namesbaseAdd').on('click', function () {\n      var base = nameBases.length;\n      var name = 'Base' + base;\n      var method = document.getElementById('namesbaseMethod').value;\n      var select = document.getElementById('namesbaseSelect');\n      select.options.add(new Option(name, base));\n      select.value = base;\n      nameBases.push({\n        name: name,\n        method: method,\n        min: 4,\n        max: 10,\n        d: '',\n        m: 1\n      });\n      nameBase.push([]);\n      document.getElementById('namesbaseName').value = name;\n      var textarea = document.getElementById('namesbaseTextarea');\n      textarea.value = '';\n      textarea.setAttribute('data-base', base);\n      document.getElementById('namesbaseExamples').innerHTML = '';\n      chain[base] = [];\n      editCultures();\n    });\n    $('#namesbaseExamples, #namesbaseUpdateExamples').on('click', function () {\n      var select = document.getElementById('namesbaseSelect');\n      namesbaseUpdateExamples(+select.value);\n    });\n    $('#namesbaseDownload').on('click', function () {\n      var nameBaseString = _JSON$stringify(nameBase) + '\\r\\n';\n\n      var nameBasesString = _JSON$stringify(nameBases);\n\n      var dataBlob = new Blob([nameBaseString + nameBasesString], {\n        type: 'text/plain'\n      });\n      var url = window.URL.createObjectURL(dataBlob);\n      var link = document.createElement('a');\n      link.download = 'namebase' + _Date$now() + '.txt';\n      link.href = url;\n      link.click();\n    });\n    $('#namesbaseUpload').on('click', function () {\n      namesbaseToLoad.click();\n    });\n    $('#namesbaseToLoad').change(function () {\n      var fileToLoad = this.files[0];\n      this.value = '';\n      var fileReader = new FileReader();\n\n      fileReader.onload = function (fileLoadedEvent) {\n        var dataLoaded = fileLoadedEvent.target.result;\n        var data = dataLoaded.split('\\r\\n');\n\n        if (data[0] && data[1]) {\n          nameBase = JSON.parse(data[0]);\n          nameBases = JSON.parse(data[1]);\n\n          var _select = document.getElementById('namesbaseSelect');\n\n          _select.options.length = 0;\n          document.getElementById('namesbaseTextarea').value = '';\n          document.getElementById('namesbaseTextarea').setAttribute('data-base', 0);\n          document.getElementById('namesbaseExamples').innerHTML === '';\n          var baseMax = nameBases.length - 1;\n          cultures.forEach(function (c) {\n            if (c.base > baseMax) c.base = baseMax;\n          });\n          chains = {};\n          calculateChains();\n          editCultures();\n          editNamesbase();\n        } else {\n          tip('Cannot load a namesbase. Please check the data format');\n        }\n      };\n\n      fileReader.readAsText(fileToLoad, 'UTF-8');\n    });\n  } // open editLegends dialog\n\n\n  function editLegends(id, name) {\n    // update list of objects\n    var select = document.getElementById('legendSelect');\n\n    for (var i = select.options.length; i < notes.length; i++) {\n      var option = new Option(notes[i].id, notes[i].id);\n      select.options.add(option);\n    } // select an object\n\n\n    if (id) {\n      var note = notes.find(function (note) {\n        return note.id === id;\n      });\n\n      if (note === undefined) {\n        if (!name) name = id;\n        note = {\n          id: id,\n          name: name,\n          legend: ''\n        };\n        notes.push(note);\n\n        var _option = new Option(id, id);\n\n        select.options.add(_option);\n      }\n\n      select.value = id;\n      legendName.value = note.name;\n      legendText.value = note.legend;\n    } // open a dialog\n\n\n    $('#legendEditor').dialog({\n      title: 'Legends Editor',\n      minHeight: 'auto',\n      minWidth: Math.min(svgWidth, 400),\n      position: {\n        my: 'center',\n        at: 'center',\n        of: 'svg'\n      }\n    });\n    if (modules.editLegends) return;\n    modules.editLegends = true; // select another object\n\n    document.getElementById('legendSelect').addEventListener('change', function () {\n      var _this = this;\n\n      var note = notes.find(function (note) {\n        return note.id === _this.value;\n      });\n      legendName.value = note.name;\n      legendText.value = note.legend;\n    }); // change note name on input\n\n    document.getElementById('legendName').addEventListener('input', function () {\n      var select = document.getElementById('legendSelect');\n      var id = select.value;\n      var note = notes.find(function (note) {\n        return note.id === id;\n      });\n      note.name = this.value;\n    }); // change note text on input\n\n    document.getElementById('legendText').addEventListener('input', function () {\n      var select = document.getElementById('legendSelect');\n      var id = select.value;\n      var note = notes.find(function (note) {\n        return note.id === id;\n      });\n      note.legend = this.value;\n    }); // hightlight DOM element\n\n    document.getElementById('legendFocus').addEventListener('click', function () {\n      var select = document.getElementById('legendSelect');\n      var element = document.getElementById(select.value); // if element is not found\n\n      if (element === null) {\n        var message = 'Related element is not found. Would you like to remove the note (legend item)?';\n        alertMessage.innerHTML = message;\n        $('#alert').dialog({\n          resizable: false,\n          title: 'Element not found',\n          buttons: {\n            Remove: function Remove() {\n              $(this).dialog('close');\n              removeLegend();\n            },\n            Keep: function Keep() {\n              $(this).dialog('close');\n            }\n          }\n        });\n        return;\n      } // if element is found\n\n\n      highlightElement(element);\n    });\n\n    function highlightElement(element) {\n      if (debug.select('.highlighted').size()) return; // allow only 1 highlight element simultaniosly\n\n      var box = element.getBBox();\n      var transform = element.getAttribute('transform') || null;\n      var t = d3.transition().duration(1000).ease(d3.easeBounceOut);\n      var r = d3.transition().duration(500).ease(d3.easeLinear);\n      var highlight = debug.append('rect').attr('x', box.x).attr('y', box.y).attr('width', box.width).attr('height', box.height).attr('transform', transform);\n      highlight.classed('highlighted', 1).transition(t).style('outline-offset', '0px').transition(r).style('outline-color', 'transparent').remove();\n      var tr = parseTransform(transform);\n      var x = box.x + box.width / 2;\n      if (tr[0]) x += tr[0];\n      var y = box.y + box.height / 2;\n      if (tr[1]) y += tr[1];\n      if (scale >= 2) zoomTo(x, y, scale, 1600);\n    } // download legends object as text file\n\n\n    document.getElementById('legendDownload').addEventListener('click', function () {\n      var legendString = _JSON$stringify(notes);\n\n      var dataBlob = new Blob([legendString], {\n        type: 'text/plain'\n      });\n      var url = window.URL.createObjectURL(dataBlob);\n      var link = document.createElement('a');\n      link.download = 'legends' + _Date$now() + '.txt';\n      link.href = url;\n      link.click();\n    }); // upload legends object as text file and parse to json\n\n    document.getElementById('legendUpload').addEventListener('click', function () {\n      document.getElementById('lagendsToLoad').click();\n    });\n    document.getElementById('lagendsToLoad').addEventListener('change', function () {\n      var fileToLoad = this.files[0];\n      this.value = '';\n      var fileReader = new FileReader();\n\n      fileReader.onload = function (fileLoadedEvent) {\n        var dataLoaded = fileLoadedEvent.target.result;\n\n        if (dataLoaded) {\n          notes = JSON.parse(dataLoaded);\n\n          var _select2 = document.getElementById('legendSelect');\n\n          _select2.options.length = 0;\n          editLegends(notes[0].id, notes[0].name);\n        } else {\n          tip('Cannot load a file. Please check the data format');\n        }\n      };\n\n      fileReader.readAsText(fileToLoad, 'UTF-8');\n    }); // remove the legend item\n\n    document.getElementById('legendRemove').addEventListener('click', function () {\n      alertMessage.innerHTML = 'Are you sure you want to remove the selected legend?';\n      $('#alert').dialog({\n        resizable: false,\n        title: 'Remove legend element',\n        buttons: {\n          Remove: function Remove() {\n            $(this).dialog('close');\n            removeLegend();\n          },\n          Keep: function Keep() {\n            $(this).dialog('close');\n          }\n        }\n      });\n    });\n\n    function removeLegend() {\n      var select = document.getElementById('legendSelect');\n      var index = notes.findIndex(function (n) {\n        return n.id === select.value;\n      });\n      notes.splice(index, 1);\n      select.options.length = 0;\n\n      if (notes.length === 0) {\n        $('#legendEditor').dialog('close');\n        return;\n      }\n\n      editLegends(notes[0].id, notes[0].name);\n    }\n  } // Map scale and measurements editor\n\n\n  function editScale() {\n    $('#ruler').fadeIn();\n    $('#scaleEditor').dialog({\n      title: 'Scale Editor',\n      minHeight: 'auto',\n      width: 'auto',\n      resizable: false,\n      position: {\n        my: 'center bottom',\n        at: 'center bottom-10',\n        of: 'svg'\n      }\n    });\n  } // update only UI and sorting value in countryEditor screen\n\n\n  function updateCountryPopulationUI(s) {\n    if ($('#countriesEditor').is(':visible')) {\n      var urban = Math.round(states[s].urbanPopulation * +urbanization.value * populationRate.value);\n      var rural = Math.round(states[s].ruralPopulation * populationRate.value);\n      var population = (urban + rural) * 1000;\n      $('#state' + s).attr('data-population', population);\n      $('#state' + s).children().filter('.statePopulation').val(si(population));\n    }\n  } // update dialogs if measurements are changed\n\n\n  function updateCountryEditors() {\n    if ($('#countriesEditor').is(':visible')) {\n      editCountries();\n    }\n\n    if ($('#burgsEditor').is(':visible')) {\n      var s = +$('#burgsEditor').attr('data-state');\n      editBurgs(this, s);\n    }\n  } // remove drawn regions and draw all regions again\n\n\n  function redrawRegions() {\n    regions.selectAll('*').remove();\n    borders.selectAll('path').remove();\n    removeAllLabelsInGroup('countries');\n    drawRegions();\n  } // remove all labels in group including textPaths\n\n\n  function removeAllLabelsInGroup(group) {\n    labels.select('#' + group).selectAll('text').each(function () {\n      defs.select('#textPath_' + this.id).remove();\n      this.remove();\n    });\n\n    if (group !== 'countries') {\n      labels.select('#' + group).remove();\n\n      _updateLabelGroups();\n    }\n  } // restore keeped region / burgs / cultures data on edit heightmap completion\n\n\n  function restoreRegions() {\n    borders.selectAll('path').remove();\n    removeAllLabelsInGroup('countries');\n    manors.map(function (m) {\n      var cell = diagram.find(m.x, m.y).index;\n\n      if (cells[cell].height < 20) {\n        // remove manor in ocean\n        m.region = 'removed';\n        m.cell = cell;\n        d3.selectAll('[data-id=\\'' + m.i + '\\']').remove();\n      } else {\n        m.cell = cell;\n        cells[cell].manor = m.i;\n      }\n    });\n    cells.map(function (c) {\n      if (c.height < 20) {\n        // no longer a land cell\n        delete c.region;\n        delete c.culture;\n        return;\n      }\n\n      if (c.region === undefined) {\n        c.region = 'neutral';\n\n        if (states[states.length - 1].capital !== 'neutral') {\n          states.push({\n            i: states.length,\n            color: 'neutral',\n            capital: 'neutral',\n            name: 'Neutrals'\n          });\n        }\n      }\n\n      if (c.culture === undefined) {\n        var closest = cultureTree.find(c.data[0], c.data[1]);\n        c.culture = cultureTree.data().indexOf(closest);\n      }\n    });\n    states.map(function (s) {\n      recalculateStateData(s.i);\n    });\n    drawRegions();\n  }\n\n  function regenerateCountries() {\n    regions.selectAll('*').remove();\n    var neutral = neutralInput.value = +countriesNeutral.value;\n    manors.forEach(function (m) {\n      if (m.region === 'removed') return;\n      var state = 'neutral',\n          closest = neutral;\n      states.map(function (s) {\n        if (s.capital === 'neutral' || s.capital === 'select') return;\n        var c = manors[s.capital];\n        var dist = Math.hypot(c.x - m.x, c.y - m.y) / s.power;\n        if (cells[m.cell].fn !== cells[c.cell].fn) dist *= 3;\n\n        if (dist < closest) {\n          state = s.i;\n          closest = dist;\n        }\n      });\n      m.region = state;\n      cells[m.cell].region = state;\n    });\n    defineRegions();\n    var temp = regions.append('g').attr('id', 'temp');\n    land.forEach(function (l) {\n      if (l.region === undefined) return;\n      if (l.region === 'neutral') return;\n      var color = states[l.region].color;\n      temp.append('path').attr('data-cell', l.index).attr('data-state', l.region).attr('d', 'M' + polygons[l.index].join('L') + 'Z').attr('fill', color).attr('stroke', color);\n    });\n    var neutralCells = $.grep(cells, function (e) {\n      return e.region === 'neutral';\n    });\n    var last = states.length - 1;\n    var type = states[last].color;\n\n    if (type === 'neutral' && !neutralCells.length) {\n      // remove neutral line\n      $('#state' + last).remove();\n      states.splice(-1);\n    } // recalculate data for all countries\n\n\n    states.map(function (s) {\n      recalculateStateData(s.i);\n      $('#state' + s.i + ' > .stateCells').text(s.cells);\n      $('#state' + s.i + ' > .stateBurgs').text(s.burgs);\n      var area = Math.round(s.area * Math.pow(distanceScale.value, 2));\n      var unit = areaUnit.value === 'square' ? ' ' + distanceUnit.value + '²' : ' ' + areaUnit.value;\n      $('#state' + s.i + ' > .stateArea').text(si(area) + unit);\n      var urban = Math.round(s.urbanPopulation * urbanization.value * populationRate.value);\n      var rural = Math.round(s.ruralPopulation * populationRate.value);\n      var population = (urban + rural) * 1000;\n      $('#state' + s.i + ' > .statePopulation').val(si(population));\n      $('#state' + s.i).attr('data-cells', s.cells).attr('data-burgs', s.burgs).attr('data-area', area).attr('data-population', population);\n    });\n\n    if (type !== 'neutral' && neutralCells.length) {\n      // add neutral line\n      states.push({\n        i: states.length,\n        color: 'neutral',\n        capital: 'neutral',\n        name: 'Neutrals'\n      });\n      recalculateStateData(states.length - 1);\n      editCountries();\n    }\n  } // enter state edit mode\n\n\n  function mockRegions() {\n    if (grid.style('display') !== 'inline') {\n      toggleGrid.click();\n    }\n\n    if (labels.style('display') !== 'none') {\n      toggleLabels.click();\n    }\n\n    stateBorders.selectAll('*').remove();\n    neutralBorders.selectAll('*').remove();\n  } // handle DOM elements sorting on header click\n\n\n  $('.sortable').on('click', function () {\n    var el = $(this); // remove sorting for all siglings except of clicked element\n\n    el.siblings().removeClass('icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down');\n    var type = el.hasClass('alphabetically') ? 'name' : 'number';\n    var state = 'no';\n\n    if (el.is('[class*=\\'down\\']')) {\n      state = 'asc';\n    }\n\n    if (el.is('[class*=\\'up\\']')) {\n      state = 'desc';\n    }\n\n    var sortby = el.attr('data-sortby');\n    var list = el.parent().next(); // get list container element (e.g. \"countriesBody\")\n\n    var lines = list.children('div'); // get list elements\n\n    if (state === 'no' || state === 'asc') {\n      // sort desc\n      el.removeClass('icon-sort-' + type + '-down');\n      el.addClass('icon-sort-' + type + '-up');\n      lines.sort(function (a, b) {\n        var an = a.getAttribute('data-' + sortby);\n\n        if (an === 'bottom') {\n          return 1;\n        }\n\n        var bn = b.getAttribute('data-' + sortby);\n\n        if (bn === 'bottom') {\n          return -1;\n        }\n\n        if (type === 'number') {\n          an = +an;\n          bn = +bn;\n        }\n\n        if (an > bn) {\n          return 1;\n        }\n\n        if (an < bn) {\n          return -1;\n        }\n\n        return 0;\n      });\n    }\n\n    if (state === 'desc') {\n      // sort asc\n      el.removeClass('icon-sort-' + type + '-up');\n      el.addClass('icon-sort-' + type + '-down');\n      lines.sort(function (a, b) {\n        var an = a.getAttribute('data-' + sortby);\n\n        if (an === 'bottom') {\n          return 1;\n        }\n\n        var bn = b.getAttribute('data-' + sortby);\n\n        if (bn === 'bottom') {\n          return -1;\n        }\n\n        if (type === 'number') {\n          an = +an;\n          bn = +bn;\n        }\n\n        if (an < bn) {\n          return 1;\n        }\n\n        if (an > bn) {\n          return -1;\n        }\n\n        return 0;\n      });\n    }\n\n    lines.detach().appendTo(list);\n  }); // load text file with new burg names\n\n  $('#burgsListToLoad').change(function () {\n    var fileToLoad = this.files[0];\n    this.value = '';\n    var fileReader = new FileReader();\n\n    fileReader.onload = function (fileLoadedEvent) {\n      var dataLoaded = fileLoadedEvent.target.result;\n      var data = dataLoaded.split('\\r\\n');\n\n      if (data.length === 0) {\n        return;\n      }\n\n      var change = [];\n      var message = \"Burgs will be renamed as below. Please confirm\";\n      message += \"<div class=\\\"overflow-div\\\"><table class=\\\"overflow-table\\\"><tr><th>Id</th><th>Current name</th><th>New Name</th></tr>\";\n\n      for (var i = 0; i < data.length && i < manors.length; i++) {\n        var v = data[i];\n\n        if (v === '' || v === undefined) {\n          continue;\n        }\n\n        if (v === manors[i].name) {\n          continue;\n        }\n\n        change.push({\n          i: i,\n          name: v\n        });\n        message += \"<tr><td style=\\\"width:20%\\\">\".concat(i, \"</td><td style=\\\"width:40%\\\">\").concat(manors[i].name, \"</td><td style=\\\"width:40%\\\">\").concat(v, \"</td></tr>\");\n      }\n\n      message += \"</tr></table></div>\";\n      alertMessage.innerHTML = message;\n      $('#alert').dialog({\n        title: 'Burgs bulk renaming',\n        position: {\n          my: 'center',\n          at: 'center',\n          of: 'svg'\n        },\n        buttons: {\n          Cancel: function Cancel() {\n            $(this).dialog('close');\n          },\n          Confirm: function Confirm() {\n            for (var _i8 = 0; _i8 < change.length; _i8++) {\n              var id = change[_i8].i;\n              manors[id].name = change[_i8].name;\n              labels.select('[data-id=\\'' + id + '\\']').text(change[_i8].name);\n            }\n\n            $(this).dialog('close');\n            updateCountryEditors();\n          }\n        }\n      });\n    };\n\n    fileReader.readAsText(fileToLoad, 'UTF-8');\n  }); // just apply map size that was already set, apply graph size!\n\n  function applyMapSize() {\n    svgWidth = graphWidth = +mapWidthInput.value;\n    svgHeight = graphHeight = +mapHeightInput.value;\n    svg.attr('width', svgWidth).attr('height', svgHeight); // set extent to map borders + 100px to get infinity world reception\n\n    voronoi = d3.voronoi().extent([[-1, -1], [graphWidth + 1, graphHeight + 1]]);\n    zoom.translateExtent([[0, 0], [graphWidth, graphHeight]]).scaleExtent([1, 20]).scaleTo(svg, 1);\n    viewbox.attr('transform', null);\n    ocean.selectAll('rect').attr('x', 0).attr('y', 0).attr('width', graphWidth).attr('height', graphHeight);\n  } // change svg size on manual size change or window resize, do not change graph size\n\n\n  function changeMapSize() {\n    fitScaleBar();\n    svgWidth = +mapWidthInput.value;\n    svgHeight = +mapHeightInput.value;\n    svg.attr('width', svgWidth).attr('height', svgHeight);\n    var width = Math.max(svgWidth, graphWidth);\n    var height = Math.max(svgHeight, graphHeight);\n    zoom.translateExtent([[0, 0], [width, height]]);\n    svg.select('#ocean').selectAll('rect').attr('x', 0).attr('y', 0).attr('width', width).attr('height', height);\n  } // fit full-screen map if window is resized\n\n\n  $(window).resize(function (e) {\n    // trick to prevent resize on download bar opening\n    if (autoResize === false) return;\n    mapWidthInput.value = window.innerWidth;\n    mapHeightInput.value = window.innerHeight;\n    changeMapSize();\n  }); // fit ScaleBar to map size\n\n  function fitScaleBar() {\n    var el = d3.select('#scaleBar');\n    if (!el.select('rect').size()) return;\n    var bbox = el.select('rect').node().getBBox();\n    var tr = [svgWidth - bbox.width, svgHeight - (bbox.height - 10)];\n\n    if (sessionStorage.getItem('scaleBar')) {\n      var scalePos = sessionStorage.getItem('scaleBar').split(',');\n      tr = [+scalePos[0] - bbox.width, +scalePos[1] - bbox.height];\n    }\n\n    el.attr('transform', 'translate(' + Math.round(tr[0]) + ',' + Math.round(tr[1]) + ')');\n  } // Other Options handlers\n\n\n  $('input, select').on('input change', function () {\n    var id = this.id;\n    if (id === 'hideLabels') invokeActiveZooming();\n\n    if (id === 'mapWidthInput' || id === 'mapHeightInput') {\n      changeMapSize();\n      autoResize = false;\n      localStorage.setItem('mapWidth', mapWidthInput.value);\n      localStorage.setItem('mapHeight', mapHeightInput.value);\n    }\n\n    if (id === 'sizeInput') {\n      graphSize = sizeOutput.value = +this.value;\n\n      if (graphSize === 3) {\n        sizeOutput.style.color = 'red';\n      }\n\n      if (graphSize === 2) {\n        sizeOutput.style.color = 'yellow';\n      }\n\n      if (graphSize === 1) {\n        sizeOutput.style.color = 'green';\n      } // localStorage.setItem(\"graphSize\", this.value); - temp off to always start with size 1\n\n    }\n\n    if (id === 'templateInput') {\n      localStorage.setItem('template', this.value);\n    }\n\n    if (id === 'manorsInput') {\n      manorsOutput.value = this.value;\n      localStorage.setItem('manors', this.value);\n    }\n\n    if (id === 'regionsInput') {\n      regionsOutput.value = this.value;\n      var size = Math.round(6 - this.value / 20);\n\n      if (size < 3) {\n        size = 3;\n      }\n\n      burgLabels.select('#capitals').attr('data-size', size);\n      size = Math.round(18 - this.value / 6);\n\n      if (size < 4) {\n        size = 4;\n      }\n\n      labels.select('#countries').attr('data-size', size);\n      localStorage.setItem('regions', this.value);\n    }\n\n    if (id === 'powerInput') {\n      powerOutput.value = this.value;\n      localStorage.setItem('power', this.value);\n    }\n\n    if (id === 'neutralInput') {\n      neutralOutput.value = countriesNeutral.value = this.value;\n      localStorage.setItem('neutal', this.value);\n    }\n\n    if (id === 'culturesInput') {\n      culturesOutput.value = this.value;\n      localStorage.setItem('cultures', this.value);\n    }\n\n    if (id === 'precInput') {\n      precOutput.value = +precInput.value;\n      localStorage.setItem('prec', this.value);\n    }\n\n    if (id === 'swampinessInput') {\n      swampinessOutput.value = this.value;\n      localStorage.setItem('swampiness', this.value);\n    }\n\n    if (id === 'outlineLayersInput') localStorage.setItem('outlineLayers', this.value);\n    if (id === 'transparencyInput') changeDialogsTransparency(this.value);\n    if (id === 'pngResolutionInput') localStorage.setItem('pngResolution', this.value);\n\n    if (id === 'zoomExtentMin' || id === 'zoomExtentMax') {\n      zoom.scaleExtent([+zoomExtentMin.value, +zoomExtentMax.value]);\n      zoom.scaleTo(svg, +this.value);\n    }\n\n    if (id === 'convertOverlay') {\n      canvas.style.opacity = convertOverlayValue.innerHTML = +this.value;\n    }\n\n    if (id === 'populationRate') {\n      populationRateOutput.value = si(+populationRate.value * 1000);\n      updateCountryEditors();\n    }\n\n    if (id === 'urbanization') {\n      urbanizationOutput.value = this.value;\n      updateCountryEditors();\n    }\n\n    if (id === 'distanceUnit' || id === 'distanceScale' || id === 'areaUnit') {\n      var dUnit = distanceUnit.value;\n\n      if (id === 'distanceUnit' && dUnit === 'custom_name') {\n        var custom = prompt('Provide a custom name for distance unit');\n\n        if (custom) {\n          var opt = document.createElement('option');\n          opt.value = opt.innerHTML = custom;\n          distanceUnit.add(opt);\n          distanceUnit.value = custom;\n        } else {\n          this.value = 'km';\n          return;\n        }\n      }\n\n      var _scale = distanceScale.value;\n      scaleOutput.value = _scale + ' ' + dUnit;\n      ruler.selectAll('g').each(function () {\n        var label;\n        var g = d3.select(this);\n        var area = +g.select('text').attr('data-area');\n\n        if (area) {\n          var areaConv = area * Math.pow(_scale, 2); // convert area to distanceScale\n\n          var unit = areaUnit.value;\n\n          if (unit === 'square') {\n            unit = dUnit + '²';\n          } else {\n            unit = areaUnit.value;\n          }\n\n          label = si(areaConv) + ' ' + unit;\n        } else {\n          var dist = +g.select('text').attr('data-dist');\n          label = Math.round(dist * _scale) + ' ' + dUnit;\n        }\n\n        g.select('text').text(label);\n      });\n      ruler.selectAll('.gray').attr('stroke-dasharray', _.round(30 / _scale, 2));\n      drawScaleBar();\n      updateCountryEditors();\n    }\n\n    if (id === 'barSize') {\n      barSizeOutput.innerHTML = this.value;\n      $('#scaleBar').removeClass('hidden');\n      drawScaleBar();\n    }\n\n    if (id === 'barLabel') {\n      $('#scaleBar').removeClass('hidden');\n      drawScaleBar();\n    }\n\n    if (id === 'barBackOpacity' || id === 'barBackColor') {\n      d3.select('#scaleBar > rect').attr('opacity', +barBackOpacity.value).attr('fill', barBackColor.value);\n      $('#scaleBar').removeClass('hidden');\n    }\n  });\n  $('#scaleOutput').change(function () {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0.01 || this.value > 10) {\n      tip('Manually entered distance scale should be a number in a [0.01; 10] range');\n      this.value = distanceScale.value + ' ' + distanceUnit.value;\n      return;\n    }\n\n    distanceScale.value = +this.value;\n    scaleOutput.value = this.value + ' ' + distanceUnit.value;\n    updateCountryEditors();\n  });\n  $('#populationRateOutput').change(function () {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0.001 || this.value > 10) {\n      tip('Manually entered population rate should be a number in a [0.001; 10] range');\n      this.value = si(populationRate.value * 1000);\n      return;\n    }\n\n    populationRate.value = +this.value;\n    populationRateOutput.value = si(this.value * 1000);\n    updateCountryEditors();\n  });\n  $('#urbanizationOutput').change(function () {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0 || this.value > 10) {\n      tip('Manually entered urbanization rate should be a number in a [0; 10] range');\n      this.value = urbanization.value;\n      return;\n    }\n\n    var val = _parseFloat(+this.value);\n\n    if (val > 2) urbanization.setAttribute('max', val);\n    urbanization.value = urbanizationOutput.value = val;\n    updateCountryEditors();\n  }); // lock manually changed option to restrict it randomization\n\n  $('#optionsContent input, #optionsContent select').change(function () {\n    var icon = 'lock' + this.id.charAt(0).toUpperCase() + this.id.slice(1);\n    var el = document.getElementById(icon);\n    if (!el) return;\n    el.setAttribute('data-locked', 1);\n    el.className = 'icon-lock';\n  });\n  $('#optionsReset').click(restoreDefaultOptions);\n  $('#rescaler').change(function () {\n    var change = _.round(+this.value - 5, 2);\n\n    modifyHeights('all', change, 1);\n    updateHeightmap();\n    updateHistory();\n    rescaler.value = 5;\n  });\n  $('#layoutPreset').on('change', function () {\n    var preset = this.value;\n    $('#mapLayers li').not('#toggleOcean').addClass('buttonoff');\n    $('#toggleOcean').removeClass('buttonoff');\n    $('#oceanPattern').fadeIn();\n    $('#rivers, #terrain, #borders, #regions, #icons, #labels, #routes, #grid, #markers').fadeOut();\n    cults.selectAll('path').remove();\n    terrs.selectAll('path').remove();\n\n    if (preset === 'layoutPolitical') {\n      toggleRivers.click();\n      toggleRelief.click();\n      toggleBorders.click();\n      toggleCountries.click();\n      toggleIcons.click();\n      toggleLabels.click();\n      toggleRoutes.click();\n      toggleMarkers.click();\n    }\n\n    if (preset === 'layoutCultural') {\n      toggleRivers.click();\n      toggleRelief.click();\n      toggleBorders.click();\n      $('#toggleCultures').click();\n      toggleIcons.click();\n      toggleLabels.click();\n      toggleMarkers.click();\n    }\n\n    if (preset === 'layoutHeightmap') {\n      $('#toggleHeight').click();\n      toggleRivers.click();\n    }\n  }); // UI Button handlers\n\n  $('.tab > button').on('click', function () {\n    $('.tabcontent').hide();\n    $('.tab > button').removeClass('active');\n    $(this).addClass('active');\n    var id = this.id;\n\n    if (id === 'layoutTab') {\n      $('#layoutContent').show();\n    }\n\n    if (id === 'styleTab') {\n      $('#styleContent').show();\n    }\n\n    if (id === 'optionsTab') {\n      $('#optionsContent').show();\n    }\n\n    if (id === 'customizeTab') {\n      $('#customizeContent').show();\n    }\n\n    if (id === 'aboutTab') {\n      $('#aboutContent').show();\n    }\n  }); // re-load page with provided seed\n\n  $('#optionsSeedGenerate').on('click', function () {\n    if ($('#optionsSeed').value == seed) return;\n    seed = $('#optionsSeed').value;\n    var url = new URL(window.location.href);\n    window.location.href = url.pathname + '?seed=' + seed;\n  }); // Pull request from @evyatron\n  // https://github.com/Azgaar/Fantasy-Map-Generator/pull/49\n\n  function addDragToUpload() {\n    document.addEventListener('dragover', function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      $('#map-dragged').show();\n    });\n    document.addEventListener('dragleave', function (e) {\n      $('#map-dragged').hide();\n    });\n    document.addEventListener('drop', function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      $('#map-dragged').hide(); // no files or more than one\n\n      if (e.dataTransfer.items == null || e.dataTransfer.items.length != 1) {\n        return;\n      }\n\n      var file = e.dataTransfer.items[0].getAsFile(); // not a .map file\n\n      if (file.name.indexOf('.map') == -1) {\n        alertMessage.innerHTML = 'Please upload a <b>.map</b> file you have previously downloaded';\n        $('#alert').dialog({\n          resizable: false,\n          title: 'Invalid file format',\n          width: 400,\n          buttons: {\n            Close: function Close() {\n              $(this).dialog('close');\n            }\n          },\n          position: {\n            my: 'center',\n            at: 'center',\n            of: 'svg'\n          }\n        });\n        return;\n      } // all good - show uploading text and load the map\n\n\n      $('#map-dragged > p').text('Uploading<span>.</span><span>.</span><span>.</span>');\n      uploadFile(file, function onUploadFinish() {\n        $('#map-dragged > p').text('Drop to upload');\n      });\n    });\n  }\n}\n\nfunction tip(tip, main, error) {\n  var tooltip = d3.select('#tooltip');\n  var reg = 'linear-gradient(0.1turn, #ffffff00, #5e5c5c4d, #ffffff00)';\n  var red = 'linear-gradient(0.1turn, #ffffff00, #c71d1d66, #ffffff00)';\n  tooltip.text(tip).style('background', error ? red : reg);\n  if (main) tooltip.attr('data-main', tip);\n}\n\nwindow.tip = tip;",{"version":3,"sources":["FantasyMapGenerator.vue"],"names":[],"mappings":"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AAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,aAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,U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","sourcesContent":["<template>\n<!-- eslint-disable -->\n<div class=\"app\">\n  <Graphic/>\n  <div id=\"loading\">\n    <div id=\"title_name\">Azgaar's</div>\n    <div id=\"title\">Fantasy Map Generator</div>\n    <div id=\"version\">v. 0.60b</div>\n    <p id=\"loading-text\">LOADING<span>.</span><span>.</span><span>.</span></p>\n  </div>\n  <canvas id=\"canvas\" style=\"opacity: 0\"/>\n  <Options\n    @updateLabelGroups=\"updateLabelGroups\"\n    @applyDefaultStyle=\"applyDefaultStyle\"\n    @toggleHeight=\"toggleHeight\"\n  />\n  <Dialogs/>\n  <div id=\"map-dragged\" style=\"display: none\">\n    <p>Drop to upload</p>\n  </div>\n  <div id=\"legend\">\n    <div id=\"legendHeader\"/>\n    <div id=\"legendBody\"/>\n  </div>\n  <div id=\"tooltip\" data-main=\"Сlick the arrow button to open options\">\n    Сlick the arrow button to open options\n  </div>\n  <div id=\"fileInputs\" class=\"hidden\">\n    <input type=\"file\" accept=\".map\" id=\"mapToLoad\">\n    <input type=\"file\" accept=\".txt,.csv\" id=\"burgsListToLoad\">\n    <input type=\"file\" accept=\".txt\" id=\"lagendsToLoad\">\n    <input type=\"file\" accept=\"image/*\" id=\"imageToLoad\">\n    <input type=\"file\" accept=\".txt\" id=\"templateToLoad\">\n    <input type=\"file\" accept=\".txt\" id=\"namesbaseToLoad\">\n  </div>\n</div>\n</template>\n\n<script>\nimport seedrandom from 'seedrandom'\nimport * as d3 from 'd3'\nimport * as d3chromatic from 'd3-scale-chromatic'\nimport * as polylabel from 'polylabel'\nimport * as quantize from 'quantize'\nimport * as PriorityQueue from 'js-priority-queue'\nimport * as $ from 'jquery'\nimport 'jquery-ui-bundle'\nimport 'jquery-ui-bundle/jquery-ui.css'\nimport * as _ from 'lodash'\nimport {toHEX, round, si, getInteger, GFontToDataURI, ifDefined} from './utils'\nimport Dialogs from './dialogs/Dialogs.vue'\nimport Graphic from './Graphic.vue'\nimport Options from './options/Options.vue'\n\n/* eslint-disable */\n\nexport default {\n  name: 'FantasyMapGenerator',\n  mounted() {\n    fantasyMap()\n  },\n  components: {\n    Dialogs,\n    Graphic,\n    Options,\n  },\n  methods: {\n    updateLabelGroups() { updateLabelGroups() },\n    applyDefaultStyle() { applyDefaultStyle() },\n    toggleHeight() { toggleHeight() },\n  },\n}\n\n'use strict'\n\n// consants\nconst ICONS = [\n  // emoticons in FF:\n  ['2693', '⚓', 'Anchor'],\n  ['26EA', '⛪', 'Church'],\n  ['1F3EF', '🏯', 'Japanese Castle'],\n  ['1F3F0', '🏰', 'Castle'],\n  ['1F5FC', '🗼', 'Tower'],\n  ['1F3E0', '🏠', 'House'],\n  ['1F3AA', '🎪', 'Tent'],\n  ['1F3E8', '🏨', 'Hotel'],\n  ['1F4B0', '💰', 'Money bag'],\n  ['1F4A8', '💨', 'Dashing away'],\n  ['1F334', '🌴', 'Palm'],\n  ['1F335', '🌵', 'Cactus'],\n  ['1F33E', '🌾', 'Sheaf'],\n  ['1F5FB', '🗻', 'Mountain'],\n  ['1F30B', '🌋', 'Volcano'],\n  ['1F40E', '🐎', 'Horse'],\n  ['1F434', '🐴', 'Horse Face'],\n  ['1F42E', '🐮', 'Cow'],\n  ['1F43A', '🐺', 'Wolf Face'],\n  ['1F435', '🐵', 'Monkey face'],\n  ['1F437', '🐷', 'Pig face'],\n  ['1F414', '🐔', 'Chiken'],\n  ['1F411', '🐑', 'Eve'],\n  ['1F42B', '🐫', 'Camel'],\n  ['1F418', '🐘', 'Elephant'],\n  ['1F422', '🐢', 'Turtle'],\n  ['1F40C', '🐌', 'Snail'],\n  ['1F40D', '🐍', 'Snake'],\n  ['1F433', '🐳', 'Whale'],\n  ['1F42C', '🐬', 'Dolphin'],\n  ['1F420', '🐟', 'Fish'],\n  ['1F432', '🐲', 'Dragon Head'],\n  ['1F479', '👹', 'Ogre'],\n  ['1F47B', '👻', 'Ghost'],\n  ['1F47E', '👾', 'Alien'],\n  ['1F480', '💀', 'Skull'],\n  ['1F374', '🍴', 'Fork and knife'],\n  ['1F372', '🍲', 'Food'],\n  ['1F35E', '🍞', 'Bread'],\n  ['1F357', '🍗', 'Poultry leg'],\n  ['1F347', '🍇', 'Grapes'],\n  ['1F34F', '🍏', 'Apple'],\n  ['1F352', '🍒', 'Cherries'],\n  ['1F36F', '🍯', 'Honey pot'],\n  ['1F37A', '🍺', 'Beer'],\n  ['1F377', '🍷', 'Wine glass'],\n  ['1F3BB', '🎻', 'Violin'],\n  ['1F3B8', '🎸', 'Guitar'],\n  ['26A1', '⚡', 'Electricity'],\n  ['1F320', '🌠', 'Shooting star'],\n  ['1F319', '🌙', 'Crescent moon'],\n  ['1F525', '🔥', 'Fire'],\n  ['1F4A7', '💧', 'Droplet'],\n  ['1F30A', '🌊', 'Wave'],\n  ['231B', '⌛', 'Hourglass'],\n  ['1F3C6', '🏆', 'Goblet'],\n  ['26F2', '⛲', 'Fountain'],\n  ['26F5', '⛵', 'Sailboat'],\n  ['26FA', '⛺', 'Tend'],\n  ['1F489', '💉', 'Syringe'],\n  ['1F4D6', '📚', 'Books'],\n  ['1F3AF', '🎯', 'Archery'],\n  ['1F52E', '🔮', 'Magic ball'],\n  ['1F3AD', '🎭', 'Performing arts'],\n  ['1F3A8', '🎨', 'Artist palette'],\n  ['1F457', '👗', 'Dress'],\n  ['1F451', '👑', 'Crown'],\n  ['1F48D', '💍', 'Ring'],\n  ['1F48E', '💎', 'Gem'],\n  ['1F514', '🔔', 'Bell'],\n  ['1F3B2', '🎲', 'Die'],\n  // black and white icons in FF:\n  ['26A0', '⚠', 'Alert'],\n  ['2317', '⌗', 'Hash'],\n  ['2318', '⌘', 'POI'],\n  ['2307', '⌇', 'Wavy'],\n  ['21E6', '⇦', 'Left arrow'],\n  ['21E7', '⇧', 'Top arrow'],\n  ['21E8', '⇨', 'Right arrow'],\n  ['21E9', '⇩', 'Left arrow'],\n  ['21F6', '⇶', 'Three arrows'],\n  ['2699', '⚙', 'Gear'],\n  ['269B', '⚛', 'Atom'],\n  ['0024', '$', 'Dollar'],\n  ['2680', '⚀', 'Die1'],\n  ['2681', '⚁', 'Die2'],\n  ['2682', '⚂', 'Die3'],\n  ['2683', '⚃', 'Die4'],\n  ['2684', '⚄', 'Die5'],\n  ['2685', '⚅', 'Die6'],\n  ['26B4', '⚴', 'Pallas'],\n  ['26B5', '⚵', 'Juno'],\n  ['26B6', '⚶', 'Vesta'],\n  ['26B7', '⚷', 'Chiron'],\n  ['26B8', '⚸', 'Lilith'],\n  ['263F', '☿', 'Mercury'],\n  ['2640', '♀', 'Venus'],\n  ['2641', '♁', 'Earth'],\n  ['2642', '♂', 'Mars'],\n  ['2643', '♃', 'Jupiter'],\n  ['2644', '♄', 'Saturn'],\n  ['2645', '♅', 'Uranus'],\n  ['2646', '♆', 'Neptune'],\n  ['2647', '♇', 'Pluto'],\n  ['26B3', '⚳', 'Ceres'],\n  ['2654', '♔', 'Chess king'],\n  ['2655', '♕', 'Chess queen'],\n  ['2656', '♖', 'Chess rook'],\n  ['2657', '♗', 'Chess bishop'],\n  ['2658', '♘', 'Chess knight'],\n  ['2659', '♙', 'Chess pawn'],\n  ['2660', '♠', 'Spade'],\n  ['2663', '♣', 'Club'],\n  ['2665', '♥', 'Heart'],\n  ['2666', '♦', 'Diamond'],\n  ['2698', '⚘', 'Flower'],\n  ['2625', '☥', 'Ankh'],\n  ['2626', '☦', 'Orthodox'],\n  ['2627', '☧', 'Chi Rho'],\n  ['2628', '☨', 'Lorraine'],\n  ['2629', '☩', 'Jerusalem'],\n  ['2670', '♰', 'Syriac cross'],\n  ['2020', '†', 'Dagger'],\n  ['262A', '☪', 'Muslim'],\n  ['262D', '☭', 'Soviet'],\n  ['262E', '☮', 'Peace'],\n  ['262F', '☯', 'Yin yang'],\n  ['26A4', '⚤', 'Heterosexuality'],\n  ['26A2', '⚢', 'Female homosexuality'],\n  ['26A3', '⚣', 'Male homosexuality'],\n  ['26A5', '⚥', 'Male and female'],\n  ['26AD', '⚭', 'Rings'],\n  ['2690', '⚐', 'White flag'],\n  ['2691', '⚑', 'Black flag'],\n  ['263C', '☼', 'Sun'],\n  ['263E', '☾', 'Moon'],\n  ['2668', '♨', 'Hot springs'],\n  ['2600', '☀', 'Black sun'],\n  ['2601', '☁', 'Cloud'],\n  ['2602', '☂', 'Umbrella'],\n  ['2603', '☃', 'Snowman'],\n  ['2604', '☄', 'Comet'],\n  ['2605', '★', 'Black star'],\n  ['2606', '☆', 'White star'],\n  ['269D', '⚝', 'Outlined star'],\n  ['2618', '☘', 'Shamrock'],\n  ['21AF', '↯', 'Lightning'],\n  ['269C', '⚜', 'FleurDeLis'],\n  ['2622', '☢', 'Radiation'],\n  ['2623', '☣', 'Biohazard'],\n  ['2620', '☠', 'Skull'],\n  ['2638', '☸', 'Dharma'],\n  ['2624', '☤', 'Caduceus'],\n  ['2695', '⚕', 'Aeculapius staff'],\n  ['269A', '⚚', 'Hermes staff'],\n  ['2697', '⚗', 'Alembic'],\n  ['266B', '♫', 'Music'],\n  ['2702', '✂', 'Scissors'],\n  ['2696', '⚖', 'Scales'],\n  ['2692', '⚒', 'Hammer and pick'],\n  ['2694', '⚔', 'Swords']\n]\nconst FONTS = ['Almendra+SC', 'Georgia', 'Times+New+Roman', 'Comic+Sans+MS', 'Lucida+Sans+Unicode', 'Courier+New']\nconst VOWELS = 'aeiouy'\n\n// global variables\nlet svg\nlet defs\nlet viewbox\nlet ocean\nlet oceanLayers\nlet oceanPattern\nlet landmass\nlet terrs\nlet grid\nlet overlay\nlet rivers\nlet terrain\nlet cults\nlet regions\nlet borders\nlet stateBorders\nlet neutralBorders\nlet lakes\nlet routes\nlet roads\nlet trails\nlet searoutes\nlet coastline\nlet labels\nlet burgLabels\nlet icons\nlet burgIcons\nlet markers\nlet ruler\nlet debug\nlet seed\nlet params\nlet voronoi\nlet diagram\nlet polygons\nlet spacing\nlet points = []\nlet heights\nlet modules = []\nlet customization = 0\nlet history = []\nlet historyStage = 0\nlet elSelected\nlet autoResize = true\nlet graphSize\nlet cells = []\nlet land = []\nlet riversData = []\nlet manors = []\nlet states = []\nlet features = []\nlet notes = []\nlet queue = []\nlet defaultCultures = []\nlet cultures = []\nlet chain = []\nlet nameBases = []\nlet nameBase = []\nlet cultureTree\n\n// global methods\n\n// download map as SVG or PNG file\nfunction saveAsImage(type) {\n  console.time('saveAsImage')\n  const webSafe = ['Georgia', 'Times+New+Roman', 'Comic+Sans+MS', 'Lucida+Sans+Unicode', 'Courier+New', 'Verdana', 'Arial', 'Impact']\n  // get non-standard fonts used for labels to fetch them from web\n  const fontsInUse = [] // to store fonts currently in use\n  labels.selectAll('g').each(function(d) {\n    const font = d3.select(this).attr('data-font')\n    if (!font) return\n    if (webSafe.indexOf(font) !== -1) return // do not fetch web-safe fonts\n    if (fontsInUse.indexOf(font) === -1) fontsInUse.push(font)\n  })\n  const fontsToLoad = 'https://fonts.googleapis.com/css?family=' + fontsInUse.join('|')\n\n  // clone svg\n  const cloneEl = document.getElementsByTagName('svg')[0].cloneNode(true)\n  cloneEl.id = 'fantasyMap'\n  document.getElementsByTagName('body')[0].appendChild(cloneEl)\n  const clone = d3.select('#fantasyMap')\n\n  // rteset transform for svg\n  if (type === 'svg') {\n    clone.attr('width', graphWidth).attr('height', graphHeight)\n    clone.select('#viewbox').attr('transform', null)\n    if (svgWidth !== graphWidth || svgHeight !== graphHeight) {\n      // move scale bar to right bottom corner\n      const el = clone.select('#scaleBar')\n      if (!el.size()) return\n      const bbox = el.select('rect').node().getBBox()\n      const tr = [graphWidth - bbox.width, graphHeight - (bbox.height - 10)]\n      el.attr('transform', 'translate(' + Math.round(tr[0]) + ',' + Math.round(tr[1]) + ')')\n    }\n\n    // to fix use elements sizing\n    clone.selectAll('use').each(function() {\n      const size = this.parentNode.getAttribute('size') || 1\n      this.setAttribute('width', size + 'px')\n      this.setAttribute('height', size + 'px')\n    })\n\n    // clean attributes\n    //clone.selectAll(\"*\").each(function() {\n    //  const attributes = this.attributes;\n    //  for (let i = 0; i < attributes.length; i++) {\n    //    const attr = attributes[i];\n    //    if (attr.value === \"\" || attr.name.includes(\"data\")) {\n    //      this.removeAttribute(attr.name);\n    //    }\n    //  }\n    //});\n\n  }\n\n  // for each g element get inline style\n  const emptyG = clone.append('g').node()\n  const defaultStyles = window.getComputedStyle(emptyG)\n\n  // show hidden labels but in reduced size\n  clone.select('#labels').selectAll('.hidden').each(function(e) {\n    const size = d3.select(this).attr('font-size')\n    d3.select(this).classed('hidden', false).attr('font-size', _.round(size * 0.4, 2))\n  })\n\n  // save group css to style attribute\n  clone.selectAll('g, #ruler > g > *, #scaleBar > text').each(function(d) {\n    const compStyle = window.getComputedStyle(this)\n    let style = ''\n    for (let i = 0; i < compStyle.length; i++) {\n      const key = compStyle[i]\n      const value = compStyle.getPropertyValue(key)\n      // Firefox mask hack\n      if (key === 'mask-image' && value !== defaultStyles.getPropertyValue(key)) {\n        style += 'mask-image: url(\\'#shape\\');'\n        continue\n      }\n      if (key === 'cursor') continue // cursor should be default\n      if (this.hasAttribute(key)) continue // don't add style if there is the same attribute\n      if (value === defaultStyles.getPropertyValue(key)) continue\n      style += key + ':' + value + ';'\n    }\n    if (style != '') this.setAttribute('style', style)\n  })\n  emptyG.remove()\n\n  // load fonts as dataURI so they will be available in downloaded svg/png\n  GFontToDataURI(fontsToLoad).then(cssRules => {\n    clone.select('defs').append('style').text(cssRules.join('\\n'))\n    const svg_xml = (new XMLSerializer()).serializeToString(clone.node())\n    clone.remove()\n    const blob = new Blob([svg_xml], {type: 'image/svg+xml;charset=utf-8'})\n    const url = window.URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.target = '_blank'\n    if (type === 'png') {\n      const ratio = svgHeight / svgWidth\n      canvas.width = svgWidth * pngResolutionInput.value\n      canvas.height = svgHeight * pngResolutionInput.value\n      const img = new Image()\n      img.src = url\n      img.onload = function() {\n        window.URL.revokeObjectURL(url)\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n        link.download = 'fantasy_map_' + Date.now() + '.png'\n        canvas.toBlob(function(blob) {\n          link.href = window.URL.createObjectURL(blob)\n          document.body.appendChild(link)\n          link.click()\n          window.setTimeout(function() {window.URL.revokeObjectURL(link.href)}, 5000)\n        })\n        canvas.style.opacity = 0\n        canvas.width = svgWidth\n        canvas.height = svgHeight\n      }\n    } else {\n      link.download = 'fantasy_map_' + Date.now() + '.svg'\n      link.href = url\n      document.body.appendChild(link)\n      link.click()\n    }\n    console.timeEnd('saveAsImage')\n    window.setTimeout(function() {window.URL.revokeObjectURL(url)}, 5000)\n  })\n}\n\n// get user-friendly (real-world) height value from map data\nfunction getFriendlyHeight(h) {\n  let exponent = +heightExponent.value\n  let unit = heightUnit.value\n  let unitRatio = 1 // default calculations are in meters\n  if (unit === 'ft') unitRatio = 3.28 // if foot\n  if (unit === 'f') unitRatio = 0.5468 // if fathom\n  let height = -990\n  if (h >= 20) height = Math.pow(h - 18, exponent)\n  if (h < 20 && h > 0) height = (h - 20) / h * 50\n  return h + ' (' + Math.round(height * unitRatio) + ' ' + unit + ')'\n}\n\n// Get cell info on mouse move (useful for debugging)\nfunction moved() {\n  const point = d3.mouse(this)\n  const i = diagram.find(point[0], point[1]).index\n\n  // update cellInfo\n  if (i) {\n    const p = cells[i] // get cell\n    infoX.innerHTML = Math.round(point[0])\n    infoY.innerHTML = Math.round(point[1])\n    infoCell.innerHTML = i\n    infoArea.innerHTML = ifDefined(p.area, 'n/a', 2)\n    if (customization === 1) {\n      infoHeight.innerHTML = getFriendlyHeight(heights[i])\n    } else {infoHeight.innerHTML = getFriendlyHeight(p.height)}\n    infoFlux.innerHTML = ifDefined(p.flux, 'n/a', 2)\n    let country = p.region === undefined ? 'n/a' : p.region === 'neutral' ? 'neutral' :\n                                                   states[p.region].name + ' (' + p.region + ')'\n    infoCountry.innerHTML = country\n    let culture = ifDefined(p.culture) !== 'no' ?\n                  cultures[p.culture].name + ' (' + p.culture + ')' : 'n/a'\n    infoCulture.innerHTML = culture\n    infoPopulation.innerHTML = ifDefined(p.pop, 'n/a', 2)\n    infoBurg.innerHTML =\n      ifDefined(p.manor) !== 'no' ? manors[p.manor].name + ' (' + p.manor + ')' : 'no'\n    const feature = features[p.fn]\n    if (feature !== undefined) {\n      const fType = feature.land ? 'Island' : feature.border ? 'Ocean' : 'Lake'\n      infoFeature.innerHTML = fType + ' (' + p.fn + ')'\n    } else {\n      infoFeature.innerHTML = 'n/a'\n    }\n  }\n\n  // update tooltip\n  if (toggleTooltips.checked) {\n    tooltip.innerHTML = tooltip.getAttribute('data-main')\n    const tag = event.target.tagName\n    const path = event.composedPath()\n    const group = path[path.length - 7].id\n    const subgroup = path[path.length - 8].id\n    if (group === 'rivers') tip('Click to open River Editor')\n    if (group === 'routes') tip('Click to open Route Editor')\n    if (group === 'terrain') tip('Click to open Relief Icon Editor')\n    if (group === 'labels') tip('Click to open Label Editor')\n    if (group === 'icons') tip('Click to open Icon Editor')\n    if (group === 'markers') tip('Click to open Marker Editor')\n    if (group === 'ruler') {\n      if (tag === 'path' || tag === 'line') tip('Drag to move the measurer')\n      if (tag === 'text') tip('Click to remove the measurer')\n      if (tag === 'circle') tip('Drag to adjust the measurer')\n    }\n    if (subgroup === 'burgIcons') tip('Click to open Burg Editor')\n    if (subgroup === 'burgLabels') tip('Click to open Burg Editor')\n\n    // show legend on hover (if any)\n    let id = event.target.id\n    if (id === '') id = event.target.parentNode.id\n    if (subgroup === 'burgLabels') id = 'burg' + event.target.getAttribute('data-id')\n\n    let note = notes.find(note => note.id === id)\n    let legend = document.getElementById('legend')\n    let legendHeader = document.getElementById('legendHeader')\n    let legendBody = document.getElementById('legendBody')\n    if (note !== undefined && note.legend !== '') {\n      legend.style.display = 'block'\n      legendHeader.innerHTML = note.name\n      legendBody.innerHTML = note.legend\n    } else {\n      legend.style.display = 'none'\n      legendHeader.innerHTML = ''\n      legendBody.innerHTML = ''\n    }\n  }\n\n  // draw line for ranges placing for heightmap Customization\n  if (customization === 1) {\n    const line = debug.selectAll('.line')\n    if (debug.selectAll('.tag').size() === 1) {\n      const x = +debug.select('.tag').attr('cx')\n      const y = +debug.select('.tag').attr('cy')\n      if (line.size()) {\n        line.attr('x1', x).attr('y1', y).attr('x2', point[0]).attr('y2', point[1])\n      } else {\n        debug.insert('line', ':first-child').attr('class', 'line')\n             .attr('x1', x).attr('y1', y).attr('x2', point[0]).attr('y2', point[1])\n      }\n    } else {\n      line.remove()\n    }\n  }\n\n  // change radius circle for Customization\n  if (customization > 0) {\n    const brush = $('#brushesButtons > .pressed')\n    const brushId = brush.attr('id')\n    if (brushId === 'brushRange' || brushId === 'brushTrough') return\n    if (customization !== 5 && !brush.length && !$('div.selected').length) return\n    let radius = 0\n    if (customization === 1) {\n      radius = brushRadius.value\n      if (brushId === 'brushHill' || brushId === 'brushPit') {\n        radius = Math.pow(brushPower.value * 4, .5)\n      }\n    } else if (customization === 2) radius = countriesManuallyBrush.value\n    else if (customization === 4) radius = culturesManuallyBrush.value\n    else if (customization === 5) radius = reliefBulkRemoveRadius.value\n\n    const r = _.round(6 / graphSize * radius, 1)\n    let clr = '#373737'\n    if (customization === 2) {\n      const state = +$('div.selected').attr('id').slice(5)\n      clr = states[state].color === 'neutral' ? 'white' : states[state].color\n    }\n    if (customization === 4) {\n      const culture = +$('div.selected').attr('id').slice(7)\n      clr = cultures[culture].color\n    }\n    moveCircle(point[0], point[1], r, clr)\n  }\n}\n\nfunction updateLabelGroups() {\n  if ($('#styleElementSelect').value !== 'labels') return\n  const cont = d3.select('#styleLabelGroupItems')\n  cont.selectAll('button').remove()\n  labels.selectAll('g').each(function() {\n    const el = d3.select(this)\n    const id = el.attr('id')\n    const name = id.charAt(0).toUpperCase() + id.substr(1)\n    const state = el.classed('hidden')\n    if (id === 'burgLabels') return\n    cont.append('button').attr('id', id).text(name).classed('buttonoff', state)\n        .on('click', function() {\n          // toggle label group on click\n          if ($('#hideLabels').checked) $('#hideLabels').click()\n          const el = d3.select('#' + this.id)\n          const state = !el.classed('hidden')\n          el.classed('hidden', state)\n          d3.select(this).classed('buttonoff', state)\n        })\n  })\n}\n\nfunction applyDefaultStyle() {\n  viewbox.on('touchmove mousemove', moved)\n  landmass.attr('opacity', 1).attr('fill', '#eef6fb')\n  coastline.attr('opacity', .5).attr('stroke', '#1f3846').attr('stroke-width', .7)\n           .attr('filter', 'url(#dropShadow)')\n  regions.attr('opacity', .4)\n  stateBorders.attr('opacity', .8).attr('stroke', '#56566d').attr('stroke-width', .7)\n              .attr('stroke-dasharray', '1.2 1.5').attr('stroke-linecap', 'butt')\n  neutralBorders.attr('opacity', .8).attr('stroke', '#56566d').attr('stroke-width', .5)\n                .attr('stroke-dasharray', '1 1.5').attr('stroke-linecap', 'butt')\n  cults.attr('opacity', .6)\n  rivers.attr('opacity', 1).attr('fill', '#5d97bb')\n  lakes.attr('opacity', .5).attr('fill', '#a6c1fd').attr('stroke', '#5f799d')\n       .attr('stroke-width', .7)\n  icons.selectAll('g').attr('opacity', 1).attr('fill', '#ffffff').attr('stroke', '#3e3e4b')\n  roads.attr('opacity', .9).attr('stroke', '#d06324').attr('stroke-width', .35)\n       .attr('stroke-dasharray', '1.5').attr('stroke-linecap', 'butt')\n  trails.attr('opacity', .9).attr('stroke', '#d06324').attr('stroke-width', .15)\n        .attr('stroke-dasharray', '.8 1.6').attr('stroke-linecap', 'butt')\n  searoutes.attr('opacity', .8).attr('stroke', '#ffffff').attr('stroke-width', .35)\n           .attr('stroke-dasharray', '1 2').attr('stroke-linecap', 'round')\n  grid.attr('opacity', 1).attr('stroke', '#808080').attr('stroke-width', .1)\n  ruler.attr('opacity', 1).style('display', 'none').attr('filter', 'url(#dropShadow)')\n  overlay.attr('opacity', .8).attr('stroke', '#808080').attr('stroke-width', .5)\n  markers.attr('filter', 'url(#dropShadow01)')\n\n  // ocean style\n  svg.style('background-color', '#000000')\n  ocean.attr('opacity', 1)\n  oceanLayers.select('rect').attr('fill', '#53679f')\n  oceanLayers.attr('filter', '')\n  oceanPattern.attr('opacity', 1)\n  oceanLayers.selectAll('path').attr('display', null)\n  styleOceanPattern.checked = true\n  styleOceanLayers.checked = true\n\n  labels.attr('opacity', 1).attr('stroke', '#3a3a3a').attr('stroke-width', 0)\n  let size = Math.round(8 - regionsInput.value / 20)\n  if (size < 3) size = 3\n  burgLabels.select('#capitals').attr('fill', '#3e3e4b').attr('opacity', 1)\n            .attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC')\n            .attr('font-size', size).attr('data-size', size)\n  burgLabels.select('#towns').attr('fill', '#3e3e4b').attr('opacity', 1)\n            .attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC')\n            .attr('font-size', 3).attr('data-size', 4)\n  burgIcons.select('#capitals').attr('size', 1).attr('stroke-width', .24)\n           .attr('fill', '#ffffff').attr('stroke', '#3e3e4b').attr('fill-opacity', .7)\n           .attr('stroke-opacity', 1).attr('opacity', 1)\n  burgIcons.select('#towns').attr('size', .5).attr('stroke-width', .12).attr('fill', '#ffffff')\n           .attr('stroke', '#3e3e4b').attr('fill-opacity', .7).attr('stroke-opacity', 1)\n           .attr('opacity', 1)\n  size = Math.round(16 - regionsInput.value / 6)\n  if (size < 6) size = 6\n  labels.select('#countries').attr('fill', '#3e3e4b').attr('opacity', 1)\n        .attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC')\n        .attr('font-size', size).attr('data-size', size)\n  icons.select('#capital-anchors').attr('fill', '#ffffff').attr('stroke', '#3e3e4b')\n       .attr('stroke-width', 1.2).attr('size', 2)\n  icons.select('#town-anchors').attr('fill', '#ffffff').attr('stroke', '#3e3e4b')\n       .attr('stroke-width', 1.2).attr('size', 1)\n}\n\n// draw the heightmap\nfunction toggleHeight() {\n  const scheme = $('#styleSchemeInput').value\n  let hColor = color\n  if (scheme === 'light') hColor = d3.scaleSequential(d3chromatic.interpolateRdYlGn)\n  if (scheme === 'green') hColor = d3.scaleSequential(d3chromatic.interpolateGreens)\n  if (scheme === 'monochrome') hColor = d3.scaleSequential(d3chromatic.interpolateGreys)\n  if (!terrs.selectAll('path').size()) {\n    cells.map(function(i, d) {\n      let height = i.height\n      if (height < 20 && !i.lake) return\n      if (i.lake) {\n        const nHeights = i.neighbors.map(\n          function(e) {if (cells[e].height >= 20) return cells[e].height})\n        const mean = d3.mean(nHeights)\n        if (!mean) return\n        height = Math.trunc(mean)\n        if (height < 20 || isNaN(height)) height = 20\n      }\n      const clr = hColor((100 - height) / 100)\n      terrs.append('path')\n           .attr('d', 'M' + polygons[d].join('L') + 'Z')\n           .attr('fill', clr).attr('stroke', clr)\n    })\n  } else {\n    terrs.selectAll('path').remove()\n  }\n}\n\nfunction fantasyMap() {\n  const version = '0.60b'\n  document.title += ' v. ' + version\n\n  // Declare variables\n  svg = d3.select('svg')\n  defs = svg.select('#deftemp')\n  viewbox = svg.append('g').attr('id', 'viewbox')\n  ocean = viewbox.append('g').attr('id', 'ocean')\n  oceanLayers = ocean.append('g').attr('id', 'oceanLayers')\n  oceanPattern = ocean.append('g').attr('id', 'oceanPattern')\n  landmass = viewbox.append('g').attr('id', 'landmass')\n  terrs = viewbox.append('g').attr('id', 'terrs')\n  grid = viewbox.append('g').attr('id', 'grid')\n  overlay = viewbox.append('g').attr('id', 'overlay')\n  rivers = viewbox.append('g').attr('id', 'rivers')\n  terrain = viewbox.append('g').attr('id', 'terrain')\n  cults = viewbox.append('g').attr('id', 'cults')\n  regions = viewbox.append('g').attr('id', 'regions')\n  borders = viewbox.append('g').attr('id', 'borders')\n  stateBorders = borders.append('g').attr('id', 'stateBorders')\n  neutralBorders = borders.append('g').attr('id', 'neutralBorders')\n  lakes = viewbox.append('g').attr('id', 'lakes')\n  routes = viewbox.append('g').attr('id', 'routes')\n  roads = routes.append('g').attr('id', 'roads').attr('data-type', 'land')\n  trails = routes.append('g').attr('id', 'trails').attr('data-type', 'land')\n  searoutes = routes.append('g').attr('id', 'searoutes').attr('data-type', 'sea')\n  coastline = viewbox.append('g').attr('id', 'coastline')\n  labels = viewbox.append('g').attr('id', 'labels')\n  burgLabels = labels.append('g').attr('id', 'burgLabels')\n  icons = viewbox.append('g').attr('id', 'icons')\n  burgIcons = icons.append('g').attr('id', 'burgIcons')\n  markers = viewbox.append('g').attr('id', 'markers')\n  ruler = viewbox.append('g').attr('id', 'ruler')\n  debug = viewbox.append('g').attr('id', 'debug')\n\n  labels.append('g').attr('id', 'countries')\n  burgIcons.append('g').attr('id', 'capitals')\n  burgLabels.append('g').attr('id', 'capitals')\n  burgIcons.append('g').attr('id', 'towns')\n  burgLabels.append('g').attr('id', 'towns')\n  icons.append('g').attr('id', 'capital-anchors')\n  icons.append('g').attr('id', 'town-anchors')\n  terrain.append('g').attr('id', 'hills')\n  terrain.append('g').attr('id', 'mounts')\n  terrain.append('g').attr('id', 'swamps')\n  terrain.append('g').attr('id', 'forests')\n\n  // append ocean pattern\n  oceanPattern.append('rect').attr('fill', 'url(#oceanic)').attr('stroke', 'none')\n  oceanLayers.append('rect').attr('id', 'oceanBase')\n\n  // canvas element for raster images\n  const canvas = document.getElementById('canvas')\n  const ctx = canvas.getContext('2d')\n\n  // Color schemes\n  let color = d3.scaleSequential(d3chromatic.interpolateSpectral)\n  const colors8 = d3.scaleOrdinal(d3chromatic.schemeSet2)\n  const colors20 = d3.scaleOrdinal(d3.schemeCategory20)\n\n  // D3 drag and zoom behavior\n  let scale = 1, viewX = 0, viewY = 0\n  const zoom = d3.zoom().scaleExtent([1, 20]).on('zoom', zoomed)\n  svg.call(zoom)\n\n  // D3 Line generator variables\n  const lineGen = d3.line().x(function(d) {\n    return d.scX\n  }).y(function(d) {\n    return d.scY\n  }).curve(d3.curveCatmullRom)\n\n  applyStoredOptions()\n  graphWidth = +mapWidthInput.value // voronoi graph extention, should be stable for each map\n  graphHeight = +mapHeightInput.value\n  svgWidth = graphWidth\n  svgHeight = graphHeight  // svg canvas resolution, can vary for each map\n\n  // toggle off loading screen and on menus\n  $('#loading, #initial').remove()\n  svg.style('background-color', '#000000')\n  if (localStorage.getItem('disable_click_arrow_tooltip')) {\n    tooltip.innerHTML = ''\n    tooltip.setAttribute('data-main', '')\n    $('#optionsTrigger').removeClass('glow')\n  }\n\n  $('#mapLayers').sortable({items: 'li:not(.solid)', cancel: '.solid', update: moveLayer})\n  $('#templateBody').sortable({items: 'div:not(div[data-type=\\'Mountain\\'])'})\n  $('#mapLayers, #templateBody').disableSelection()\n\n  function zoomed() {\n    const scaleDiff = Math.abs(scale - d3.event.transform.k)\n    scale = d3.event.transform.k\n    viewX = d3.event.transform.x\n    viewY = d3.event.transform.y\n    viewbox.attr('transform', d3.event.transform)\n    // rescale only if zoom is significally changed\n    if (scaleDiff > 0.001) {\n      invokeActiveZooming()\n      drawScaleBar()\n    }\n  }\n\n  // Zoom to specific point (x,y - coods, z - scale, d - duration)\n  function zoomTo(x, y, z, d) {\n    const transform = d3.zoomIdentity.translate(x * -z + graphWidth / 2, y * -z + graphHeight / 2)\n                        .scale(z)\n    svg.transition().duration(d).call(zoom.transform, transform)\n  }\n\n  // Reset zoom to initial\n  function resetZoom(duration) {\n    zoom.transform(svg, d3.zoomIdentity)\n  }\n\n  // Active zooming\n  function invokeActiveZooming() {\n    // toggle shade/blur filter on zoom\n    let filter = scale > 2.6 ? 'url(#blurFilter)' : 'url(#dropShadow)'\n    if (scale > 1.5 && scale <= 2.6) filter = null\n    coastline.attr('filter', filter)\n    // rescale lables on zoom (active zooming)\n    labels.selectAll('g').each(function(d) {\n      const el = d3.select(this)\n      if (el.attr('id') === 'burgLabels') return\n      const desired = +el.attr('data-size')\n      let relative = _.round((desired + desired / scale) / 2, 2)\n      if (relative < 2) relative = 2\n      el.attr('font-size', relative)\n      if ($('#hideLabels').checked) {\n        el.classed('hidden', relative * scale < 6)\n        updateLabelGroups()\n      }\n    })\n\n    // rescale map markers\n    markers.selectAll('use').each(function(d) {\n      const el = d3.select(this)\n      let x = +el.attr('data-x'), y = +el.attr('data-y')\n      const desired = +el.attr('data-size')\n      let size = desired * 5 + 25 / scale\n      if (size < 1) size = 1\n      el.attr('x', x - size / 2).attr('y', y - size).attr('width', size).attr('height', size)\n    })\n\n    if (ruler.size()) {\n      if (ruler.style('display') !== 'none') {\n        if (ruler.selectAll('g').size() < 1) {return}\n        const factor = _.round(1 / Math.pow(scale, 0.3), 1)\n        ruler.selectAll('circle:not(.center)').attr('r', 2 * factor)\n             .attr('stroke-width', 0.5 * factor)\n        ruler.selectAll('circle.center').attr('r', 1.2 * factor)\n             .attr('stroke-width', 0.3 * factor)\n        ruler.selectAll('text').attr('font-size', 10 * factor)\n        ruler.selectAll('line, path').attr('stroke-width', factor)\n      }\n    }\n  }\n\n  addDragToUpload()\n\n  // Changelog dialog window\n  const storedVersion = localStorage.getItem('version') // show message on load\n  if (storedVersion != version) {\n    alertMessage.innerHTML = `<b>2018-29-23</b>:\n    The <i>Fantasy Map Generator</i> is updated up to version <b>${version}</b>.\n    Main changes:<br><br>\n    <li>Map Markers</li>\n    <li>Legend Editor (text notes)</li>\n    <li>Bug fixes</li>\n    <br>See a <a href='https://www.reddit.com/r/FantasyMapGenerator/comments/9iarje/update_new_version_is_published_v060b' target='_blank'>dedicated post</a> for the details.\n    <br><br>\n    <i>Join our <a href='https://www.reddit.com/r/FantasyMapGenerator/' target='_blank'>Reddit community</a>\n    to share created maps, discuss the Generator, report bugs, ask questions and propose new features.\n    You may also report bugs <a href='https://github.com/Azgaar/Fantasy-Map-Generator/issues' target='_blank'>here</a>.</i>`\n\n    $('#alert').dialog(\n      {\n        resizable: false, title: 'Fantasy Map Generator update', width: 320,\n        buttons: {\n          'Don\\'t show again': function() {\n            localStorage.setItem('version', version)\n            $(this).dialog('close')\n          },\n          Close: function() {$(this).dialog('close')}\n        },\n        position: {my: 'center', at: 'center', of: 'svg'}\n      })\n  }\n\n  getSeed() // get and set random generator seed\n  applyNamesData() // apply default namesbase on load\n  generate() // generate map on load\n  applyDefaultStyle() // apply style on load\n  focusOn() // based on searchParams focus on point, cell or burg from MFCG\n  invokeActiveZooming() // to hide what need to be hidden\n\n  function generate() {\n    console.group('Random map')\n    console.time('TOTAL')\n    applyMapSize()\n    randomizeOptions()\n    placePoints()\n    calculateVoronoi(points)\n    detectNeighbors()\n    drawScaleBar()\n    defineHeightmap()\n    markFeatures()\n    drawOcean()\n    elevateLakes()\n    resolveDepressionsPrimary()\n    reGraph()\n    resolveDepressionsSecondary()\n    flux()\n    addLakes()\n    drawCoastline()\n    drawRelief()\n    generateCultures()\n    manorsAndRegions()\n    cleanData()\n    console.timeEnd('TOTAL')\n    console.groupEnd('Random map')\n  }\n\n  // get or generate map seed\n  function getSeed() {\n    const url = new URL(window.location.href)\n    params = url.searchParams\n    seed = params.get('seed') || Math.floor(Math.random() * 1e9)\n    console.log(' seed: ' + seed)\n    $('#optionsSeed').value = seed\n    seedrandom(seed)\n  }\n\n  // generate new map seed\n  function changeSeed() {\n    seed = Math.floor(Math.random() * 1e9)\n    console.log(' seed: ' + seed)\n    $('#optionsSeed').value = seed\n    seedrandom(seed)\n  }\n\n  // load options from LocalStorage is any\n  function applyStoredOptions() {\n    if (localStorage.getItem('mapWidth') && localStorage.getItem('mapHeight')) {\n      mapWidthInput.value = localStorage.getItem('mapWidth')\n      mapHeightInput.value = localStorage.getItem('mapHeight')\n    } else {\n      mapWidthInput.value = window.innerWidth\n      mapHeightInput.value = window.innerHeight\n    }\n    if (localStorage.getItem('graphSize')) {\n      graphSize = localStorage.getItem('graphSize')\n      sizeInput.value = sizeOutput.value = graphSize\n    } else {\n      graphSize = +sizeInput.value\n    }\n    if (localStorage.getItem('template')) {\n      templateInput.value = localStorage.getItem('template')\n      lockTemplateInput.setAttribute('data-locked', 1)\n      lockTemplateInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('manors')) {\n      manorsInput.value = manorsOutput.value = localStorage.getItem('manors')\n      lockManorsInput.setAttribute('data-locked', 1)\n      lockManorsInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('regions')) {\n      regionsInput.value = regionsOutput.value = localStorage.getItem('regions')\n      lockRegionsInput.setAttribute('data-locked', 1)\n      lockRegionsInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('power')) {\n      powerInput.value = powerOutput.value = localStorage.getItem('power')\n      lockPowerInput.setAttribute('data-locked', 1)\n      lockPowerInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('neutral')) neutralInput.value =\n      neutralOutput.value = localStorage.getItem('neutral')\n    if (localStorage.getItem('names')) {\n      namesInput.value = localStorage.getItem('names')\n      lockNamesInput.setAttribute('data-locked', 1)\n      lockNamesInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('cultures')) {\n      culturesInput.value = culturesOutput.value = localStorage.getItem('cultures')\n      lockCulturesInput.setAttribute('data-locked', 1)\n      lockCulturesInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('prec')) {\n      precInput.value = precOutput.value = localStorage.getItem('prec')\n      lockPrecInput.setAttribute('data-locked', 1)\n      lockPrecInput.className = 'icon-lock'\n    }\n    if (localStorage.getItem('swampiness')) swampinessInput.value =\n      swampinessOutput.value = localStorage.getItem('swampiness')\n    if (localStorage.getItem('outlineLayers')) outlineLayersInput.value =\n      localStorage.getItem('outlineLayers')\n    if (localStorage.getItem('pngResolution')) {\n      pngResolutionInput.value = localStorage.getItem('pngResolution')\n      pngResolutionOutput.value = pngResolutionInput.value + 'x'\n    }\n    if (localStorage.getItem('transparency')) {\n      transparencyInput.value = transparencyOutput.value = localStorage.getItem('transparency')\n      changeDialogsTransparency(transparencyInput.value)\n    } else {changeDialogsTransparency(0)}\n  }\n\n  function restoreDefaultOptions() {\n    // remove ALL saved data from LocalStorage\n    localStorage.clear()\n    // set defaut values\n    mapWidthInput.value = window.innerWidth\n    mapHeightInput.value = window.innerHeight\n    changeMapSize()\n    graphSize = sizeInput.value = sizeOutput.value = 1\n    $('#options i[class^=\\'icon-lock\\']').each(function() {\n      this.setAttribute('data-locked', 0)\n      this.className = 'icon-lock-open'\n      if (this.id === 'lockNeutralInput' || this.id === 'lockSwampinessInput') {\n        this.setAttribute('data-locked', 1)\n        this.className = 'icon-lock'\n      }\n    })\n    neutralInput.value = neutralOutput.value = 200\n    swampinessInput.value = swampinessOutput.value = 10\n    outlineLayersInput.value = '-6,-3,-1'\n    transparencyInput.value = transparencyOutput.value = 0\n    changeDialogsTransparency(0)\n    pngResolutionInput.value = 5\n    pngResolutionOutput.value = '5x'\n    randomizeOptions()\n  }\n\n  // apply names data from localStorage if available\n  function applyNamesData() {\n    applyDefaultNamesData()\n    defaultCultures = [\n      {name: 'Shwazen', color: '#b3b3b3', base: 0},\n      {name: 'Angshire', color: '#fca463', base: 1},\n      {name: 'Luari', color: '#99acfb', base: 2},\n      {name: 'Tallian', color: '#a6d854', base: 3},\n      {name: 'Toledi', color: '#ffd92f', base: 4},\n      {name: 'Slovian', color: '#e5c494', base: 5},\n      {name: 'Norse', color: '#dca3e4', base: 6},\n      {name: 'Elladian', color: '#66c4a0', base: 7},\n      {name: 'Latian', color: '#ff7174', base: 8},\n      {name: 'Soomi', color: '#85c8fa', base: 9},\n      {name: 'Koryo', color: '#578880', base: 10},\n      {name: 'Hantzu', color: '#becb8d', base: 11},\n      {name: 'Yamoto', color: '#ffd9da', base: 12}\n    ]\n  }\n\n  // apply default names data\n  function applyDefaultNamesData() {\n    nameBases = [                                                                   // min; max; mean; common\n      {name: 'German', method: 'let-to-syl', min: 4, max: 11, d: 'lt', m: 0.1},     // real: 3; 17; 8.6; 8\n      {name: 'English', method: 'let-to-syl', min: 5, max: 10, d: '', m: 0.3},      // real: 4; 13; 7.9; 8\n      {name: 'French', method: 'let-to-syl', min: 4, max: 10, d: 'lns', m: 0.3},    // real: 3; 15; 7.6; 6\n      {name: 'Italian', method: 'let-to-syl', min: 4, max: 11, d: 'clrt', m: 0.2},  // real: 4; 14; 7.7; 7\n      {name: 'Castillian', method: 'let-to-syl', min: 4, max: 10, d: 'lr', m: 0},   // real: 2; 13; 7.5; 8\n      {name: 'Ruthenian', method: 'let-to-syl', min: 4, max: 9, d: '', m: 0},       // real: 3; 12; 7.1; 7\n      {name: 'Nordic', method: 'let-to-syl', min: 5, max: 9, d: 'kln', m: 0.1},     // real: 3; 12; 7.5; 6\n      {name: 'Greek', method: 'let-to-syl', min: 4, max: 10, d: 'ls', m: 0.2},      // real: 3; 14; 7.1; 6\n      {name: 'Roman', method: 'let-to-syl', min: 5, max: 10, d: '', m: 1},          // real: 3; 15; 8.0; 7\n      {name: 'Finnic', method: 'let-to-syl', min: 3, max: 10, d: 'aktu', m: 0},     // real: 3; 13; 7.5; 6\n      {name: 'Korean', method: 'let-to-syl', min: 5, max: 10, d: '', m: 0},         // real: 3; 13; 6.8; 7\n      {name: 'Chinese', method: 'let-to-syl', min: 5, max: 9, d: '', m: 0},         // real: 4; 11; 6.9; 6\n      {name: 'Japanese', method: 'let-to-syl', min: 3, max: 9, d: '', m: 0}         // real: 2; 15; 6.8; 6\n    ]\n    nameBase = [\n      ['Achern', 'Aichhalden', 'Aitern', 'Albbruck', 'Alpirsbach', 'Altensteig', 'Althengstett', 'Appenweier', 'Auggen', 'Wildbad', 'Badenen', 'Badenweiler', 'Baiersbronn', 'Ballrechten', 'Bellingen', 'Berghaupten', 'Bernau', 'Biberach', 'Biederbach', 'Binzen', 'Birkendorf', 'Birkenfeld', 'Bischweier', 'Blumberg', 'Bollen', 'Bollschweil', 'Bonndorf', 'Bosingen', 'Braunlingen', 'Breisach', 'Breisgau', 'Breitnau', 'Brigachtal', 'Buchenbach', 'Buggingen', 'Buhl', 'Buhlertal', 'Calw', 'Dachsberg', 'Dobel', 'Donaueschingen', 'Dornhan', 'Dornstetten', 'Dottingen', 'Dunningen', 'Durbach', 'Durrheim', 'Ebhausen', 'Ebringen', 'Efringen', 'Egenhausen', 'Ehrenkirchen', 'Ehrsberg', 'Eimeldingen', 'Eisenbach', 'Elzach', 'Elztal', 'Emmendingen', 'Endingen', 'Engelsbrand', 'Enz', 'Enzklosterle', 'Eschbronn', 'Ettenheim', 'Ettlingen', 'Feldberg', 'Fischerbach', 'Fischingen', 'Fluorn', 'Forbach', 'Freiamt', 'Freiburg', 'Freudenstadt', 'Friedenweiler', 'Friesenheim', 'Frohnd', 'Furtwangen', 'Gaggenau', 'Geisingen', 'Gengenbach', 'Gernsbach', 'Glatt', 'Glatten', 'Glottertal', 'Gorwihl', 'Gottenheim', 'Grafenhausen', 'Grenzach', 'Griesbach', 'Gutach', 'Gutenbach', 'Hag', 'Haiterbach', 'Hardt', 'Harmersbach', 'Hasel', 'Haslach', 'Hausach', 'Hausen', 'Hausern', 'Heitersheim', 'Herbolzheim', 'Herrenalb', 'Herrischried', 'Hinterzarten', 'Hochenschwand', 'Hofen', 'Hofstetten', 'Hohberg', 'Horb', 'Horben', 'Hornberg', 'Hufingen', 'Ibach', 'Ihringen', 'Inzlingen', 'Kandern', 'Kappel', 'Kappelrodeck', 'Karlsbad', 'Karlsruhe', 'Kehl', 'Keltern', 'Kippenheim', 'Kirchzarten', 'Konigsfeld', 'Krozingen', 'Kuppenheim', 'Kussaberg', 'Lahr', 'Lauchringen', 'Lauf', 'Laufenburg', 'Lautenbach', 'Lauterbach', 'Lenzkirch', 'Liebenzell', 'Loffenau', 'Loffingen', 'Lorrach', 'Lossburg', 'Mahlberg', 'Malsburg', 'Malsch', 'March', 'Marxzell', 'Marzell', 'Maulburg', 'Monchweiler', 'Muhlenbach', 'Mullheim', 'Munstertal', 'Murg', 'Nagold', 'Neubulach', 'Neuenburg', 'Neuhausen', 'Neuried', 'Neuweiler', 'Niedereschach', 'Nordrach', 'Oberharmersbach', 'Oberkirch', 'Oberndorf', 'Oberbach', 'Oberried', 'Oberwolfach', 'Offenburg', 'Ohlsbach', 'Oppenau', 'Ortenberg', 'otigheim', 'Ottenhofen', 'Ottersweier', 'Peterstal', 'Pfaffenweiler', 'Pfalzgrafenweiler', 'Pforzheim', 'Rastatt', 'Renchen', 'Rheinau', 'Rheinfelden', 'Rheinmunster', 'Rickenbach', 'Rippoldsau', 'Rohrdorf', 'Rottweil', 'Rummingen', 'Rust', 'Sackingen', 'Sasbach', 'Sasbachwalden', 'Schallbach', 'Schallstadt', 'Schapbach', 'Schenkenzell', 'Schiltach', 'Schliengen', 'Schluchsee', 'Schomberg', 'Schonach', 'Schonau', 'Schonenberg', 'Schonwald', 'Schopfheim', 'Schopfloch', 'Schramberg', 'Schuttertal', 'Schwenningen', 'Schworstadt', 'Seebach', 'Seelbach', 'Seewald', 'Sexau', 'Simmersfeld', 'Simonswald', 'Sinzheim', 'Solden', 'Staufen', 'Stegen', 'Steinach', 'Steinen', 'Steinmauern', 'Straubenhardt', 'Stuhlingen', 'Sulz', 'Sulzburg', 'Teinach', 'Tiefenbronn', 'Tiengen', 'Titisee', 'Todtmoos', 'Todtnau', 'Todtnauberg', 'Triberg', 'Tunau', 'Tuningen', 'uhlingen', 'Unterkirnach', 'Reichenbach', 'Utzenfeld', 'Villingen', 'Villingendorf', 'Vogtsburg', 'Vohrenbach', 'Waldachtal', 'Waldbronn', 'Waldkirch', 'Waldshut', 'Wehr', 'Weil', 'Weilheim', 'Weisenbach', 'Wembach', 'Wieden', 'Wiesental', 'Wildberg', 'Winzeln', 'Wittlingen', 'Wittnau', 'Wolfach', 'Wutach', 'Wutoschingen', 'Wyhlen', 'Zavelstein'],\n      ['Abingdon', 'Albrighton', 'Alcester', 'Almondbury', 'Altrincham', 'Amersham', 'Andover', 'Appleby', 'Ashboume', 'Atherstone', 'Aveton', 'Axbridge', 'Aylesbury', 'Baldock', 'Bamburgh', 'Barton', 'Basingstoke', 'Berden', 'Bere', 'Berkeley', 'Berwick', 'Betley', 'Bideford', 'Bingley', 'Birmingham', 'Blandford', 'Blechingley', 'Bodmin', 'Bolton', 'Bootham', 'Boroughbridge', 'Boscastle', 'Bossinney', 'Bramber', 'Brampton', 'Brasted', 'Bretford', 'Bridgetown', 'Bridlington', 'Bromyard', 'Bruton', 'Buckingham', 'Bungay', 'Burton', 'Calne', 'Cambridge', 'Canterbury', 'Carlisle', 'Castleton', 'Caus', 'Charmouth', 'Chawleigh', 'Chichester', 'Chillington', 'Chinnor', 'Chipping', 'Chisbury', 'Cleobury', 'Clifford', 'Clifton', 'Clitheroe', 'Cockermouth', 'Coleshill', 'Combe', 'Congleton', 'Crafthole', 'Crediton', 'Cuddenbeck', 'Dalton', 'Darlington', 'Dodbrooke', 'Drax', 'Dudley', 'Dunstable', 'Dunster', 'Dunwich', 'Durham', 'Dymock', 'Exeter', 'Exning', 'Faringdon', 'Felton', 'Fenny', 'Finedon', 'Flookburgh', 'Fowey', 'Frampton', 'Gateshead', 'Gatton', 'Godmanchester', 'Grampound', 'Grantham', 'Guildford', 'Halesowen', 'Halton', 'Harbottle', 'Harlow', 'Hatfield', 'Hatherleigh', 'Haydon', 'Helston', 'Henley', 'Hertford', 'Heytesbury', 'Hinckley', 'Hitchin', 'Holme', 'Hornby', 'Horsham', 'Kendal', 'Kenilworth', 'Kilkhampton', 'Kineton', 'Kington', 'Kinver', 'Kirby', 'Knaresborough', 'Knutsford', 'Launceston', 'Leighton', 'Lewes', 'Linton', 'Louth', 'Luton', 'Lyme', 'Lympstone', 'Macclesfield', 'Madeley', 'Malborough', 'Maldon', 'Manchester', 'Manningtree', 'Marazion', 'Marlborough', 'Marshfield', 'Mere', 'Merryfield', 'Middlewich', 'Midhurst', 'Milborne', 'Mitford', 'Modbury', 'Montacute', 'Mousehole', 'Newbiggin', 'Newborough', 'Newbury', 'Newenden', 'Newent', 'Norham', 'Northleach', 'Noss', 'Oakham', 'Olney', 'Orford', 'Ormskirk', 'Oswestry', 'Padstow', 'Paignton', 'Penkneth', 'Penrith', 'Penzance', 'Pershore', 'Petersfield', 'Pevensey', 'Pickering', 'Pilton', 'Pontefract', 'Portsmouth', 'Preston', 'Quatford', 'Reading', 'Redcliff', 'Retford', 'Rockingham', 'Romney', 'Rothbury', 'Rothwell', 'Salisbury', 'Saltash', 'Seaford', 'Seasalter', 'Sherston', 'Shifnal', 'Shoreham', 'Sidmouth', 'Skipsea', 'Skipton', 'Solihull', 'Somerton', 'Southam', 'Southwark', 'Standon', 'Stansted', 'Stapleton', 'Stottesdon', 'Sudbury', 'Swavesey', 'Tamerton', 'Tarporley', 'Tetbury', 'Thatcham', 'Thaxted', 'Thetford', 'Thornbury', 'Tintagel', 'Tiverton', 'Torksey', 'Totnes', 'Towcester', 'Tregoney', 'Trematon', 'Tutbury', 'Uxbridge', 'Wallingford', 'Wareham', 'Warenmouth', 'Wargrave', 'Warton', 'Watchet', 'Watford', 'Wendover', 'Westbury', 'Westcheap', 'Weymouth', 'Whitford', 'Wickwar', 'Wigan', 'Wigmore', 'Winchelsea', 'Winkleigh', 'Wiscombe', 'Witham', 'Witheridge', 'Wiveliscombe', 'Woodbury', 'Yeovil'],\n      ['Adon', 'Aillant', 'Amilly', 'Andonville', 'Ardon', 'Artenay', 'Ascheres', 'Ascoux', 'Attray', 'Aubin', 'Audeville', 'Aulnay', 'Autruy', 'Auvilliers', 'Auxy', 'Aveyron', 'Baccon', 'Bardon', 'Barville', 'Batilly', 'Baule', 'Bazoches', 'Beauchamps', 'Beaugency', 'Beaulieu', 'Beaune', 'Bellegarde', 'Boesses', 'Boigny', 'Boiscommun', 'Boismorand', 'Boisseaux', 'Bondaroy', 'Bonnee', 'Bonny', 'Bordes', 'Bou', 'Bougy', 'Bouilly', 'Boulay', 'Bouzonville', 'Bouzy', 'Boynes', 'Bray', 'Breteau', 'Briare', 'Briarres', 'Bricy', 'Bromeilles', 'Bucy', 'Cepoy', 'Cercottes', 'Cerdon', 'Cernoy', 'Cesarville', 'Chailly', 'Chaingy', 'Chalette', 'Chambon', 'Champoulet', 'Chanteau', 'Chantecoq', 'Chapell', 'Charme', 'Charmont', 'Charsonville', 'Chateau', 'Chateauneuf', 'Chatel', 'Chatenoy', 'Chatillon', 'Chaussy', 'Checy', 'Chevannes', 'Chevillon', 'Chevilly', 'Chevry', 'Chilleurs', 'Choux', 'Chuelles', 'Clery', 'Coinces', 'Coligny', 'Combleux', 'Combreux', 'Conflans', 'Corbeilles', 'Corquilleroy', 'Cortrat', 'Coudroy', 'Coullons', 'Coulmiers', 'Courcelles', 'Courcy', 'Courtemaux', 'Courtempierre', 'Courtenay', 'Cravant', 'Crottes', 'Dadonville', 'Dammarie', 'Dampierre', 'Darvoy', 'Desmonts', 'Dimancheville', 'Donnery', 'Dordives', 'Dossainville', 'Douchy', 'Dry', 'Echilleuses', 'Egry', 'Engenville', 'Epieds', 'Erceville', 'Ervauville', 'Escrennes', 'Escrignelles', 'Estouy', 'Faverelles', 'Fay', 'Feins', 'Ferolles', 'Ferrieres', 'Fleury', 'Fontenay', 'Foret', 'Foucherolles', 'Freville', 'Gatinais', 'Gaubertin', 'Gemigny', 'Germigny', 'Gidy', 'Gien', 'Girolles', 'Givraines', 'Gondreville', 'Grangermont', 'Greneville', 'Griselles', 'Guigneville', 'Guilly', 'Gyleslonains', 'Huetre', 'Huisseau', 'Ingrannes', 'Ingre', 'Intville', 'Isdes', 'Jargeau', 'Jouy', 'Juranville', 'Bussiere', 'Laas', 'Ladon', 'Lailly', 'Langesse', 'Leouville', 'Ligny', 'Lombreuil', 'Lorcy', 'Lorris', 'Loury', 'Louzouer', 'Malesherbois', 'Marcilly', 'Mardie', 'Mareau', 'Marigny', 'Marsainvilliers', 'Melleroy', 'Menestreau', 'Merinville', 'Messas', 'Meung', 'Mezieres', 'Migneres', 'Mignerette', 'Mirabeau', 'Montargis', 'Montbarrois', 'Montbouy', 'Montcresson', 'Montereau', 'Montigny', 'Montliard', 'Mormant', 'Morville', 'Moulinet', 'Moulon', 'Nancray', 'Nargis', 'Nesploy', 'Neuville', 'Neuvy', 'Nevoy', 'Nibelle', 'Nogent', 'Noyers', 'Ocre', 'Oison', 'Olivet', 'Ondreville', 'Onzerain', 'Orleans', 'Ormes', 'Orville', 'Oussoy', 'Outarville', 'Ouzouer', 'Pannecieres', 'Pannes', 'Patay', 'Paucourt', 'Pers', 'Pierrefitte', 'Pithiverais', 'Pithiviers', 'Poilly', 'Potier', 'Prefontaines', 'Presnoy', 'Pressigny', 'Puiseaux', 'Quiers', 'Ramoulu', 'Rebrechien', 'Rouvray', 'Rozieres', 'Rozoy', 'Ruan', 'Sandillon', 'Santeau', 'Saran', 'Sceaux', 'Seichebrieres', 'Semoy', 'Sennely', 'Sermaises', 'Sigloy', 'Solterre', 'Sougy', 'Sully', 'Sury', 'Tavers', 'Thignonville', 'Thimory', 'Thorailles', 'Thou', 'Tigy', 'Tivernon', 'Tournoisis', 'Trainou', 'Treilles', 'Trigueres', 'Trinay', 'Vannes', 'Varennes', 'Vennecy', 'Vieilles', 'Vienne', 'Viglain', 'Vignes', 'Villamblain', 'Villemandeur', 'Villemoutiers', 'Villemurlin', 'Villeneuve', 'Villereau', 'Villevoques', 'Villorceau', 'Vimory', 'Vitry', 'Vrigny', 'Ivre'],\n      ['Accumoli', 'Acquafondata', 'Acquapendente', 'Acuto', 'Affile', 'Agosta', 'Alatri', 'Albano', 'Allumiere', 'Alvito', 'Amaseno', 'Amatrice', 'Anagni', 'Anguillara', 'Anticoli', 'Antrodoco', 'Anzio', 'Aprilia', 'Aquino', 'Arce', 'Arcinazzo', 'Ardea', 'Ariccia', 'Arlena', 'Arnara', 'Arpino', 'Arsoli', 'Artena', 'Ascrea', 'Atina', 'Ausonia', 'Bagnoregio', 'Barbarano', 'Bassano', 'Bassiano', 'Bellegra', 'Belmonte', 'Blera', 'Bolsena', 'Bomarzo', 'Borbona', 'Borgo', 'Borgorose', 'Boville', 'Bracciano', 'Broccostella', 'Calcata', 'Camerata', 'Campagnano', 'Campodimele', 'Campoli', 'Canale', 'Canepina', 'Canino', 'Cantalice', 'Cantalupo', 'Canterano', 'Capena', 'Capodimonte', 'Capranica', 'Caprarola', 'Carbognano', 'Casalattico', 'Casalvieri', 'Casape', 'Casaprota', 'Casperia', 'Cassino', 'Castelforte', 'Castelliri', 'Castello', 'Castelnuovo', 'Castiglione', 'Castro', 'Castrocielo', 'Cave', 'Ceccano', 'Celleno', 'Cellere', 'Ceprano', 'Cerreto', 'Cervara', 'Cervaro', 'Cerveteri', 'Ciampino', 'Ciciliano', 'Cineto', 'Cisterna', 'Cittaducale', 'Cittareale', 'Civita', 'Civitavecchia', 'Civitella', 'Colfelice', 'Collalto', 'Colle', 'Colleferro', 'Collegiove', 'Collepardo', 'Collevecchio', 'Colli', 'Colonna', 'Concerviano', 'Configni', 'Contigliano', 'Corchiano', 'Coreno', 'Cori', 'Cottanello', 'Esperia', 'Fabrica', 'Faleria', 'Falvaterra', 'Fara', 'Farnese', 'Ferentino', 'Fiamignano', 'Fiano', 'Filacciano', 'Filettino', 'Fiuggi', 'Fiumicino', 'Fondi', 'Fontana', 'Fonte', 'Fontechiari', 'Forano', 'Formello', 'Formia', 'Frascati', 'Frasso', 'Frosinone', 'Fumone', 'Gaeta', 'Gallese', 'Gallicano', 'Gallinaro', 'Gavignano', 'Genazzano', 'Genzano', 'Gerano', 'Giuliano', 'Gorga', 'Gradoli', 'Graffignano', 'Greccio', 'Grottaferrata', 'Grotte', 'Guarcino', 'Guidonia', 'Ischia', 'Isola', 'Itri', 'Jenne', 'Labico', 'Labro', 'Ladispoli', 'Lanuvio', 'Lariano', 'Latera', 'Lenola', 'Leonessa', 'Licenza', 'Longone', 'Lubriano', 'Maenza', 'Magliano', 'Mandela', 'Manziana', 'Marano', 'Marcellina', 'Marcetelli', 'Marino', 'Marta', 'Mazzano', 'Mentana', 'Micigliano', 'Minturno', 'Mompeo', 'Montalto', 'Montasola', 'Monte', 'Montebuono', 'Montefiascone', 'Monteflavio', 'Montelanico', 'Monteleone', 'Montelibretti', 'Montenero', 'Monterosi', 'Monterotondo', 'Montopoli', 'Montorio', 'Moricone', 'Morlupo', 'Morolo', 'Morro', 'Nazzano', 'Nemi', 'Nepi', 'Nerola', 'Nespolo', 'Nettuno', 'Norma', 'Olevano', 'Onano', 'Oriolo', 'Orte', 'Orvinio', 'Paganico', 'Palestrina', 'Paliano', 'Palombara', 'Pastena', 'Patrica', 'Percile', 'Pescorocchiano', 'Pescosolido', 'Petrella', 'Piansano', 'Picinisco', 'Pico', 'Piedimonte', 'Piglio', 'Pignataro', 'Pisoniano', 'Pofi', 'Poggio', 'Poli', 'Pomezia', 'Pontecorvo', 'Pontinia', 'Ponza', 'Ponzano', 'Posta', 'Pozzaglia', 'Priverno', 'Proceno', 'Prossedi', 'Riano', 'Rieti', 'Rignano', 'Riofreddo', 'Ripi', 'Rivodutri', 'Rocca', 'Roccagiovine', 'Roccagorga', 'Roccantica', 'Roccasecca', 'Roiate', 'Ronciglione', 'Roviano', 'Sabaudia', 'Sacrofano', 'Salisano', 'Sambuci', 'Santa', 'Santi', 'Santopadre', 'Saracinesco', 'Scandriglia', 'Segni', 'Selci', 'Sermoneta', 'Serrone', 'Settefrati', 'Sezze', 'Sgurgola', 'Sonnino', 'Sora', 'Soriano', 'Sperlonga', 'Spigno', 'Stimigliano', 'Strangolagalli', 'Subiaco', 'Supino', 'Sutri', 'Tarano', 'Tarquinia', 'Terelle', 'Terracina', 'Tessennano', 'Tivoli', 'Toffia', 'Tolfa', 'Torre', 'Torri', 'Torrice', 'Torricella', 'Torrita', 'Trevi', 'Trevignano', 'Trivigliano', 'Turania', 'Tuscania', 'Vacone', 'Valentano', 'Vallecorsa', 'Vallemaio', 'Vallepietra', 'Vallerano', 'Vallerotonda', 'Vallinfreda', 'Valmontone', 'Varco', 'Vasanello', 'Vejano', 'Velletri', 'Ventotene', 'Veroli', 'Vetralla', 'Vicalvi', 'Vico', 'Vicovaro', 'Vignanello', 'Viterbo', 'Viticuso', 'Vitorchiano', 'Vivaro', 'Zagarolo'],\n      ['Abanades', 'Ablanque', 'Adobes', 'Ajofrin', 'Alameda', 'Alaminos', 'Alarilla', 'Albalate', 'Albares', 'Albarreal', 'Albendiego', 'Alcabon', 'Alcanizo', 'Alcaudete', 'Alcocer', 'Alcolea', 'Alcoroches', 'Aldea', 'Aldeanueva', 'Algar', 'Algora', 'Alhondiga', 'Alique', 'Almadrones', 'Almendral', 'Almoguera', 'Almonacid', 'Almorox', 'Alocen', 'Alovera', 'Alustante', 'Angon', 'Anguita', 'Anover', 'Anquela', 'Arbancon', 'Arbeteta', 'Arcicollar', 'Argecilla', 'Arges', 'Armallones', 'Armuna', 'Arroyo', 'Atanzon', 'Atienza', 'Aunon', 'Azuqueca', 'Azutan', 'Baides', 'Banos', 'Banuelos', 'Barcience', 'Bargas', 'Barriopedro', 'Belvis', 'Berninches', 'Borox', 'Brihuega', 'Budia', 'Buenaventura', 'Bujalaro', 'Burguillos', 'Burujon', 'Bustares', 'Cabanas', 'Cabanillas', 'Calera', 'Caleruela', 'Calzada', 'Camarena', 'Campillo', 'Camunas', 'Canizar', 'Canredondo', 'Cantalojas', 'Cardiel', 'Carmena', 'Carranque', 'Carriches', 'Casa', 'Casarrubios', 'Casas', 'Casasbuenas', 'Caspuenas', 'Castejon', 'Castellar', 'Castilforte', 'Castillo', 'Castilnuevo', 'Cazalegas', 'Cebolla', 'Cedillo', 'Cendejas', 'Centenera', 'Cervera', 'Checa', 'Chequilla', 'Chillaron', 'Chiloeches', 'Chozas', 'Chueca', 'Cifuentes', 'Cincovillas', 'Ciruelas', 'Ciruelos', 'Cobeja', 'Cobeta', 'Cobisa', 'Cogollor', 'Cogolludo', 'Condemios', 'Congostrina', 'Consuegra', 'Copernal', 'Corduente', 'Corral', 'Cuerva', 'Domingo', 'Dosbarrios', 'Driebes', 'Duron', 'El', 'Embid', 'Erustes', 'Escalona', 'Escalonilla', 'Escamilla', 'Escariche', 'Escopete', 'Espinosa', 'Espinoso', 'Esplegares', 'Esquivias', 'Estables', 'Estriegana', 'Fontanar', 'Fuembellida', 'Fuensalida', 'Fuentelsaz', 'Gajanejos', 'Galve', 'Galvez', 'Garciotum', 'Gascuena', 'Gerindote', 'Guadamur', 'Henche', 'Heras', 'Herreria', 'Herreruela', 'Hijes', 'Hinojosa', 'Hita', 'Hombrados', 'Hontanar', 'Hontoba', 'Horche', 'Hormigos', 'Huecas', 'Huermeces', 'Huerta', 'Hueva', 'Humanes', 'Illan', 'Illana', 'Illescas', 'Iniestola', 'Irueste', 'Jadraque', 'Jirueque', 'Lagartera', 'Las', 'Layos', 'Ledanca', 'Lillo', 'Lominchar', 'Loranca', 'Los', 'Lucillos', 'Lupiana', 'Luzaga', 'Luzon', 'Madridejos', 'Magan', 'Majaelrayo', 'Malaga', 'Malaguilla', 'Malpica', 'Mandayona', 'Mantiel', 'Manzaneque', 'Maqueda', 'Maranchon', 'Marchamalo', 'Marjaliza', 'Marrupe', 'Mascaraque', 'Masegoso', 'Matarrubia', 'Matillas', 'Mazarete', 'Mazuecos', 'Medranda', 'Megina', 'Mejorada', 'Mentrida', 'Mesegar', 'Miedes', 'Miguel', 'Millana', 'Milmarcos', 'Mirabueno', 'Miralrio', 'Mocejon', 'Mochales', 'Mohedas', 'Molina', 'Monasterio', 'Mondejar', 'Montarron', 'Mora', 'Moratilla', 'Morenilla', 'Muduex', 'Nambroca', 'Navalcan', 'Negredo', 'Noblejas', 'Noez', 'Nombela', 'Noves', 'Numancia', 'Nuno', 'Ocana', 'Ocentejo', 'Olias', 'Olmeda', 'Ontigola', 'Orea', 'Orgaz', 'Oropesa', 'Otero', 'Palmaces', 'Palomeque', 'Pantoja', 'Pardos', 'Paredes', 'Pareja', 'Parrillas', 'Pastrana', 'Pelahustan', 'Penalen', 'Penalver', 'Pepino', 'Peralejos', 'Peralveche', 'Pinilla', 'Pioz', 'Piqueras', 'Polan', 'Portillo', 'Poveda', 'Pozo', 'Pradena', 'Prados', 'Puebla', 'Puerto', 'Pulgar', 'Quer', 'Quero', 'Quintanar', 'Quismondo', 'Rebollosa', 'Recas', 'Renera', 'Retamoso', 'Retiendas', 'Riba', 'Rielves', 'Rillo', 'Riofrio', 'Robledillo', 'Robledo', 'Romanillos', 'Romanones', 'Rueda', 'Sacecorbo', 'Sacedon', 'Saelices', 'Salmeron', 'San', 'Santa', 'Santiuste', 'Santo', 'Sartajada', 'Sauca', 'Sayaton', 'Segurilla', 'Selas', 'Semillas', 'Sesena', 'Setiles', 'Sevilleja', 'Sienes', 'Siguenza', 'Solanillos', 'Somolinos', 'Sonseca', 'Sotillo', 'Sotodosos', 'Talavera', 'Tamajon', 'Taragudo', 'Taravilla', 'Tartanedo', 'Tembleque', 'Tendilla', 'Terzaga', 'Tierzo', 'Tordellego', 'Tordelrabano', 'Tordesilos', 'Torija', 'Torralba', 'Torre', 'Torrecilla', 'Torrecuadrada', 'Torrejon', 'Torremocha', 'Torrico', 'Torrijos', 'Torrubia', 'Tortola', 'Tortuera', 'Tortuero', 'Totanes', 'Traid', 'Trijueque', 'Trillo', 'Turleque', 'Uceda', 'Ugena', 'Ujados', 'Urda', 'Utande', 'Valdarachas', 'Valdesotos', 'Valhermoso', 'Valtablado', 'Valverde', 'Velada', 'Viana', 'Vinuelas', 'Yebes', 'Yebra', 'Yelamos', 'Yeles', 'Yepes', 'Yuncler', 'Yunclillos', 'Yuncos', 'Yunquera', 'Zaorejas', 'Zarzuela', 'Zorita'],\n      ['Belgorod', 'Beloberezhye', 'Belyi', 'Belz', 'Berestiy', 'Berezhets', 'Berezovets', 'Berezutsk', 'Bobruisk', 'Bolonets', 'Borisov', 'Borovsk', 'Bozhesk', 'Bratslav', 'Bryansk', 'Brynsk', 'Buryn', 'Byhov', 'Chechersk', 'Chemesov', 'Cheremosh', 'Cherlen', 'Chern', 'Chernigov', 'Chernitsa', 'Chernobyl', 'Chernogorod', 'Chertoryesk', 'Chetvertnia', 'Demyansk', 'Derevesk', 'Devyagoresk', 'Dichin', 'Dmitrov', 'Dorogobuch', 'Dorogobuzh', 'Drestvin', 'Drokov', 'Drutsk', 'Dubechin', 'Dubichi', 'Dubki', 'Dubkov', 'Dveren', 'Galich', 'Glebovo', 'Glinsk', 'Goloty', 'Gomiy', 'Gorodets', 'Gorodische', 'Gorodno', 'Gorohovets', 'Goroshin', 'Gorval', 'Goryshon', 'Holm', 'Horobor', 'Hoten', 'Hotin', 'Hotmyzhsk', 'Ilovech', 'Ivan', 'Izborsk', 'Izheslavl', 'Kamenets', 'Kanev', 'Karachev', 'Karna', 'Kavarna', 'Klechesk', 'Klyapech', 'Kolomyya', 'Kolyvan', 'Kopyl', 'Korec', 'Kornik', 'Korochunov', 'Korshev', 'Korsun', 'Koshkin', 'Kotelno', 'Kovyla', 'Kozelsk', 'Kozelsk', 'Kremenets', 'Krichev', 'Krylatsk', 'Ksniatin', 'Kulatsk', 'Kursk', 'Kursk', 'Lebedev', 'Lida', 'Logosko', 'Lomihvost', 'Loshesk', 'Loshichi', 'Lubech', 'Lubno', 'Lubutsk', 'Lutsk', 'Luchin', 'Luki', 'Lukoml', 'Luzha', 'Lvov', 'Mtsensk', 'Mdin', 'Medniki', 'Melecha', 'Merech', 'Meretsk', 'Mescherskoe', 'Meshkovsk', 'Metlitsk', 'Mezetsk', 'Mglin', 'Mihailov', 'Mikitin', 'Mikulino', 'Miloslavichi', 'Mogilev', 'Mologa', 'Moreva', 'Mosalsk', 'Moschiny', 'Mozyr', 'Mstislav', 'Mstislavets', 'Muravin', 'Nemech', 'Nemiza', 'Nerinsk', 'Nichan', 'Novgorod', 'Novogorodok', 'Obolichi', 'Obolensk', 'Obolensk', 'Oleshsk', 'Olgov', 'Omelnik', 'Opoka', 'Opoki', 'Oreshek', 'Orlets', 'Osechen', 'Oster', 'Ostrog', 'Ostrov', 'Perelai', 'Peremil', 'Peremyshl', 'Pererov', 'Peresechen', 'Perevitsk', 'Pereyaslav', 'Pinsk', 'Ples', 'Polotsk', 'Pronsk', 'Proposhesk', 'Punia', 'Putivl', 'Rechitsa', 'Rodno', 'Rogachev', 'Romanov', 'Romny', 'Roslavl', 'Rostislavl', 'Rostovets', 'Rsha', 'Ruza', 'Rybchesk', 'Rylsk', 'Rzhavesk', 'Rzhev', 'Rzhischev', 'Sambor', 'Serensk', 'Serensk', 'Serpeysk', 'Shilov', 'Shuya', 'Sinech', 'Sizhka', 'Skala', 'Slovensk', 'Slutsk', 'Smedin', 'Sneporod', 'Snitin', 'Snovsk', 'Sochevo', 'Sokolec', 'Starica', 'Starodub', 'Stepan', 'Sterzh', 'Streshin', 'Sutesk', 'Svinetsk', 'Svisloch', 'Terebovl', 'Ternov', 'Teshilov', 'Teterin', 'Tiversk', 'Torchevsk', 'Toropets', 'Torzhok', 'Tripolye', 'Trubchevsk', 'Tur', 'Turov', 'Usvyaty', 'Uteshkov', 'Vasilkov', 'Velil', 'Velye', 'Venev', 'Venicha', 'Verderev', 'Vereya', 'Veveresk', 'Viazma', 'Vidbesk', 'Vidychev', 'Voino', 'Volodimer', 'Volok', 'Volyn', 'Vorobesk', 'Voronich', 'Voronok', 'Vorotynsk', 'Vrev', 'Vruchiy', 'Vselug', 'Vyatichsk', 'Vyatka', 'Vyshegorod', 'Vyshgorod', 'Vysokoe', 'Yagniatin', 'Yaropolch', 'Yasenets', 'Yuryev', 'Yuryevets', 'Zaraysk', 'Zhitomel', 'Zholvazh', 'Zizhech', 'Zubkov', 'Zudechev', 'Zvenigorod'],\n      ['Akureyri', 'Aldra', 'Alftanes', 'Andenes', 'Austbo', 'Auvog', 'Bakkafjordur', 'Ballangen', 'Bardal', 'Beisfjord', 'Bifrost', 'Bildudalur', 'Bjerka', 'Bjerkvik', 'Bjorkosen', 'Bliksvaer', 'Blokken', 'Blonduos', 'Bolga', 'Bolungarvik', 'Borg', 'Borgarnes', 'Bosmoen', 'Bostad', 'Bostrand', 'Botsvika', 'Brautarholt', 'Breiddalsvik', 'Bringsli', 'Brunahlid', 'Budardalur', 'Byggdakjarni', 'Dalvik', 'Djupivogur', 'Donnes', 'Drageid', 'Drangsnes', 'Egilsstadir', 'Eiteroga', 'Elvenes', 'Engavogen', 'Ertenvog', 'Eskifjordur', 'Evenes', 'Eyrarbakki', 'Fagernes', 'Fallmoen', 'Fellabaer', 'Fenes', 'Finnoya', 'Fjaer', 'Fjelldal', 'Flakstad', 'Flateyri', 'Flostrand', 'Fludir', 'Gardabær', 'Gardur', 'Gimstad', 'Givaer', 'Gjeroy', 'Gladstad', 'Godoya', 'Godoynes', 'Granmoen', 'Gravdal', 'Grenivik', 'Grimsey', 'Grindavik', 'Grytting', 'Hafnir', 'Halsa', 'Hauganes', 'Haugland', 'Hauknes', 'Hella', 'Helland', 'Hellissandur', 'Hestad', 'Higrav', 'Hnifsdalur', 'Hofn', 'Hofsos', 'Holand', 'Holar', 'Holen', 'Holkestad', 'Holmavik', 'Hopen', 'Hovden', 'Hrafnagil', 'Hrisey', 'Husavik', 'Husvik', 'Hvammstangi', 'Hvanneyri', 'Hveragerdi', 'Hvolsvollur', 'Igeroy', 'Indre', 'Inndyr', 'Innhavet', 'Innes', 'Isafjordur', 'Jarklaustur', 'Jarnsreykir', 'Junkerdal', 'Kaldvog', 'Kanstad', 'Karlsoy', 'Kavosen', 'Keflavik', 'Kjelde', 'Kjerstad', 'Klakk', 'Kopasker', 'Kopavogur', 'Korgen', 'Kristnes', 'Krutoga', 'Krystad', 'Kvina', 'Lande', 'Laugar', 'Laugaras', 'Laugarbakki', 'Laugarvatn', 'Laupstad', 'Leines', 'Leira', 'Leiren', 'Leland', 'Lenvika', 'Loding', 'Lodingen', 'Lonsbakki', 'Lopsmarka', 'Lovund', 'Luroy', 'Maela', 'Melahverfi', 'Meloy', 'Mevik', 'Misvaer', 'Mornes', 'Mosfellsbær', 'Moskenes', 'Myken', 'Naurstad', 'Nesberg', 'Nesjahverfi', 'Nesset', 'Nevernes', 'Obygda', 'Ofoten', 'Ogskardet', 'Okervika', 'Oknes', 'Olafsfjordur', 'Oldervika', 'Olstad', 'Onstad', 'Oppeid', 'Oresvika', 'Orsnes', 'Orsvog', 'Osmyra', 'Overdal', 'Prestoya', 'Raudalaekur', 'Raufarhofn', 'Reipo', 'Reykholar', 'Reykholt', 'Reykjahlid', 'Rif', 'Rinoya', 'Rodoy', 'Rognan', 'Rosvika', 'Rovika', 'Salhus', 'Sanden', 'Sandgerdi', 'Sandoker', 'Sandset', 'Sandvika', 'Saudarkrokur', 'Selfoss', 'Selsoya', 'Sennesvik', 'Setso', 'Siglufjordur', 'Silvalen', 'Skagastrond', 'Skjerstad', 'Skonland', 'Skorvogen', 'Skrova', 'Sleneset', 'Snubba', 'Softing', 'Solheim', 'Solheimar', 'Sorarnoy', 'Sorfugloy', 'Sorland', 'Sormela', 'Sorvaer', 'Sovika', 'Stamsund', 'Stamsvika', 'Stave', 'Stokka', 'Stokkseyri', 'Storjord', 'Storo', 'Storvika', 'Strand', 'Straumen', 'Strendene', 'Sudavik', 'Sudureyri', 'Sundoya', 'Sydalen', 'Thingeyri', 'Thorlakshofn', 'Thorshofn', 'Tjarnabyggd', 'Tjotta', 'Tosbotn', 'Traelnes', 'Trofors', 'Trones', 'Tverro', 'Ulvsvog', 'Unnstad', 'Utskor', 'Valla', 'Vandved', 'Varmahlid', 'Vassos', 'Vevelstad', 'Vidrek', 'Vik', 'Vikholmen', 'Vogar', 'Vogehamn', 'Vopnafjordur'],\n      ['Abdera', 'Abila', 'Abydos', 'Acanthus', 'Acharnae', 'Actium', 'Adramyttium', 'Aegae', 'Aegina', 'Aegium', 'Aenus', 'Agrinion', 'Aigosthena', 'Akragas', 'Akrai', 'Akrillai', 'Akroinon', 'Akrotiri', 'Alalia', 'Alexandreia', 'Alexandretta', 'Alexandria', 'Alinda', 'Amarynthos', 'Amaseia', 'Ambracia', 'Amida', 'Amisos', 'Amnisos', 'Amphicaea', 'Amphigeneia', 'Amphipolis', 'Amphissa', 'Ankon', 'Antigona', 'Antipatrea', 'Antioch', 'Antioch', 'Antiochia', 'Andros', 'Apamea', 'Aphidnae', 'Apollonia', 'Argos', 'Arsuf', 'Artanes', 'Artemita', 'Argyroupoli', 'Asine', 'Asklepios', 'Aspendos', 'Assus', 'Astacus', 'Athenai', 'Athmonia', 'Aytos', 'Ancient', 'Baris', 'Bhrytos', 'Borysthenes', 'Berge', 'Boura', 'Bouthroton', 'Brauron', 'Byblos', 'Byllis', 'Byzantium', 'Bythinion', 'Callipolis', 'Cebrene', 'Chalcedon', 'Calydon', 'Carystus', 'Chamaizi', 'Chalcis', 'Chersonesos', 'Chios', 'Chytri', 'Clazomenae', 'Cleonae', 'Cnidus', 'Colosse', 'Corcyra', 'Croton', 'Cyme', 'Cyrene', 'Cythera', 'Decelea', 'Delos', 'Delphi', 'Demetrias', 'Dicaearchia', 'Dimale', 'Didyma', 'Dion', 'Dioscurias', 'Dodona', 'Dorylaion', 'Dyme', 'Edessa', 'Elateia', 'Eleusis', 'Eleutherna', 'Emporion', 'Ephesus', 'Ephyra', 'Epidamnos', 'Epidauros', 'Eresos', 'Eretria', 'Erythrae', 'Eubea', 'Gangra', 'Gaza', 'Gela', 'Golgi', 'Gonnos', 'Gorgippia', 'Gournia', 'Gortyn', 'Gythium', 'Hagios', 'Hagia', 'Halicarnassus', 'Halieis', 'Helike', 'Heliopolis', 'Hellespontos', 'Helorus', 'Hemeroskopeion', 'Heraclea', 'Hermione', 'Hermonassa', 'Hierapetra', 'Hierapolis', 'Himera', 'Histria', 'Hubla', 'Hyele', 'Ialysos', 'Iasus', 'Idalium', 'Imbros', 'Iolcus', 'Itanos', 'Ithaca', 'Juktas', 'Kallipolis', 'Kamares', 'Kameiros', 'Kannia', 'Kamarina', 'Kasmenai', 'Katane', 'Kerkinitida', 'Kepoi', 'Kimmerikon', 'Kios', 'Klazomenai', 'Knidos', 'Knossos', 'Korinthos', 'Kos', 'Kourion', 'Kume', 'Kydonia', 'Kynos', 'Kyrenia', 'Lamia', 'Lampsacus', 'Laodicea', 'Lapithos', 'Larissa', 'Lato', 'Laus', 'Lebena', 'Lefkada', 'Lekhaion', 'Leibethra', 'Leontinoi', 'Lepreum', 'Lessa', 'Lilaea', 'Lindus', 'Lissus', 'Epizephyrian', 'Madytos', 'Magnesia', 'Mallia', 'Mantineia', 'Marathon', 'Marmara', 'Maroneia', 'Masis', 'Massalia', 'Megalopolis', 'Megara', 'Mesembria', 'Messene', 'Metapontum', 'Methana', 'Methone', 'Methumna', 'Miletos', 'Misenum', 'Mochlos', 'Monastiraki', 'Morgantina', 'Mulai', 'Mukenai', 'Mylasa', 'Myndus', 'Myonia', 'Myra', 'Myrmekion', 'Mutilene', 'Myos', 'Nauplios', 'Naucratis', 'Naupactus', 'Naxos', 'Neapoli', 'Neapolis', 'Nemea', 'Nicaea', 'Nicopolis', 'Nirou', 'Nymphaion', 'Nysa', 'Oenoe', 'Oenus', 'Odessos', 'Olbia', 'Olous', 'Olympia', 'Olynthus', 'Opus', 'Orchomenus', 'Oricos', 'Orestias', 'Oreus', 'Oropus', 'Onchesmos', 'Pactye', 'Pagasae', 'Palaikastro', 'Pandosia', 'Panticapaeum', 'Paphos', 'Parium', 'Paros', 'Parthenope', 'Patrae', 'Pavlopetri', 'Pegai', 'Pelion', 'Peiraieús', 'Pella', 'Percote', 'Pergamum', 'Petsofa', 'Phaistos', 'Phaleron', 'Phanagoria', 'Pharae', 'Pharnacia', 'Pharos', 'Phaselis', 'Philippi', 'Pithekussa', 'Philippopolis', 'Platanos', 'Phlius', 'Pherae', 'Phocaea', 'Pinara', 'Pisa', 'Pitane', 'Pitiunt', 'Pixous', 'Plataea', 'Poseidonia', 'Potidaea', 'Priapus', 'Priene', 'Prousa', 'Pseira', 'Psychro', 'Pteleum', 'Pydna', 'Pylos', 'Pyrgos', 'Rhamnus', 'Rhegion', 'Rhithymna', 'Rhodes', 'Rhypes', 'Rizinia', 'Salamis', 'Same', 'Samos', 'Scyllaeum', 'Selinus', 'Seleucia', 'Semasus', 'Sestos', 'Scidrus', 'Sicyon', 'Side', 'Sidon', 'Siteia', 'Sinope', 'Siris', 'Sklavokampos', 'Smyrna', 'Soli', 'Sozopolis', 'Sparta', 'Stagirus', 'Stratos', 'Stymphalos', 'Sybaris', 'Surakousai', 'Taras', 'Tanagra', 'Tanais', 'Tauromenion', 'Tegea', 'Temnos', 'Tenedos', 'Tenea', 'Teos', 'Thapsos', 'Thassos', 'Thebai', 'Theodosia', 'Therma', 'Thespiae', 'Thronion', 'Thoricus', 'Thurii', 'Thyreum', 'Thyria', 'Tiruns', 'Tithoraea', 'Tomis', 'Tragurion', 'Trapeze', 'Trapezus', 'Tripolis', 'Troizen', 'Troliton', 'Troy', 'Tylissos', 'Tyras', 'Tyros', 'Tyritake', 'Vasiliki', 'Vathypetros', 'Zakynthos', 'Zakros', 'Zankle'],\n      ['Abila', 'Adflexum', 'Adnicrem', 'Aelia', 'Aelius', 'Aeminium', 'Aequum', 'Agrippina', 'Agrippinae', 'Ala', 'Albanianis', 'Ambianum', 'Andautonia', 'Apulum', 'Aquae', 'Aquaegranni', 'Aquensis', 'Aquileia', 'Aquincum', 'Arae', 'Argentoratum', 'Ariminum', 'Ascrivium', 'Atrebatum', 'Atuatuca', 'Augusta', 'Aurelia', 'Aurelianorum', 'Batavar', 'Batavorum', 'Belum', 'Biriciana', 'Blestium', 'Bonames', 'Bonna', 'Bononia', 'Borbetomagus', 'Bovium', 'Bracara', 'Brigantium', 'Burgodunum', 'Caesaraugusta', 'Caesarea', 'Caesaromagus', 'Calleva', 'Camulodunum', 'Cannstatt', 'Cantiacorum', 'Capitolina', 'Castellum', 'Castra', 'Castrum', 'Cibalae', 'Clausentum', 'Colonia', 'Concangis', 'Condate', 'Confluentes', 'Conimbriga', 'Corduba', 'Coria', 'Corieltauvorum', 'Corinium', 'Coriovallum', 'Cornoviorum', 'Danum', 'Deva', 'Divodurum', 'Dobunnorum', 'Drusi', 'Dubris', 'Dumnoniorum', 'Durnovaria', 'Durocobrivis', 'Durocornovium', 'Duroliponte', 'Durovernum', 'Durovigutum', 'Eboracum', 'Edetanorum', 'Emerita', 'Emona', 'Euracini', 'Faventia', 'Flaviae', 'Florentia', 'Forum', 'Gerulata', 'Gerunda', 'Glevensium', 'Hadriani', 'Herculanea', 'Isca', 'Italica', 'Iulia', 'Iuliobrigensium', 'Iuvavum', 'Lactodurum', 'Lagentium', 'Lauri', 'Legionis', 'Lemanis', 'Lentia', 'Lepidi', 'Letocetum', 'Lindinis', 'Lindum', 'Londinium', 'Lopodunum', 'Lousonna', 'Lucus', 'Lugdunum', 'Luguvalium', 'Lutetia', 'Mancunium', 'Marsonia', 'Martius', 'Massa', 'Matilo', 'Mattiacorum', 'Mediolanum', 'Mod', 'Mogontiacum', 'Moridunum', 'Mursa', 'Naissus', 'Nervia', 'Nida', 'Nigrum', 'Novaesium', 'Noviomagus', 'Olicana', 'Ovilava', 'Parisiorum', 'Partiscum', 'Paterna', 'Pistoria', 'Placentia', 'Pollentia', 'Pomaria', 'Pons', 'Portus', 'Praetoria', 'Praetorium', 'Pullum', 'Ragusium', 'Ratae', 'Raurica', 'Regina', 'Regium', 'Regulbium', 'Rigomagus', 'Roma', 'Romula', 'Rutupiae', 'Salassorum', 'Salernum', 'Salona', 'Scalabis', 'Segovia', 'Silurum', 'Sirmium', 'Siscia', 'Sorviodurum', 'Sumelocenna', 'Tarraco', 'Taurinorum', 'Theranda', 'Traiectum', 'Treverorum', 'Tungrorum', 'Turicum', 'Ulpia', 'Valentia', 'Venetiae', 'Venta', 'Verulamium', 'Vesontio', 'Vetera', 'Victoriae', 'Victrix', 'Villa', 'Viminacium', 'Vindelicorum', 'Vindobona', 'Vinovia', 'Viroconium'],\n      ['Aanekoski', 'Abjapaluoja', 'Ahlainen', 'Aholanvaara', 'Ahtari', 'Aijala', 'Aimala', 'Akaa', 'Alajarvi', 'Alatornio', 'Alavus', 'Antsla', 'Aspo', 'Bennas', 'Bjorkoby', 'Elva', 'Emasalo', 'Espoo', 'Esse', 'Evitskog', 'Forssa', 'Haapajarvi', 'Haapamaki', 'Haapavesi', 'Haapsalu', 'Haavisto', 'Hameenlinna', 'Hameenmaki', 'Hamina', 'Hanko', 'Harjavalta', 'Hattuvaara', 'Haukipudas', 'Hautajarvi', 'Havumaki', 'Heinola', 'Hetta', 'Hinkabole', 'Hirmula', 'Hossa', 'Huittinen', 'Husula', 'Hyryla', 'Hyvinkaa', 'Iisalmi', 'Ikaalinen', 'Ilmola', 'Imatra', 'Inari', 'Iskmo', 'Itakoski', 'Jamsa', 'Jarvenpaa', 'Jeppo', 'Jioesuu', 'Jiogeva', 'Joensuu', 'Jokela', 'Jokikyla', 'Jokisuu', 'Jormua', 'Juankoski', 'Jungsund', 'Jyvaskyla', 'Kaamasmukka', 'Kaarina', 'Kajaani', 'Kalajoki', 'Kallaste', 'Kankaanpaa', 'Kannus', 'Kardla', 'Karesuvanto', 'Karigasniemi', 'Karkkila', 'Karkku', 'Karksinuia', 'Karpankyla', 'Kaskinen', 'Kasnas', 'Kauhajoki', 'Kauhava', 'Kauniainen', 'Kauvatsa', 'Kehra', 'Keila', 'Kellokoski', 'Kelottijarvi', 'Kemi', 'Kemijarvi', 'Kerava', 'Keuruu', 'Kiikka', 'Kiipu', 'Kilinginiomme', 'Kiljava', 'Kilpisjarvi', 'Kitee', 'Kiuruvesi', 'Kivesjarvi', 'Kiviioli', 'Kivisuo', 'Klaukkala', 'Klovskog', 'Kohtlajarve', 'Kokemaki', 'Kokkola', 'Kolho', 'Koria', 'Koskue', 'Kotka', 'Kouva', 'Kouvola', 'Kristiina', 'Kaupunki', 'Kuhmo', 'Kunda', 'Kuopio', 'Kuressaare', 'Kurikka', 'Kusans', 'Kuusamo', 'Kylmalankyla', 'Lahti', 'Laitila', 'Lankipohja', 'Lansikyla', 'Lappeenranta', 'Lapua', 'Laurila', 'Lautiosaari', 'Lepsama', 'Liedakkala', 'Lieksa', 'Lihula', 'Littoinen', 'Lohja', 'Loimaa', 'Loksa', 'Loviisa', 'Luohuanylipaa', 'Lusi', 'Maardu', 'Maarianhamina', 'Malmi', 'Mantta', 'Masaby', 'Masala', 'Matasvaara', 'Maula', 'Miiluranta', 'Mikkeli', 'Mioisakula', 'Munapirtti', 'Mustvee', 'Muurahainen', 'Naantali', 'Nappa', 'Narpio', 'Nickby', 'Niinimaa', 'Niinisalo', 'Nikkila', 'Nilsia', 'Nivala', 'Nokia', 'Nummela', 'Nuorgam', 'Nurmes', 'Nuvvus', 'Obbnas', 'Oitti', 'Ojakkala', 'Ollola', 'onningeby', 'Orimattila', 'Orivesi', 'Otanmaki', 'Otava', 'Otepaa', 'Oulainen', 'Oulu', 'Outokumpu', 'Paavola', 'Paide', 'Paimio', 'Pakankyla', 'Paldiski', 'Parainen', 'Parkano', 'Parkumaki', 'Parola', 'Perttula', 'Pieksamaki', 'Pietarsaari', 'Pioltsamaa', 'Piolva', 'Pohjavaara', 'Porhola', 'Pori', 'Porrasa', 'Porvoo', 'Pudasjarvi', 'Purmo', 'Pussi', 'Pyhajarvi', 'Raahe', 'Raasepori', 'Raisio', 'Rajamaki', 'Rakvere', 'Rapina', 'Rapla', 'Rauma', 'Rautio', 'Reposaari', 'Riihimaki', 'Rovaniemi', 'Roykka', 'Ruonala', 'Ruottala', 'Rutalahti', 'Saarijarvi', 'Salo', 'Sastamala', 'Saue', 'Savonlinna', 'Seinajoki', 'Sillamae', 'Sindi', 'Siuntio', 'Somero', 'Sompujarvi', 'Suonenjoki', 'Suurejaani', 'Syrjantaka', 'Tampere', 'Tamsalu', 'Tapa', 'Temmes', 'Tiorva', 'Tormasenvaara', 'Tornio', 'Tottijarvi', 'Tulppio', 'Turenki', 'Turi', 'Tuukkala', 'Tuurala', 'Tuuri', 'Tuuski', 'Ulvila', 'Unari', 'Upinniemi', 'Utti', 'Uusikaarlepyy', 'Uusikaupunki', 'Vaaksy', 'Vaalimaa', 'Vaarinmaja', 'Vaasa', 'Vainikkala', 'Valga', 'Valkeakoski', 'Vantaa', 'Varkaus', 'Vehkapera', 'Vehmasmaki', 'Vieki', 'Vierumaki', 'Viitasaari', 'Viljandi', 'Vilppula', 'Viohma', 'Vioru', 'Virrat', 'Ylike', 'Ylivieska', 'Ylojarvi'],\n      ['Sabi', 'Wiryeseong', 'Hwando', 'Gungnae', 'Ungjin', 'Wanggeomseong', 'Ganggyeong', 'Jochiwon', 'Cheorwon', 'Beolgyo', 'Gangjin', 'Gampo', 'Yecheon', 'Geochang', 'Janghang', 'Hadong', 'Goseong', 'Yeongdong', 'Yesan', 'Sintaein', 'Geumsan', 'Boseong', 'Jangheung', 'Uiseong', 'Jumunjin', 'Janghowon', 'Hongseong', 'Gimhwa', 'Gwangcheon', 'Guryongpo', 'Jinyeong', 'Buan', 'Damyang', 'Jangseong', 'Wando', 'Angang', 'Okcheon', 'Jeungpyeong', 'Waegwan', 'Cheongdo', 'Gwangyang', 'Gochang', 'Haenam', 'Yeonggwang', 'Hanam', 'Eumseong', 'Daejeong', 'Hanrim', 'Samrye', 'Yongjin', 'Hamyang', 'Buyeo', 'Changnyeong', 'Yeongwol', 'Yeonmu', 'Gurye', 'Hwasun', 'Hampyeong', 'Namji', 'Samnangjin', 'Dogye', 'Hongcheon', 'Munsan', 'Gapyeong', 'Ganghwa', 'Geojin', 'Sangdong', 'Jeongseon', 'Sabuk', 'Seonghwan', 'Heunghae', 'Hapdeok', 'Sapgyo', 'Taean', 'Boeun', 'Geumwang', 'Jincheon', 'Bongdong', 'Doyang', 'Geoncheon', 'Pungsan', 'Punggi', 'Geumho', 'Wonju', 'Gaun', 'Hayang', 'Yeoju', 'Paengseong', 'Yeoncheon', 'Yangpyeong', 'Ganseong', 'Yanggu', 'Yangyang', 'Inje', 'Galmal', 'Pyeongchang', 'Hwacheon', 'Hoengseong', 'Seocheon', 'Cheongyang', 'Goesan', 'Danyang', 'Hamyeol', 'Muju', 'Sunchang', 'Imsil', 'Jangsu', 'Jinan', 'Goheung', 'Gokseong', 'Muan', 'Yeongam', 'Jindo', 'Seonsan', 'Daegaya', 'Gunwi', 'Bonghwa', 'Seongju', 'Yeongdeok', 'Yeongyang', 'Ulleung', 'Uljin', 'Cheongsong', 'wayang', 'Namhae', 'Sancheong', 'Uiryeong', 'Gaya', 'Hapcheon', 'Wabu', 'Dongsong', 'Sindong', 'Wondeok', 'Maepo', 'Anmyeon', 'Okgu', 'Sariwon', 'Dolsan', 'Daedeok', 'Gwansan', 'Geumil', 'Nohwa', 'Baeksu', 'Illo', 'Jido', 'Oedong', 'Ocheon', 'Yeonil', 'Hamchang', 'Pyeonghae', 'Gijang', 'Jeonggwan', 'Aewor', 'Gujwa', 'Seongsan', 'Jeongok', 'Seonggeo', 'Seungju', 'Hongnong', 'Jangan', 'Jocheon', 'Gohan', 'Jinjeop', 'Bubal', 'Beobwon', 'Yeomchi', 'Hwado', 'Daesan', 'Hwawon', 'Apo', 'Nampyeong', 'Munsan', 'Sinbuk', 'Munmak', 'Judeok', 'Bongyang', 'Ungcheon', 'Yugu', 'Unbong', 'Mangyeong', 'Dong', 'Naeseo', 'Sanyang', 'Soheul', 'Onsan', 'Eonyang', 'Nongong', 'Dasa', 'Goa', 'Jillyang', 'Bongdam', 'Naesu', 'Beomseo', 'Opo', 'Gongdo', 'Jingeon', 'Onam', 'Baekseok', 'Jiksan', 'Mokcheon', 'Jori', 'Anjung', 'Samho', 'Ujeong', 'Buksam', 'Tongjin', 'Chowol', 'Gonjiam', 'Pogok', 'Seokjeok', 'Poseung', 'Ochang', 'Hyangnam', 'Baebang', 'Gochon', 'Songak', 'Samhyang', 'Yangchon', 'Osong', 'Aphae', 'Ganam', 'Namyang', 'Chirwon', 'Andong', 'Ansan', 'Anseong', 'Anyang', 'Asan', 'Boryeong', 'Bucheon', 'Busan', 'Changwon', 'Cheonan', 'Cheongju', 'Chuncheon', 'Chungju', 'Daegu', 'Daejeon', 'Dangjin', 'Dongducheon', 'Donghae', 'Gangneung', 'Geoje', 'Gimcheon', 'Gimhae', 'Gimje', 'Gimpo', 'Gongju', 'Goyang', 'Gumi', 'Gunpo', 'Gunsan', 'Guri', 'Gwacheon', 'Gwangju', 'Gwangju', 'Gwangmyeong', 'Gyeongju', 'Gyeongsan', 'Gyeryong', 'Hwaseong', 'Icheon', 'Iksan', 'Incheon', 'Jecheon', 'Jeongeup', 'Jeonju', 'Jeju', 'Jinju', 'Naju', 'Namyangju', 'Namwon', 'Nonsan', 'Miryang', 'Mokpo', 'Mungyeong', 'Osan', 'Paju', 'Pocheon', 'Pohang', 'Pyeongtaek', 'Sacheon', 'Sangju', 'Samcheok', 'Sejong', 'Seogwipo', 'Seongnam', 'Seosan', 'Seoul', 'Siheung', 'Sokcho', 'Suncheon', 'Suwon', 'Taebaek', 'Tongyeong', 'Uijeongbu', 'Uiwang', 'Ulsan', 'Yangju', 'Yangsan', 'Yeongcheon', 'Yeongju', 'Yeosu', 'Yongin', 'Chungmu', 'Daecheon', 'Donggwangyang', 'Geumseong', 'Gyeongseong', 'Iri', 'Jangseungpo', 'Jeomchon', 'Jeongju', 'Migeum', 'Onyang', 'Samcheonpo', 'Busan', 'Busan', 'Cheongju', 'Chuncheon', 'Daegu', 'Daegu', 'Daejeon', 'Daejeon', 'Gunsan', 'Gwangju', 'Gwangju', 'Gyeongseong', 'Incheon', 'Incheon', 'Iri', 'Jeonju', 'Jinhae', 'Jinju', 'Masan', 'Masan', 'Mokpo', 'Songjeong', 'Songtan', 'Ulsan', 'Yeocheon', 'Cheongjin', 'Gaeseong', 'Haeju', 'Hamheung', 'Heungnam', 'Jinnampo', 'Najin', 'Pyeongyang', 'Seongjin', 'Sineuiju', 'Songnim', 'Wonsan'],\n      ['Anding', 'Anlu', 'Anqing', 'Anshun', 'Baan', 'Baixing', 'Banyang', 'Baoding', 'Baoqing', 'Binzhou', 'Caozhou', 'Changbai', 'Changchun', 'Changde', 'Changling', 'Changsha', 'Changtu', 'Changzhou', 'Chaozhou', 'Cheli', 'Chengde', 'Chengdu', 'Chenzhou', 'Chizhou', 'Chongqing', 'Chuxiong', 'Chuzhou', 'Dading', 'Dali', 'Daming', 'Datong', 'Daxing', 'Dean', 'Dengke', 'Dengzhou', 'Deqing', 'Dexing', 'Dihua', 'Dingli', 'Dongan', 'Dongchang', 'Dongchuan', 'Dongping', 'Duyun', 'Fengtian', 'Fengxiang', 'Fengyang', 'Fenzhou', 'Funing', 'Fuzhou', 'Ganzhou', 'Gaoyao', 'Gaozhou', 'Gongchang', 'Guangnan', 'Guangning', 'Guangping', 'Guangxin', 'Guangzhou', 'Guide', 'Guilin', 'Guiyang', 'Hailong', 'Hailun', 'Hangzhou', 'Hanyang', 'Hanzhong', 'Heihe', 'Hejian', 'Henan', 'Hengzhou', 'Hezhong', 'Huaian', 'Huaide', 'Huaiqing', 'Huanglong', 'Huangzhou', 'Huining', 'Huizhou', 'Hulan', 'Huzhou', 'Jiading', 'Jian', 'Jianchang', 'Jiande', 'Jiangning', 'Jiankang', 'Jianning', 'Jiaxing', 'Jiayang', 'Jilin', 'Jinan', 'Jingjiang', 'Jingzhao', 'Jingzhou', 'Jinhua', 'Jinzhou', 'Jiujiang', 'Kaifeng', 'Kaihua', 'Kangding', 'Kuizhou', 'Laizhou', 'Lanzhou', 'Leizhou', 'Liangzhou', 'Lianzhou', 'Liaoyang', 'Lijiang', 'Linan', 'Linhuang', 'Linjiang', 'Lintao', 'Liping', 'Liuzhou', 'Longan', 'Longjiang', 'Longqing', 'Longxing', 'Luan', 'Lubin', 'Lubin', 'Luzhou', 'Mishan', 'Nanan', 'Nanchang', 'Nandian', 'Nankang', 'Nanning', 'Nanyang', 'Nenjiang', 'Ningan', 'Ningbo', 'Ningguo', 'Ninguo', 'Ningwu', 'Ningxia', 'Ningyuan', 'Pingjiang', 'Pingle', 'Pingliang', 'Pingyang', 'Puer', 'Puzhou', 'Qianzhou', 'Qingyang', 'Qingyuan', 'Qingzhou', 'Qiongzhou', 'Qujing', 'Quzhou', 'Raozhou', 'Rende', 'Ruian', 'Ruizhou', 'Runing', 'Shafeng', 'Shajing', 'Shaoqing', 'Shaowu', 'Shaoxing', 'Shaozhou', 'Shinan', 'Shiqian', 'Shouchun', 'Shuangcheng', 'Shulei', 'Shunde', 'Shunqing', 'Shuntian', 'Shuoping', 'Sicheng', 'Sien', 'Sinan', 'Sizhou', 'Songjiang', 'Suiding', 'Suihua', 'Suining', 'Suzhou', 'Taian', 'Taibei', 'Tainan', 'Taiping', 'Taiwan', 'Taiyuan', 'Taizhou', 'Taonan', 'Tengchong', 'Tieli', 'Tingzhou', 'Tongchuan', 'Tongqing', 'Tongren', 'Tongzhou', 'Weihui', 'Wensu', 'Wenzhou', 'Wuchang', 'Wuding', 'Wuzhou', 'Xian', 'Xianchun', 'Xianping', 'Xijin', 'Xiliang', 'Xincheng', 'Xingan', 'Xingde', 'Xinghua', 'Xingjing', 'Xingqing', 'Xingyi', 'Xingyuan', 'Xingzhong', 'Xining', 'Xinmen', 'Xiping', 'Xuanhua', 'Xunzhou', 'Xuzhou', 'Yanan', 'Yangzhou', 'Yanji', 'Yanping', 'Yanqi', 'Yanzhou', 'Yazhou', 'Yichang', 'Yidu', 'Yilan', 'Yili', 'Yingchang', 'Yingde', 'Yingtian', 'Yingzhou', 'Yizhou', 'Yongchang', 'Yongping', 'Yongshun', 'Yongzhou', 'Yuanzhou', 'Yuezhou', 'Yulin', 'Yunnan', 'Yunyang', 'Zezhou', 'Zhangde', 'Zhangzhou', 'Zhaoqing', 'Zhaotong', 'Zhenan', 'Zhending', 'Zhengding', 'Zhenhai', 'Zhenjiang', 'Zhenxi', 'Zhenyun', 'Zhongshan', 'Zunyi'],\n      ['Nanporo', 'Naie', 'Kamisunagawa', 'Yuni', 'Naganuma', 'Kuriyama', 'Tsukigata', 'Urausu', 'Shintotsukawa', 'Moseushi', 'Chippubetsu', 'Uryu', 'Hokuryu', 'Numata', 'Tobetsu', 'Suttsu', 'Kuromatsunai', 'Rankoshi', 'Niseko', 'Kimobetsu', 'Kyogoku', 'Kutchan', 'Kyowa', 'Iwanai', 'Shakotan', 'Furubira', 'Niki', 'Yoichi', 'Toyoura', 'Toyako', 'Sobetsu', 'Shiraoi', 'Atsuma', 'Abira', 'Mukawa', 'Hidaka', 'Biratori', 'Niikappu', 'Urakawa', 'Samani', 'Erimo', 'Shinhidaka', 'Matsumae', 'Fukushima', 'Shiriuchi', 'Kikonai', 'Nanae', 'Shikabe', 'Mori', 'Yakumo', 'Oshamambe', 'Esashi', 'Kaminokuni', 'Assabu', 'Otobe', 'Okushiri', 'Imakane', 'Setana', 'Takasu', 'Higashikagura', 'Toma', 'Pippu', 'Aibetsu', 'Kamikawa', 'Higashikawa', 'Biei', 'Kamifurano', 'Nakafurano', 'Minamifurano', 'Horokanai', 'Wassamu', 'Kenbuchi', 'Shimokawa', 'Bifuka', 'Nakagawa', 'Mashike', 'Obira', 'Tomamae', 'Haboro', 'Enbetsu', 'Teshio', 'Hamatonbetsu', 'Nakatonbetsu', 'Esashi', 'Toyotomi', 'Horonobe', 'Rebun', 'Rishiri', 'Rishirifuji', 'Bihoro', 'Tsubetsu', 'Ozora', 'Shari', 'Kiyosato', 'Koshimizu', 'Kunneppu', 'Oketo', 'Saroma', 'Engaru', 'Yubetsu', 'Takinoue', 'Okoppe', 'Omu', 'Otofuke', 'Shihoro', 'Kamishihoro', 'Shikaoi', 'Shintoku', 'Shimizu', 'Memuro', 'Taiki', 'Hiroo', 'Makubetsu', 'Ikeda', 'Toyokoro', 'Honbetsu', 'Ashoro', 'Rikubetsu', 'Urahoro', 'Kushiro', 'Akkeshi', 'Hamanaka', 'Shibecha', 'Teshikaga', 'Shiranuka', 'Betsukai', 'Nakashibetsu', 'Shibetsu', 'Rausu', 'Hiranai', 'Imabetsu', 'Sotogahama', 'Ajigasawa', 'Fukaura', 'Fujisaki', 'Owani', 'Itayanagi', 'Tsuruta', 'Nakadomari', 'Noheji', 'Shichinohe', 'Rokunohe', 'Yokohama', 'Tohoku', 'Oirase', 'Oma', 'Sannohe', 'Gonohe', 'Takko', 'Nanbu', 'Hashikami', 'Shizukuishi', 'Kuzumaki', 'Iwate', 'Shiwa', 'Yahaba', 'Nishiwaga', 'Kanegasaki', 'Hiraizumi', 'Sumita', 'Otsuchi', 'Yamada', 'Iwaizumi', 'Karumai', 'Hirono', 'Ichinohe', 'Zao', 'Shichikashuku', 'Ogawara', 'Murata', 'Shibata', 'Kawasaki', 'Marumori', 'Watari', 'Yamamoto', 'Matsushima', 'Shichigahama', 'Rifu', 'Taiwa', 'Osato', 'Shikama', 'Kami', 'Wakuya', 'Misato', 'Onagawa', 'Minamisanriku', 'Kosaka', 'Fujisato', 'Mitane', 'Happo', 'Gojome', 'Hachirogata', 'Ikawa', 'Misato', 'Ugo', 'Yamanobe', 'Nakayama', 'Kahoku', 'Nishikawa', 'Asahi', 'Oe', 'Oishida', 'Kaneyama', 'Mogami', 'Funagata', 'Mamurogawa', 'Takahata', 'Kawanishi', 'Oguni', 'Shirataka', 'Iide', 'Mikawa', 'Shonai', 'Yuza', 'Koori', 'Kunimi', 'Kawamata', 'Kagamiishi', 'Shimogo', 'Tadami', 'Minamiaizu', 'Nishiaizu', 'Bandai', 'Inawashiro', 'Aizubange', 'Yanaizu', 'Mishima', 'Kaneyama', 'Aizumisato', 'Yabuki', 'Tanagura', 'Yamatsuri', 'Hanawa', 'Ishikawa', 'Asakawa', 'Furudono', 'Miharu', 'Ono', 'Hirono', 'Naraha', 'Tomioka', 'Okuma', 'Futaba', 'Namie', 'Shinchi', 'Ibaraki', 'Oarai', 'Shirosato', 'Daigo', 'Ami', 'Kawachi', 'Yachiyo', 'Goka', 'Sakai', 'Tone', 'Kaminokawa', 'Mashiko', 'Motegi', 'Ichikai', 'Haga', 'Mibu', 'Nogi', 'Shioya', 'Takanezawa', 'Nasu', 'Nakagawa', 'Yoshioka', 'Kanna', 'Shimonita', 'Kanra', 'Nakanojo', 'Naganohara', 'Kusatsu', 'Higashiagatsuma', 'Minakami', 'Tamamura', 'Itakura', 'Meiwa', 'Chiyoda', 'Oizumi', 'Ora', 'Ina', 'Miyoshi', 'Moroyama', 'Ogose', 'Namegawa', 'Ranzan', 'Ogawa', 'Kawajima', 'Yoshimi', 'Hatoyama', 'Tokigawa', 'Yokoze', 'Minano', 'Nagatoro', 'Ogano', 'Misato', 'Kamikawa', 'Kamisato', 'Yorii', 'Miyashiro', 'Sugito', 'Matsubushi', 'Shisui', 'Sakae', 'Kozaki', 'Tako', 'Tonosho', 'Kujukuri', 'Shibayama', 'Yokoshibahikari', 'Ichinomiya', 'Mutsuzawa', 'Shirako', 'Nagara', 'Chonan', 'Otaki', 'Onjuku', 'Kyonan', 'Mizuho', 'Hinode', 'Okutama', 'Oshima', 'Hachijo', 'Aikawa', 'Hayama', 'Samukawa', 'Oiso', 'Ninomiya', 'Nakai', 'Oi', 'Matsuda', 'Yamakita', 'Kaisei', 'Hakone', 'Manazuru', 'Yugawara', 'Seiro', 'Tagami', 'Aga', 'Izumozaki', 'Yuzawa', 'Tsunan', 'Kamiichi', 'Tateyama', 'Nyuzen', 'Asahi', 'Kawakita', 'Tsubata', 'Uchinada', 'Shika', 'Hodatsushimizu', 'Nakanoto', 'Anamizu', 'Noto', 'Eiheiji', 'Ikeda', 'Minamiechizen', 'Echizen', 'Mihama', 'Takahama', 'Oi', 'Wakasa', 'Ichikawamisato', 'Hayakawa', 'Minobu', 'Nanbu', 'Fujikawa', 'Showa', 'Nishikatsura', 'Fujikawaguchiko', 'Koumi', 'Sakuho', 'Karuizawa', 'Miyota', 'Tateshina', 'Nagawa', 'Shimosuwa', 'Fujimi', 'Tatsuno', 'Minowa', 'Iijima', 'Matsukawa', 'Takamori', 'Anan', 'Agematsu', 'Nagiso', 'Kiso', 'Ikeda', 'Sakaki', 'Obuse', 'Yamanouchi', 'Shinano', 'Iizuna', 'Ginan', 'Kasamatsu', 'Yoro', 'Tarui', 'Sekigahara', 'Godo', 'Wanouchi', 'Anpachi', 'Ibigawa', 'Ono', 'Ikeda', 'Kitagata', 'Sakahogi', 'Tomika', 'Kawabe', 'Hichiso', 'Yaotsu', 'Shirakawa', 'Mitake', 'Higashiizu', 'Kawazu', 'Minamiizu', 'Matsuzaki', 'Nishiizu', 'Kannami', 'Shimizu', 'Nagaizumi', 'Oyama', 'Yoshida', 'Kawanehon', 'Mori', 'Togo', 'Toyoyama', 'Oguchi', 'Fuso', 'Oharu', 'Kanie', 'Agui', 'Higashiura', 'Minamichita', 'Mihama', 'Taketoyo', 'Mihama', 'Kota', 'Shitara', 'Toei', 'Kisosaki', 'Toin', 'Komono', 'Asahi', 'Kawagoe', 'Taki', 'Meiwa', 'Odai', 'Tamaki', 'Watarai', 'Taiki', 'Minamiise', 'Kihoku', 'Mihama', 'Kiho', 'Hino', 'Ryuo', 'Aisho', 'Toyosato', 'Kora', 'Taga', 'Oyamazaki', 'Kumiyama', 'Ide', 'Ujitawara', 'Kasagi', 'Wazuka', 'Seika', 'Kyotamba', 'Ine', 'Yosano', 'Shimamoto', 'Toyono', 'Nose', 'Tadaoka', 'Kumatori', 'Tajiri', 'Misaki', 'Taishi', 'Kanan', 'Inagawa', 'Taka', 'Inami', 'Harima', 'Ichikawa', 'Fukusaki', 'Kamikawa', 'Taishi', 'Kamigori', 'Sayo', 'Kami', 'Shinonsen', 'Heguri', 'Sango', 'Ikaruga', 'Ando', 'Kawanishi', 'Miyake', 'Tawaramoto', 'Takatori', 'Kanmaki', 'Oji', 'Koryo', 'Kawai', 'Yoshino', 'Oyodo', 'Shimoichi', 'Kushimoto', 'Kimino', 'Katsuragi', 'Kudoyama', 'Koya', 'Yuasa', 'Hirogawa', 'Aridagawa', 'Mihama', 'Hidaka', 'Yura', 'Inami', 'Minabe', 'Hidakagawa', 'Shirahama', 'Kamitonda', 'Susami', 'Nachikatsuura', 'Taiji', 'Kozagawa', 'Iwami', 'Wakasa', 'Chizu', 'Yazu', 'Misasa', 'Yurihama', 'Kotoura', 'Hokuei', 'Daisen', 'Nanbu', 'Hoki', 'Nichinan', 'Hino', 'Kofu', 'Okuizumo', 'Iinan', 'Kawamoto', 'Misato', 'Onan', 'Tsuwano', 'Yoshika', 'Ama', 'Nishinoshima', 'Okinoshima', 'Wake', 'Hayashima', 'Satosho', 'Yakage', 'Kagamino', 'Shoo', 'Nagi', 'Kumenan', 'Misaki', 'Kibichuo', 'Fuchu', 'Kaita', 'Kumano', 'Saka', 'Kitahiroshima', 'Akiota', 'Osakikamijima', 'Sera', 'Jinsekikogen', 'Suooshima', 'Waki', 'Kaminoseki', 'Tabuse', 'Hirao', 'Abu', 'Katsuura', 'Kamikatsu', 'Ishii', 'Kamiyama', 'Naka', 'Mugi', 'Minami', 'Kaiyo', 'Matsushige', 'Kitajima', 'Aizumi', 'Itano', 'Kamiita', 'Tsurugi', 'Higashimiyoshi', 'Tonosho', 'Shodoshima', 'Miki', 'Naoshima', 'Utazu', 'Ayagawa', 'Kotohira', 'Tadotsu', 'Manno', 'Kamijima', 'Kumakogen', 'Masaki', 'Tobe', 'Uchiko', 'Ikata', 'Kihoku', 'Matsuno', 'Ainan', 'Toyo', 'Nahari', 'Tano', 'Yasuda', 'Motoyama', 'Otoyo', 'Tosa', 'Ino', 'Niyodogawa', 'Nakatosa', 'Sakawa', 'Ochi', 'Yusuhara', 'Tsuno', 'Shimanto', 'Otsuki', 'Kuroshio', 'Nakagawa', 'Umi', 'Sasaguri', 'Shime', 'Sue', 'Shingu', 'Hisayama', 'Kasuya', 'Ashiya', 'Mizumaki', 'Okagaki', 'Onga', 'Kotake', 'Kurate', 'Keisen', 'Chikuzen', 'Tachiarai', 'Oki', 'Hirokawa', 'Kawara', 'Soeda', 'Itoda', 'Kawasaki', 'Oto', 'Fukuchi', 'Kanda', 'Miyako', 'Yoshitomi', 'Koge', 'Chikujo', 'Yoshinogari', 'Kiyama', 'Kamimine', 'Miyaki', 'Genkai', 'Arita', 'Omachi', 'Kohoku', 'Shiroishi', 'Tara', 'Nagayo', 'Togitsu', 'Higashisonogi', 'Kawatana', 'Hasami', 'Ojika', 'Saza', 'Shinkamigoto', 'Misato', 'Gyokuto', 'Nankan', 'Nagasu', 'Nagomi', 'Ozu', 'Kikuyo', 'Minamioguni', 'Oguni', 'Takamori', 'Mifune', 'Kashima', 'Mashiki', 'Kosa', 'Yamato', 'Hikawa', 'Ashikita', 'Tsunagi', 'Nishiki', 'Taragi', 'Yunomae', 'Asagiri', 'Reihoku', 'Hiji', 'Kusu', 'Kokonoe', 'Mimata', 'Takaharu', 'Kunitomi', 'Aya', 'Takanabe', 'Shintomi', 'Kijo', 'Kawaminami', 'Tsuno', 'Kadogawa', 'Misato', 'Takachiho', 'Hinokage', 'Gokase', 'Satsuma', 'Nagashima', 'Yusui', 'Osaki', 'Higashikushira', 'Kinko', 'Minamiosumi', 'Kimotsuki', 'Nakatane', 'Minamitane', 'Yakushima', 'Setouchi', 'Tatsugo', 'Kikai', 'Tokunoshima', 'Amagi', 'Isen', 'Wadomari', 'China', 'Yoron', 'Motobu', 'Kin', 'Kadena', 'Chatan', 'Nishihara', 'Yonabaru', 'Haebaru', 'Kumejima', 'Yaese', 'Taketomi', 'Yonaguni']\n    ]\n  }\n\n  // randomize options if randomization is allowed in option\n  function randomizeOptions() {\n    const mod = _.round((graphWidth + graphHeight) / 1500, 2) // add mod for big screens\n    if (lockRegionsInput.getAttribute('data-locked') == 0) regionsInput.value =\n      regionsOutput.value = _.random(7, 17)\n    if (lockManorsInput.getAttribute('data-locked') == 0) {\n      const manors = regionsInput.value * 20 + _.random(180 * mod)\n      manorsInput.value = manorsOutput.innerHTML = manors\n    }\n    if (lockPowerInput.getAttribute('data-locked') == 0) powerInput.value =\n      powerOutput.value = _.random(2, 8)\n    if (lockNeutralInput.getAttribute('data-locked') == 0) neutralInput.value =\n      neutralOutput.value = _.random(100, 300)\n    if (lockNamesInput.getAttribute('data-locked') == 0) namesInput.value = _.random(0, 1)\n    if (lockCulturesInput.getAttribute('data-locked') == 0) culturesInput.value =\n      culturesOutput.value = _.random(5, 10)\n    if (lockPrecInput.getAttribute('data-locked') == 0) precInput.value =\n      precOutput.value = _.random(3, 12)\n    if (lockSwampinessInput.getAttribute('data-locked') == 0) swampinessInput.value =\n      swampinessOutput.value = _.random(100)\n  }\n\n  // Locate points to calculate Voronoi diagram\n  function placePoints() {\n    console.time('placePoints')\n    points = []\n    points = getJitteredGrid()\n    heights = new Uint8Array(points.length)\n    console.timeEnd('placePoints')\n  }\n\n  // Calculate Voronoi Diagram\n  function calculateVoronoi(points) {\n    console.time('calculateVoronoi')\n    diagram = voronoi(points)\n    // round edges to simplify future calculations\n    diagram.edges.forEach(function(e) {\n      e[0][0] = _.round(e[0][0], 2)\n      e[0][1] = _.round(e[0][1], 2)\n      e[1][0] = _.round(e[1][0], 2)\n      e[1][1] = _.round(e[1][1], 2)\n    })\n    polygons = diagram.polygons()\n    console.log(' cells: ' + points.length)\n    console.timeEnd('calculateVoronoi')\n  }\n\n  // move brush radius circle\n  function moveCircle(x, y, r, c) {\n    let circle = debug.selectAll('.circle')\n    if (!circle.size()) circle = debug.insert('circle', ':first-child').attr('class', 'circle')\n    circle.attr('cx', x).attr('cy', y)\n    if (r) circle.attr('r', r)\n    if (c) circle.attr('stroke', c)\n  }\n\n  // restore default drag (map panning) and cursor\n  function restoreDefaultEvents() {\n    viewbox.style('cursor', 'default').on('.drag', null).on('click', null)\n  }\n\n  // remove parent element (usually if child is clicked)\n  function removeParent() {\n    $(this.parentNode).remove()\n  }\n\n  // define selection based on radius\n  function defineBrushSelection(center, r) {\n    let radius = r\n    let selection = [center]\n    if (radius > 1) selection = selection.concat(cells[center].neighbors)\n    selection = $.grep(selection, function(e) {return cells[e].height >= 20})\n    if (radius === 2) return selection\n    let frontier = cells[center].neighbors\n    while (radius > 2) {\n      let cycle = frontier.slice()\n      frontier = []\n      cycle.map(function(s) {\n        cells[s].neighbors.forEach(function(e) {\n          if (selection.indexOf(e) !== -1) return\n          // if (cells[e].height < 20) return;\n          selection.push(e)\n          frontier.push(e)\n        })\n      })\n      radius--\n    }\n    selection = $.grep(selection, function(e) {return cells[e].height >= 20})\n    return selection\n  }\n\n  // Mouseclick events\n  function placeLinearFeature() {\n    const point = d3.mouse(this)\n    const index = getIndex(point)\n    let tag = debug.selectAll('.tag')\n    if (!tag.size()) {\n      tag = debug.append('circle').attr('data-cell', index).attr('class', 'tag')\n                 .attr('r', 3).attr('cx', point[0]).attr('cy', point[1])\n    } else {\n      const from = +tag.attr('data-cell')\n      debug.selectAll('.tag, .line').remove()\n      const power = +brushPower.value\n      const mod = $('#brushesButtons > .pressed').attr('id') === 'brushRange' ? 1 : -1\n      const selection = addRange(mod, power, from, index)\n      updateHeightmapSelection(selection)\n    }\n  }\n\n  // turn D3 polygons array into cell array, define neighbors for each cell\n  function detectNeighbors(withGrid) {\n    console.time('detectNeighbors')\n    let gridPath = '' // store grid as huge single path string\n    cells = []\n    polygons.map(function(i, d) {\n      const neighbors = []\n      let type // define cell type\n      if (withGrid) {gridPath += 'M' + i.join('L') + 'Z'} // grid path\n      diagram.cells[d].halfedges.forEach(function(e) {\n        const edge = diagram.edges[e]\n        if (edge.left && edge.right) {\n          const ea = edge.left.index === d ? edge.right.index : edge.left.index\n          neighbors.push(ea)\n        } else {\n          type = 'border' // polygon is on border if it has edge without opposite side polygon\n        }\n      })\n      cells.push({index: d, data: i.data, height: 0, type, neighbors})\n    })\n    if (withGrid) {grid.append('path').attr('d', round(gridPath, 1))}\n    console.timeEnd('detectNeighbors')\n  }\n\n  // Generate Heigtmap routine\n  function defineHeightmap() {\n    console.time('defineHeightmap')\n    if (lockTemplateInput.getAttribute('data-locked') == 0) {\n      const rnd = Math.random()\n      if (rnd > 0.95) {\n        templateInput.value = 'Volcano'\n      } else if (rnd > 0.75) {\n        templateInput.value = 'High Island'\n      } else if (rnd > 0.55) {\n        templateInput.value = 'Low Island'\n      } else if (rnd > 0.35) {\n        templateInput.value = 'Continents'\n      } else if (rnd > 0.15) {\n        templateInput.value = 'Archipelago'\n      } else if (rnd > 0.10) {\n        templateInput.value = 'Mainland'\n      } else if (rnd > 0.01) {templateInput.value = 'Peninsulas'} else {\n        templateInput.value = 'Atoll'\n      }\n    }\n    const mapTemplate = templateInput.value\n    if (mapTemplate === 'Volcano') templateVolcano()\n    if (mapTemplate === 'High Island') templateHighIsland()\n    if (mapTemplate === 'Low Island') templateLowIsland()\n    if (mapTemplate === 'Continents') templateContinents()\n    if (mapTemplate === 'Archipelago') templateArchipelago()\n    if (mapTemplate === 'Atoll') templateAtoll()\n    if (mapTemplate === 'Mainland') templateMainland()\n    if (mapTemplate === 'Peninsulas') templatePeninsulas()\n    console.log(' template: ' + mapTemplate)\n    console.timeEnd('defineHeightmap')\n  }\n\n  // Heighmap Template: Volcano\n  function templateVolcano(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addHill(5, 0.35)\n    addRange(3)\n    addRange(-4)\n  }\n\n// Heighmap Template: High Island\n  function templateHighIsland(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addRange(6)\n    addHill(12, 0.25)\n    addRange(-3)\n    modifyHeights('land', 0, 0.75)\n    addPit(1)\n    addHill(3, 0.15)\n  }\n\n// Heighmap Template: Low Island\n  function templateLowIsland(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    smoothHeights(2)\n    addRange(2)\n    addHill(4, 0.4)\n    addHill(12, 0.2)\n    addRange(-8)\n    modifyHeights('land', 0, 0.35)\n  }\n\n  // Heighmap Template: Continents\n  function templateContinents(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addHill(30, 0.25)\n    const count = Math.ceil(Math.random() * 4 + 4)\n    addStrait(count)\n    addPit(10)\n    addRange(-10)\n    modifyHeights('land', 0, 0.6)\n    smoothHeights(2)\n    addRange(3)\n  }\n\n  // Heighmap Template: Archipelago\n  function templateArchipelago(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addHill(12, 0.15)\n    addRange(8)\n    const count = Math.ceil(Math.random() * 2 + 2)\n    addStrait(count)\n    addRange(-15)\n    addPit(10)\n    modifyHeights('land', -5, 0.7)\n    smoothHeights(3)\n  }\n\n  // Heighmap Template: Atoll\n  function templateAtoll(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addHill(2, 0.35)\n    addRange(2)\n    smoothHeights(1)\n    modifyHeights('27-100', 0, 0.1)\n  }\n\n  // Heighmap Template: Mainland\n  function templateMainland(mod) {\n    addMountain()\n    modifyHeights('all', 10, 1)\n    addHill(30, 0.2)\n    addRange(10)\n    addPit(20)\n    addHill(10, 0.15)\n    addRange(-10)\n    modifyHeights('land', 0, 0.4)\n    addRange(10)\n    smoothHeights(3)\n  }\n\n  // Heighmap Template: Peninsulas\n  function templatePeninsulas(mod) {\n    addMountain()\n    modifyHeights('all', 15, 1)\n    addHill(30, 0)\n    addRange(5)\n    addPit(15)\n    const count = Math.ceil(Math.random() * 5 + 15)\n    addStrait(count)\n  }\n\n  function addMountain() {\n    const x = Math.floor(Math.random() * graphWidth / 3 + graphWidth / 3)\n    const y = Math.floor(Math.random() * graphHeight * 0.2 + graphHeight * 0.4)\n    const cell = diagram.find(x, y).index\n    const height = Math.random() * 10 + 90 // 90-99\n    add(cell, 'mountain', height)\n  }\n\n  // place with shift 0-0.5\n  function addHill(count, shift) {\n    for (let c = 0; c < count; c++) {\n      let limit = 0, cell, height\n      do {\n        height = Math.random() * 40 + 10 // 10-50\n        const x = Math.floor(Math.random() * graphWidth * (1 - shift * 2) + graphWidth * shift)\n        const y = Math.floor(Math.random() * graphHeight * (1 - shift * 2) + graphHeight * shift)\n        cell = diagram.find(x, y).index\n        limit++\n      } while (heights[cell] + height > 90 && limit < 100)\n      add(cell, 'hill', height)\n    }\n  }\n\n  function add(start, type, height) {\n    const session = Math.ceil(Math.random() * 1e5)\n    let radius\n    let hRadius\n    let mRadius\n    switch (+graphSize) {\n      case 1:\n        hRadius = 0.991\n        mRadius = 0.91\n        break\n      case 2:\n        hRadius = 0.9967\n        mRadius = 0.951\n        break\n      case 3:\n        hRadius = 0.999\n        mRadius = 0.975\n        break\n      case 4:\n        hRadius = 0.9994\n        mRadius = 0.98\n        break\n    }\n    radius = type === 'mountain' ? mRadius : hRadius\n    const queue = [start]\n    if (type === 'mountain') heights[start] = height\n    for (let i = 0; i < queue.length && height >= 1; i++) {\n      if (type === 'mountain') {\n        height = heights[queue[i]] * radius - height / 100\n      } else {height *= radius}\n      cells[queue[i]].neighbors.forEach(function(e) {\n        if (cells[e].used === session) return\n        const mod = Math.random() * 0.2 + 0.9 // 0.9-1.1 random factor\n        heights[e] += height * mod\n        if (heights[e] > 100) heights[e] = 100\n        cells[e].used = session\n        queue.push(e)\n      })\n    }\n  }\n\n  function addRange(mod, height, from, to) {\n    const session = Math.ceil(Math.random() * 100000)\n    const count = Math.abs(mod)\n    let range = []\n    for (let c = 0; c < count; c++) {\n      range = []\n      let diff = 0, start = from, end = to\n      if (!start || !end) {\n        do {\n          const xf = Math.floor(Math.random() * (graphWidth * 0.7)) + graphWidth * 0.15\n          const yf = Math.floor(Math.random() * (graphHeight * 0.6)) + graphHeight * 0.2\n          start = diagram.find(xf, yf).index\n          const xt = Math.floor(Math.random() * (graphWidth * 0.7)) + graphWidth * 0.15\n          const yt = Math.floor(Math.random() * (graphHeight * 0.6)) + graphHeight * 0.2\n          end = diagram.find(xt, yt).index\n          diff = Math.hypot(xt - xf, yt - yf)\n        } while (diff < 150 / graphSize || diff > 300 / graphSize)\n      }\n      if (start && end) {\n        for (let l = 0; start != end && l < 10000; l++) {\n          let min = 10000\n          cells[start].neighbors.forEach(function(e) {\n            diff = Math.hypot(cells[end].data[0] - cells[e].data[0],\n              cells[end].data[1] - cells[e].data[1])\n            if (Math.random() > 0.8) diff = diff / 2\n            if (diff < min) {min = diff, start = e}\n          })\n          range.push(start)\n        }\n      }\n      const change = height ? height : Math.random() * 10 + 10\n      range.map(function(r) {\n        let rnd = Math.random() * 0.4 + 0.8\n        if (mod > 0) heights[r] += change * rnd\n        else if (heights[r] >= 10) {heights[r] -= change * rnd}\n        cells[r].neighbors.forEach(function(e) {\n          if (cells[e].used === session) return\n          cells[e].used = session\n          rnd = Math.random() * 0.4 + 0.8\n          const ch = change / 2 * rnd\n          if (mod > 0) {heights[e] += ch} else if (heights[e] >= 10) {heights[e] -= ch}\n          if (heights[e] > 100) heights[e] = mod > 0 ? 100 : 5\n        })\n        if (heights[r] > 100) heights[r] = mod > 0 ? 100 : 5\n      })\n    }\n    return range\n  }\n\n  function addStrait(width) {\n    const session = Math.ceil(Math.random() * 100000)\n    const top = Math.floor(Math.random() * graphWidth * 0.35 + graphWidth * 0.3)\n    const bottom = Math.floor(\n      (graphWidth - top) - (graphWidth * 0.1) + (Math.random() * graphWidth * 0.2))\n    let start = diagram.find(top, graphHeight * 0.1).index\n    const end = diagram.find(bottom, graphHeight * 0.9).index\n    let range = []\n    for (let l = 0; start !== end && l < 1000; l++) {\n      let min = 10000 // dummy value\n      cells[start].neighbors.forEach(function(e) {\n        let diff = Math.hypot(cells[end].data[0] - cells[e].data[0],\n          cells[end].data[1] - cells[e].data[1])\n        if (Math.random() > 0.8) {diff = diff / 2}\n        if (diff < min) {\n          min = diff\n          start = e\n        }\n      })\n      range.push(start)\n    }\n    const query = []\n    for (; width > 0; width--) {\n      range.map(function(r) {\n        cells[r].neighbors.forEach(function(e) {\n          if (cells[e].used === session) {return}\n          cells[e].used = session\n          query.push(e)\n          heights[e] *= 0.23\n          if (heights[e] > 100 || heights[e] < 5) heights[e] = 5\n        })\n        range = query.slice()\n      })\n    }\n  }\n\n  function addPit(count, height, cell) {\n    const session = Math.ceil(Math.random() * 1e5)\n    for (let c = 0; c < count; c++) {\n      let change = height ? height + 10 : Math.random() * 10 + 20\n      let start = cell\n      if (!start) {\n        const lowlands = $.grep(cells, function(e) {return (heights[e.index] >= 20)})\n        if (!lowlands.length) return\n        const rnd = Math.floor(Math.random() * lowlands.length)\n        start = lowlands[rnd].index\n      }\n      let query = [start], newQuery = []\n      // depress pit center\n      heights[start] -= change\n      if (heights[start] < 5 || heights[start] > 100) heights[start] = 5\n      cells[start].used = session\n      for (let i = 1; i < 10000; i++) {\n        const rnd = Math.random() * 0.4 + 0.8\n        change -= i / 0.6 * rnd\n        if (change < 1) break\n        query.map(function(p) {\n          cells[p].neighbors.forEach(function(e) {\n            if (cells[e].used === session) return\n            cells[e].used = session\n            if (Math.random() > 0.8) return\n            newQuery.push(e)\n            heights[e] -= change\n            if (heights[e] < 5 || heights[e] > 100) heights[e] = 5\n          })\n        })\n        query = newQuery.slice()\n        newQuery = []\n      }\n    }\n  }\n\n  // Modify heights adding or multiplying by value\n  function modifyHeights(range, add, mult) {\n    function modify(v) {\n      if (add) v += add\n      if (mult !== 1) {\n        if (mult === '^2') mult = (v - 20) / 100\n        if (mult === '^3') mult = ((v - 20) * (v - 20)) / 100\n        if (range === 'land') {v = 20 + (v - 20) * mult} else {v *= mult}\n      }\n      if (v < 0) v = 0\n      if (v > 100) v = 100\n      return v\n    }\n\n    const limMin = range === 'land' ? 20 : range === 'all' ? 0 : +range.split('-')[0]\n    const limMax = range === 'land' || range === 'all' ? 100 : +range.split('-')[1]\n\n    for (let i = 0; i < heights.length; i++) {\n      if (heights[i] < limMin || heights[i] > limMax) continue\n      heights[i] = modify(heights[i])\n    }\n  }\n\n  // Smooth heights using mean of neighbors\n  function smoothHeights(fraction) {\n    const fr = fraction || 2\n    for (let i = 0; i < heights.length; i++) {\n      const nHeights = [heights[i]]\n      cells[i].neighbors.forEach(function(e) {nHeights.push(heights[e])})\n      heights[i] = (heights[i] * (fr - 1) + d3.mean(nHeights)) / fr\n    }\n  }\n\n  // Randomize heights a bit\n  function disruptHeights() {\n    for (let i = 0; i < heights.length; i++) {\n      if (heights[i] < 18) continue\n      if (Math.random() < 0.5) continue\n      heights[i] += 2 - Math.random() * 4\n    }\n  }\n\n  // Mark features (ocean, lakes, islands)\n  function markFeatures() {\n    console.time('markFeatures')\n    seedrandom(seed) // reset seed to get the same result on heightmap edit\n    for (let i = 0, queue = [0]; queue.length > 0; i++) {\n      const cell = cells[queue[0]]\n      cell.fn = i // feature number\n      const land = heights[queue[0]] >= 20\n      let border = cell.type === 'border'\n      if (border && land) cell.ctype = 2\n\n      while (queue.length) {\n        const q = queue.pop()\n        if (cells[q].type === 'border') {\n          border = true\n          if (land) cells[q].ctype = 2\n        }\n\n        cells[q].neighbors.forEach(function(e) {\n          const eLand = heights[e] >= 20\n          if (land === eLand && cells[e].fn === undefined) {\n            cells[e].fn = i\n            queue.push(e)\n          }\n          if (land && !eLand) {\n            cells[q].ctype = 2\n            cells[e].ctype = -1\n            cells[q].harbor = cells[q].harbor ? cells[q].harbor + 1 : 1\n          }\n        })\n      }\n      features.push({i, land, border})\n\n      // find unmarked cell\n      for (let c = 0; c < cells.length; c++) {\n        if (cells[c].fn === undefined) {\n          queue[0] = c\n          break\n        }\n      }\n    }\n    console.timeEnd('markFeatures')\n  }\n\n  function drawOcean() {\n    console.time('drawOcean')\n    let limits = []\n    let odd = 0.8 // initial odd for ocean layer is 80%\n    // Define type of ocean cells based on cell distance form land\n    let frontier = $.grep(cells, function(e) {return e.ctype === -1})\n    if (Math.random() < odd) {\n      limits.push(-1)\n      odd = 0.2\n    }\n    for (let c = -2; frontier.length > 0 && c > -10; c--) {\n      if (Math.random() < odd) {\n        limits.unshift(c)\n        odd = 0.2\n      } else {odd += 0.2}\n      frontier.map(function(i) {\n        i.neighbors.forEach(function(e) {\n          if (!cells[e].ctype) cells[e].ctype = c\n        })\n      })\n      frontier = $.grep(cells, function(e) {return e.ctype === c})\n    }\n    if (outlineLayersInput.value === 'none') return\n    if (outlineLayersInput.value !== 'random') limits = outlineLayersInput.value.split(',')\n    // Define area edges\n    const opacity = _.round(0.4 / limits.length, 2)\n    for (let l = 0; l < limits.length; l++) {\n      const edges = []\n      const lim = +limits[l]\n      for (let i = 0; i < cells.length; i++) {\n        if (cells[i].ctype < lim || cells[i].ctype === undefined) continue\n        if (cells[i].ctype > lim && cells[i].type !== 'border') continue\n        const cell = diagram.cells[i]\n        cell.halfedges.forEach(function(e) {\n          const edge = diagram.edges[e]\n          const start = edge[0].join(' ')\n          const end = edge[1].join(' ')\n          if (edge.left && edge.right) {\n            const ea = edge.left.index === i ? edge.right.index : edge.left.index\n            if (cells[ea].ctype < lim) edges.push({start, end})\n          } else {\n            edges.push({start, end})\n          }\n        })\n      }\n      lineGen.curve(d3.curveBasis)\n      let relax = 0.8 - l / 10\n      if (relax < 0.2) relax = 0.2\n      const line = getContinuousLine(edges, 0, relax)\n      oceanLayers.append('path').attr('d', line).attr('fill', '#ecf2f9')\n                 .style('opacity', opacity)\n    }\n    console.timeEnd('drawOcean')\n  }\n\n  // recalculate Voronoi Graph to pack cells\n  function reGraph() {\n    console.time('reGraph')\n    const tempCells = [], newPoints = [] // to store new data\n    // get average precipitation based on graph size\n    const avPrec = precInput.value / 5000\n    const smallLakesMax = 500\n    let smallLakes = 0\n    const evaporation = 2\n    cells.map(function(i, d) {\n      let height = i.height || heights[d]\n      if (height > 100) height = 100\n      const pit = i.pit\n      const ctype = i.ctype\n      if (ctype !== -1 && ctype !== -2 && height < 20) return // exclude all deep ocean points\n      const x = _.round(i.data[0], 1), y = _.round(i.data[1], 1)\n      const fn = i.fn\n      const harbor = i.harbor\n      let lake = i.lake\n      // mark potential cells for small lakes to add additional point there\n      if (smallLakes < smallLakesMax && !lake && pit > evaporation && ctype !== 2) {\n        lake = 2\n        smallLakes++\n      }\n      const region = i.region // handle value for edit heightmap mode only\n      const culture = i.culture // handle value for edit heightmap mode only\n      let copy = $.grep(newPoints, function(e) {return (e[0] == x && e[1] == y)})\n      if (!copy.length) {\n        newPoints.push([x, y])\n        tempCells.push({\n          index: tempCells.length,\n          data: [x, y],\n          height,\n          pit,\n          ctype,\n          fn,\n          harbor,\n          lake,\n          region,\n          culture\n        })\n      }\n      // add additional points for cells along coast\n      if (ctype === 2 || ctype === -1) {\n        if (i.type === 'border') return\n        if (!features[fn].land && !features[fn].border) return\n        i.neighbors.forEach(function(e) {\n          if (cells[e].ctype === ctype) {\n            let x1 = (x * 2 + cells[e].data[0]) / 3\n            let y1 = (y * 2 + cells[e].data[1]) / 3\n            x1 = _.round(x1, 1), y1 = _.round(y1, 1)\n            copy = $.grep(newPoints, function(e) {return e[0] === x1 && e[1] === y1})\n            if (copy.length) return\n            newPoints.push([x1, y1])\n            tempCells.push({\n              index: tempCells.length,\n              data: [x1, y1],\n              height,\n              pit,\n              ctype,\n              fn,\n              harbor,\n              lake,\n              region,\n              culture\n            })\n          }\n        })\n      }\n      if (lake === 2) { // add potential small lakes\n        polygons[i.index].forEach(function(e) {\n          if (Math.random() > 0.8) return\n          let rnd = Math.random() * 0.6 + 0.8\n          const x1 = _.round((e[0] * rnd + i.data[0]) / (1 + rnd), 2)\n          rnd = Math.random() * 0.6 + 0.8\n          const y1 = _.round((e[1] * rnd + i.data[1]) / (1 + rnd), 2)\n          copy = $.grep(newPoints, function(c) {return x1 === c[0] && y1 === c[1]})\n          if (copy.length) return\n          newPoints.push([x1, y1])\n          tempCells.push(\n            {index: tempCells.length, data: [x1, y1], height, pit, ctype, fn, region, culture})\n        })\n      }\n    })\n    console.log('small lakes candidates: ' + smallLakes)\n    cells = tempCells // use tempCells as the only cells array\n    calculateVoronoi(newPoints) // recalculate Voronoi diagram using new points\n    let gridPath = '' // store grid as huge single path string\n    cells.map(function(i, d) {\n      if (i.height >= 20) {\n        // calc cell area\n        i.area = _.round(Math.abs(d3.polygonArea(polygons[d])), 2)\n        const prec = _.round(avPrec * i.area, 2)\n        i.flux = i.lake ? prec * 10 : prec\n      }\n      const neighbors = [] // re-detect neighbors\n      diagram.cells[d].halfedges.forEach(function(e) {\n        const edge = diagram.edges[e]\n        if (edge.left === undefined || edge.right === undefined) {\n          if (i.height >= 20) i.ctype = 99 // border cell\n          return\n        }\n        const ea = edge.left.index === d ? edge.right.index : edge.left.index\n        neighbors.push(ea)\n        if (d < ea && i.height >= 20 && i.lake !== 1 && cells[ea].height >= 20 && cells[ea].lake !== 1) {\n          gridPath += 'M' + edge[0][0] + ',' + edge[0][1] + 'L' + edge[1][0] + ',' + edge[1][1]\n        }\n      })\n      i.neighbors = neighbors\n      if (i.region === undefined) delete i.region\n      if (i.culture === undefined) delete i.culture\n    })\n    grid.append('path').attr('d', gridPath)\n    console.timeEnd('reGraph')\n  }\n\n  // redraw all cells for Customization 1 mode\n  function mockHeightmap() {\n    let landCells = 0\n    $('#landmass').empty()\n    const limit = renderOcean.checked ? 1 : 20\n    for (let i = 0; i < heights.length; i++) {\n      if (heights[i] < limit) continue\n      if (heights[i] > 100) heights[i] = 100\n      const clr = color(1 - heights[i] / 100)\n      landmass.append('path').attr('id', 'cell' + i)\n              .attr('d', 'M' + polygons[i].join('L') + 'Z')\n              .attr('fill', clr).attr('stroke', clr)\n    }\n  }\n\n  $('#renderOcean').click(mockHeightmap)\n\n  // draw or update all cells\n  function updateHeightmap() {\n    const limit = renderOcean.checked ? 1 : 20\n    for (let i = 0; i < heights.length; i++) {\n      if (heights[i] > 100) heights[i] = 100\n      let cell = landmass.select('#cell' + i)\n      const clr = color(1 - heights[i] / 100)\n      if (cell.size()) {\n        if (heights[i] < limit) {cell.remove()} else {\n          cell.attr('fill', clr).attr('stroke', clr)\n        }\n      } else if (heights[i] >= limit) {\n        cell = landmass.append('path').attr('id', 'cell' + i)\n                       .attr('d', 'M' + polygons[i].join('L') + 'Z')\n                       .attr('fill', clr).attr('stroke', clr)\n      }\n    }\n  }\n\n  // draw or update cells from the selection\n  function updateHeightmapSelection(selection) {\n    if (selection === undefined) return\n    const limit = renderOcean.checked ? 1 : 20\n    selection.map(function(s) {\n      if (heights[s] > 100) heights[s] = 100\n      let cell = landmass.select('#cell' + s)\n      const clr = color(1 - heights[s] / 100)\n      if (cell.size()) {\n        if (heights[s] < limit) {cell.remove()} else {\n          cell.attr('fill', clr).attr('stroke', clr)\n        }\n      } else if (heights[s] >= limit) {\n        cell = landmass.append('path').attr('id', 'cell' + s)\n                       .attr('d', 'M' + polygons[s].join('L') + 'Z')\n                       .attr('fill', clr).attr('stroke', clr)\n      }\n    })\n  }\n\n  function updateHistory() {\n    let landCells = 0 // count number of land cells\n    if (renderOcean.checked) {\n      landCells =\n        heights.reduce(function(s, v) {if (v >= 20) {return s + 1} else {return s}}, 0)\n    } else {\n      landCells = landmass.selectAll('*').size()\n    }\n    history = history.slice(0, historyStage)\n    history[historyStage] = heights.slice()\n    historyStage++\n    undo.disabled = templateUndo.disabled = historyStage <= 1\n    redo.disabled = templateRedo.disabled = true\n    const landMean = Math.trunc(d3.mean(heights))\n    const landRatio = _.round(landCells / heights.length * 100)\n    landmassCounter.innerHTML = landCells\n    landmassRatio.innerHTML = landRatio\n    landmassAverage.innerHTML = landMean\n    // if perspective view dialog is opened, update it\n    if ($('#perspectivePanel').is(':visible')) drawPerspective()\n  }\n\n  // restoreHistory\n  function restoreHistory(step) {\n    historyStage = step\n    redo.disabled = templateRedo.disabled = historyStage >= history.length\n    undo.disabled = templateUndo.disabled = historyStage <= 1\n    if (history[historyStage - 1] === undefined) return\n    heights = history[historyStage - 1].slice()\n    updateHeightmap()\n  }\n\n  // restart history from 1st step\n  function restartHistory() {\n    history = []\n    historyStage = 0\n    redo.disabled = templateRedo.disabled = true\n    undo.disabled = templateUndo.disabled = true\n    updateHistory()\n  }\n\n  // Detect and draw the coasline\n  function drawCoastline() {\n    console.time('drawCoastline')\n    seedrandom(seed) // reset seed to get the same result on heightmap edit\n    const shape = defs.append('mask').attr('id', 'shape').attr('fill', 'black').attr('x', 0)\n                      .attr('y', 0).attr('width', '100%').attr('height', '100%')\n    $('#landmass').empty()\n    let minX = graphWidth, maxX = 0 // extreme points\n    let minXedge, maxXedge // extreme edges\n    const oceanEdges = [], lakeEdges = []\n    for (let i = 0; i < land.length; i++) {\n      const id = land[i].index, cell = diagram.cells[id]\n      const f = land[i].fn\n      land[i].height = Math.trunc(land[i].height)\n      if (!oceanEdges[f]) {\n        oceanEdges[f] = []\n        lakeEdges[f] = []\n      }\n      cell.halfedges.forEach(function(e) {\n        const edge = diagram.edges[e]\n        const start = edge[0].join(' ')\n        const end = edge[1].join(' ')\n        if (edge.left && edge.right) {\n          const ea = edge.left.index === id ? edge.right.index : edge.left.index\n          cells[ea].height = Math.trunc(cells[ea].height)\n          if (cells[ea].height < 20) {\n            cells[ea].ctype = -1\n            if (land[i].ctype !== 1) {\n              land[i].ctype = 1 // mark coastal land cells\n              // move cell point closer to coast\n              const x = (land[i].data[0] + cells[ea].data[0]) / 2\n              const y = (land[i].data[1] + cells[ea].data[1]) / 2\n              land[i].haven = ea // harbor haven (oposite water cell)\n              land[i].coastX = _.round(x + (land[i].data[0] - x) * 0.1, 1)\n              land[i].coastY = _.round(y + (land[i].data[1] - y) * 0.1, 1)\n              land[i].data[0] = _.round(x + (land[i].data[0] - x) * 0.5, 1)\n              land[i].data[1] = _.round(y + (land[i].data[1] - y) * 0.5, 1)\n            }\n            if (features[cells[ea].fn].border) {\n              oceanEdges[f].push({start, end})\n              // island extreme points\n              if (edge[0][0] < minX) {\n                minX = edge[0][0]\n                minXedge = edge[0]\n              }\n              if (edge[1][0] < minX) {\n                minX = edge[1][0]\n                minXedge = edge[1]\n              }\n              if (edge[0][0] > maxX) {\n                maxX = edge[0][0]\n                maxXedge = edge[0]\n              }\n              if (edge[1][0] > maxX) {\n                maxX = edge[1][0]\n                maxXedge = edge[1]\n              }\n            } else {\n              const l = cells[ea].fn\n              if (!lakeEdges[f][l]) lakeEdges[f][l] = []\n              lakeEdges[f][l].push({start, end})\n            }\n          }\n        } else {\n          oceanEdges[f].push({start, end})\n        }\n      })\n    }\n\n    for (let f = 0; f < features.length; f++) {\n      if (!oceanEdges[f]) continue\n      if (!oceanEdges[f].length && lakeEdges[f].length) {\n        const m = lakeEdges[f].indexOf(d3.max(lakeEdges[f]))\n        oceanEdges[f] = lakeEdges[f][m]\n        lakeEdges[f][m] = []\n      }\n      lineGen.curve(d3.curveCatmullRomClosed.alpha(0.1))\n      const oceanCoastline = getContinuousLine(oceanEdges[f], 3, 0)\n      if (oceanCoastline) {\n        shape.append('path').attr('d', oceanCoastline).attr('fill', 'white') // draw the mask\n        coastline.append('path').attr('d', oceanCoastline) // draw the coastline\n      }\n      lineGen.curve(d3.curveBasisClosed)\n      lakeEdges[f].forEach(function(l) {\n        const lakeCoastline = getContinuousLine(l, 3, 0)\n        if (lakeCoastline) {\n          shape.append('path').attr('d', lakeCoastline).attr('fill', 'black') // draw the mask\n          lakes.append('path').attr('d', lakeCoastline) // draw the lakes\n        }\n      })\n    }\n    landmass.append('rect').attr('x', 0).attr('y', 0).attr('width', graphWidth)\n            .attr('height', graphHeight) // draw the landmass\n    drawDefaultRuler(minXedge, maxXedge)\n    console.timeEnd('drawCoastline')\n  }\n\n  // draw default scale bar\n  function drawScaleBar() {\n    if ($('#scaleBar').hasClass('hidden')) return // no need to re-draw hidden element\n    svg.select('#scaleBar').remove() // fully redraw every time\n    // get size\n    const size = +barSize.value\n    const dScale = distanceScale.value\n    const unit = distanceUnit.value\n    const scaleBar = svg.append('g').attr('id', 'scaleBar')\n                        .on('click', editScale)\n                        .on('mousemove', function() {\n                          tip('Click to open Scale Editor, drag to move')\n                        })\n                        .call(d3.drag().on('start', elementDrag))\n    const init = 100 // actual length in pixels if scale, dScale and size = 1;\n    let val = init * size * dScale / scale // bar length in distance unit\n    if (val > 900) {val = _.round(val, -3)} // round to 1000\n    else if (val > 90) {val = _.round(val, -2)} // round to 100\n    else if (val > 9) {val = _.round(val, -1)} // round to 10\n    else {val = Math.round(val)} // round to 1\n    const l = val * scale / dScale // actual length in pixels on this scale\n    const x = 0, y = 0 // initial position\n    scaleBar.append('line').attr('x1', x + 0.5).attr('y1', y).attr('x2', x + l + size - 0.5)\n            .attr('y2', y).attr('stroke-width', size).attr('stroke', 'white')\n    scaleBar.append('line').attr('x1', x).attr('y1', y + size).attr('x2', x + l + size)\n            .attr('y2', y + size).attr('stroke-width', size).attr('stroke', '#3d3d3d')\n    const dash = size + ' ' + _.round(l / 5 - size, 2)\n    scaleBar.append('line').attr('x1', x).attr('y1', y).attr('x2', x + l + size).attr('y2', y)\n            .attr('stroke-width', _.round(size * 3, 2)).attr('stroke-dasharray', dash)\n            .attr('stroke', '#3d3d3d')\n    // big scale\n    for (let b = 0; b < 6; b++) {\n      const value = _.round(b * l / 5, 2)\n      const label = _.round(value * dScale / scale)\n      if (b === 5) {\n        scaleBar.append('text').attr('x', x + value).attr('y', y - 2 * size)\n                .attr('font-size', _.round(5 * size, 1)).text(label + ' ' + unit)\n      } else {\n        scaleBar.append('text').attr('x', x + value).attr('y', y - 2 * size)\n                .attr('font-size', _.round(5 * size, 1)).text(label)\n      }\n    }\n    if (barLabel.value !== '') {\n      scaleBar.append('text').attr('x', x + (l + 1) / 2).attr('y', y + 2 * size)\n              .attr('dominant-baseline', 'text-before-edge')\n              .attr('font-size', _.round(5 * size, 1)).text(barLabel.value)\n    }\n    const bbox = scaleBar.node().getBBox()\n    // append backbround rectangle\n    scaleBar.insert('rect', ':first-child').attr('x', -10).attr('y', -20)\n            .attr('width', bbox.width + 10).attr('height', bbox.height + 15)\n            .attr('stroke-width', size).attr('stroke', 'none').attr('filter', 'url(#blur5)')\n            .attr('fill', barBackColor.value).attr('opacity', +barBackOpacity.value)\n    fitScaleBar()\n  }\n\n  // draw default ruler measiring land x-axis edges\n  function drawDefaultRuler(minXedge, maxXedge) {\n    const rulerNew = ruler.append('g').attr('class', 'linear')\n                          .call(d3.drag().on('start', elementDrag))\n    if (!minXedge) minXedge = [0, 0]\n    if (!maxXedge) maxXedge = [svgWidth, svgHeight]\n    const x1 = _.round(minXedge[0], 2), y1 = _.round(minXedge[1], 2), x2 = _.round(maxXedge[0], 2),\n      y2 = _.round(maxXedge[1], 2)\n    rulerNew.append('line').attr('x1', x1).attr('y1', y1).attr('x2', x2).attr('y2', y2)\n            .attr('class', 'white')\n    rulerNew.append('line').attr('x1', x1).attr('y1', y1).attr('x2', x2).attr('y2', y2)\n            .attr('class', 'gray').attr('stroke-dasharray', 10)\n    rulerNew.append('circle').attr('r', 2).attr('cx', x1).attr('cy', y1).attr('stroke-width', 0.5)\n            .attr('data-edge', 'left').call(d3.drag().on('drag', rulerEdgeDrag))\n    rulerNew.append('circle').attr('r', 2).attr('cx', x2).attr('cy', y2).attr('stroke-width', 0.5)\n            .attr('data-edge', 'rigth').call(d3.drag().on('drag', rulerEdgeDrag))\n    const x0 = _.round((x1 + x2) / 2, 2)\n    const y0 = _.round((y1 + y2) / 2, 2)\n    rulerNew.append('circle').attr('r', 1.2).attr('cx', x0).attr('cy', y0)\n            .attr('stroke-width', 0.3).attr('class', 'center')\n            .call(d3.drag().on('start', rulerCenterDrag))\n    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI\n    const tr = 'rotate(' + angle + ' ' + x0 + ' ' + y0 + ')'\n    const dist = Math.round(Math.hypot(x1 - x2, y1 - y2))\n    const label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n    rulerNew.append('text').attr('x', x0).attr('y', y0).attr('dy', -1).attr('transform', tr)\n            .attr('data-dist', dist).text(label).on('click', removeParent).attr('font-size', 10)\n  }\n\n  // drag any element changing transform\n  function elementDrag() {\n    const el = d3.select(this)\n    const tr = parseTransform(el.attr('transform'))\n    const dx = +tr[0] - d3.event.x\n    const dy = +tr[1] - d3.event.y\n\n    d3.event.on('drag', function() {\n      const x = d3.event.x\n      const y = d3.event.y\n      const transform = `translate(${(dx + x)},${(dy + y)}) rotate(${tr[2]} ${tr[3]} ${tr[4]})`\n      el.attr('transform', transform)\n      const pp = this.parentNode.parentNode.id\n      if (pp === 'burgIcons' || pp === 'burgLabels') {\n        tip('Use dragging for fine-tuning only, to move burg to a different cell use \"Relocate\" button')\n      }\n      if (pp === 'labels') {\n        // also transform curve control circle\n        debug.select('circle').attr('transform', transform)\n      }\n    })\n\n    d3.event.on('end', function() {\n      // remember scaleBar bottom-right position\n      if (el.attr('id') === 'scaleBar') {\n        const xEnd = d3.event.x, yEnd = d3.event.y\n        const diff = Math.abs(dx - xEnd) + Math.abs(dy - yEnd)\n        if (diff > 5) {\n          const bbox = el.node().getBoundingClientRect()\n          sessionStorage.setItem('scaleBar', [bbox.right, bbox.bottom])\n        }\n      }\n    })\n  }\n\n  // draw ruler circles and update label\n  function rulerEdgeDrag() {\n    const group = d3.select(this.parentNode)\n    const edge = d3.select(this).attr('data-edge')\n    const x = d3.event.x, y = d3.event.y\n    let x0, y0\n    d3.select(this).attr('cx', x).attr('cy', y)\n    const line = group.selectAll('line')\n    if (edge === 'left') {\n      line.attr('x1', x).attr('y1', y)\n      x0 = +line.attr('x2')\n      y0 = +line.attr('y2')\n    } else {\n      line.attr('x2', x).attr('y2', y)\n      x0 = +line.attr('x1')\n      y0 = +line.attr('y1')\n    }\n    const xc = _.round((x + x0) / 2, 2)\n    const yc = _.round((y + y0) / 2, 2)\n    group.select('.center').attr('cx', xc).attr('cy', yc)\n    const dist = Math.round(Math.hypot(x0 - x, y0 - y))\n    const label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n    const atan = x0 > x ? Math.atan2(y0 - y, x0 - x) : Math.atan2(y - y0, x - x0)\n    const angle = _.round(atan * 180 / Math.PI, 3)\n    const tr = 'rotate(' + angle + ' ' + xc + ' ' + yc + ')'\n    group.select('text').attr('x', xc).attr('y', yc).attr('transform', tr).attr('data-dist', dist)\n         .text(label)\n  }\n\n  // draw ruler center point to split ruler into 2 parts\n  function rulerCenterDrag() {\n    let xc1, yc1, xc2, yc2\n    const group = d3.select(this.parentNode) // current ruler group\n    let x = d3.event.x, y = d3.event.y // current coords\n    const line = group.selectAll('line') // current lines\n    const x1 = +line.attr('x1'), y1 = +line.attr('y1'), x2 = +line.attr('x2'),\n      y2 = +line.attr('y2') // initial line edge points\n    const rulerNew = ruler.insert('g', ':first-child')\n    rulerNew.attr('transform', group.attr('transform')).call(d3.drag().on('start', elementDrag))\n    const factor = _.round(1 / Math.pow(scale, 0.3), 1)\n    rulerNew.append('line').attr('class', 'white').attr('stroke-width', factor)\n    const dash = +group.select('.gray').attr('stroke-dasharray')\n    rulerNew.append('line').attr('class', 'gray').attr('stroke-dasharray', dash)\n            .attr('stroke-width', factor)\n    rulerNew.append('text').attr('dy', -1).on('click', removeParent)\n            .attr('font-size', 10 * factor).attr('stroke-width', factor)\n\n    d3.event.on('drag', function() {\n      x = d3.event.x, y = d3.event.y\n      d3.select(this).attr('cx', x).attr('cy', y)\n      // change first part\n      line.attr('x1', x1).attr('y1', y1).attr('x2', x).attr('y2', y)\n      let dist = Math.round(Math.hypot(x1 - x, y1 - y))\n      let label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n      let atan = x1 > x ? Math.atan2(y1 - y, x1 - x) : Math.atan2(y - y1, x - x1)\n      xc1 = _.round((x + x1) / 2, 2)\n      yc1 = _.round((y + y1) / 2, 2)\n      let tr = 'rotate(' + _.round(atan * 180 / Math.PI, 3) + ' ' + xc1 + ' ' + yc1 + ')'\n      group.select('text').attr('x', xc1).attr('y', yc1).attr('transform', tr)\n           .attr('data-dist', dist).text(label)\n      // change second (new) part\n      dist = Math.round(Math.hypot(x2 - x, y2 - y))\n      label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n      atan = x2 > x ? Math.atan2(y2 - y, x2 - x) : Math.atan2(y - y2, x - x2)\n      xc2 = _.round((x + x2) / 2, 2)\n      yc2 = _.round((y + y2) / 2, 2)\n      tr = 'rotate(' + _.round(atan * 180 / Math.PI, 3) + ' ' + xc2 + ' ' + yc2 + ')'\n      rulerNew.selectAll('line').attr('x1', x).attr('y1', y).attr('x2', x2).attr('y2', y2)\n      rulerNew.select('text').attr('x', xc2).attr('y', yc2).attr('transform', tr)\n              .attr('data-dist', dist).text(label)\n    })\n\n    d3.event.on('end', function() {\n      // circles for 1st part\n      group.selectAll('circle').remove()\n      group.append('circle').attr('cx', x1).attr('cy', y1).attr('r', 2 * factor)\n           .attr('stroke-width', 0.5 * factor).attr('data-edge', 'left')\n           .call(d3.drag().on('drag', rulerEdgeDrag))\n      group.append('circle').attr('cx', x).attr('cy', y).attr('r', 2 * factor)\n           .attr('stroke-width', 0.5 * factor).attr('data-edge', 'rigth')\n           .call(d3.drag().on('drag', rulerEdgeDrag))\n      group.append('circle').attr('cx', xc1).attr('cy', yc1).attr('r', 1.2 * factor)\n           .attr('stroke-width', 0.3 * factor).attr('class', 'center')\n           .call(d3.drag().on('start', rulerCenterDrag))\n      // circles for 2nd part\n      rulerNew.append('circle').attr('cx', x).attr('cy', y).attr('r', 2 * factor)\n              .attr('stroke-width', 0.5 * factor).attr('data-edge', 'left')\n              .call(d3.drag().on('drag', rulerEdgeDrag))\n      rulerNew.append('circle').attr('cx', x2).attr('cy', y2).attr('r', 2 * factor)\n              .attr('stroke-width', 0.5 * factor).attr('data-edge', 'rigth')\n              .call(d3.drag().on('drag', rulerEdgeDrag))\n      rulerNew.append('circle').attr('cx', xc2).attr('cy', yc2).attr('r', 1.2 * factor)\n              .attr('stroke-width', 0.3 * factor).attr('class', 'center')\n              .call(d3.drag().on('start', rulerCenterDrag))\n    })\n  }\n\n  function opisometerEdgeDrag() {\n    const el = d3.select(this)\n    const x0 = +el.attr('cx'), y0 = +el.attr('cy')\n    const group = d3.select(this.parentNode)\n    const curve = group.select('.white')\n    const curveGray = group.select('.gray')\n    const text = group.select('text')\n    const points = JSON.parse(text.attr('data-points'))\n    if (x0 === points[0].scX && y0 === points[0].scY) {points.reverse()}\n\n    d3.event.on('drag', function() {\n      const x = d3.event.x, y = d3.event.y\n      el.attr('cx', x).attr('cy', y)\n      const l = points[points.length - 1]\n      const diff = Math.hypot(l.scX - x, l.scY - y)\n      if (diff > 5) {points.push({scX: x, scY: y})} else {return}\n      lineGen.curve(d3.curveBasis)\n      const d = round(lineGen(points))\n      curve.attr('d', d)\n      curveGray.attr('d', d)\n      const dist = Math.round(curve.node().getTotalLength())\n      const label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n      text.attr('x', x).attr('y', y).text(label)\n    })\n\n    d3.event.on('end', function() {\n      const dist = Math.round(curve.node().getTotalLength())\n      const c = curve.node().getPointAtLength(dist / 2)\n      const p = curve.node().getPointAtLength((dist / 2) - 1)\n      const label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n      const atan = p.x > c.x ? Math.atan2(p.y - c.y, p.x - c.x) :\n                   Math.atan2(c.y - p.y, c.x - p.x)\n      const angle = Math.round(atan * 180 / Math.PI, 3)\n      const tr = 'rotate(' + angle + ' ' + c.x + ' ' + c.y + ')'\n      text.attr('data-points', JSON.stringify(points)).attr('data-dist', dist).attr('x', c.x)\n          .attr('y', c.y).attr('transform', tr).text(label)\n    })\n  }\n\n  function getContinuousLine(edges, indention, relax) {\n    let line = ''\n    if (edges.length < 3) return ''\n    while (edges.length > 2) {\n      let edgesOrdered = [] // to store points in a correct order\n      let start = edges[0].start\n      let end = edges[0].end\n      edges.shift()\n      let spl = start.split(' ')\n      edgesOrdered.push({scX: +spl[0], scY: +spl[1]})\n      spl = end.split(' ')\n      edgesOrdered.push({scX: +spl[0], scY: +spl[1]})\n      let x0 = +spl[0], y0 = +spl[1]\n      for (let i = 0; end !== start && i < 100000; i++) {\n        let next = null, index = null\n        for (let e = 0; e < edges.length; e++) {\n          const edge = edges[e]\n          if (edge.start == end || edge.end == end) {\n            next = edge\n            end = next.start == end ? next.end : next.start\n            index = e\n            break\n          }\n        }\n        if (!next) {\n          console.error('Next edge is not found')\n          return ''\n        }\n        spl = end.split(' ')\n        if (indention || relax) {\n          const dist = Math.hypot(+spl[0] - x0, +spl[1] - y0)\n          if (dist >= indention && Math.random() > relax) {\n            edgesOrdered.push({scX: +spl[0], scY: +spl[1]})\n            x0 = +spl[0], y0 = +spl[1]\n          }\n        } else {\n          edgesOrdered.push({scX: +spl[0], scY: +spl[1]})\n        }\n        edges.splice(index, 1)\n        if (i === 100000 - 1) {\n          console.error('Line not ended, limit reached')\n          break\n        }\n      }\n      line += lineGen(edgesOrdered)\n    }\n    return round(line, 1)\n  }\n\n  // temporary elevate lakes to min neighbors heights to correctly flux the water\n  function elevateLakes() {\n    console.time('elevateLakes')\n    const lakes = $.grep(cells,\n      function(e, d) {return heights[d] < 20 && !features[e.fn].border})\n    lakes.sort(function(a, b) {return heights[b.index] - heights[a.index]})\n    for (let i = 0; i < lakes.length; i++) {\n      const hs = [], id = lakes[i].index\n      cells[id].height = heights[id] // use height on object level\n      lakes[i].neighbors.forEach(function(n) {\n        const nHeight = cells[n].height || heights[n]\n        if (nHeight >= 20) hs.push(nHeight)\n      })\n      if (hs.length) cells[id].height = d3.min(hs) - 1\n      if (cells[id].height < 20) cells[id].height = 20\n      lakes[i].lake = 1\n    }\n    console.timeEnd('elevateLakes')\n  }\n\n  // Depression filling algorithm (for a correct water flux modeling; phase1)\n  function resolveDepressionsPrimary() {\n    console.time('resolveDepressionsPrimary')\n    land = $.grep(cells, function(e, d) {\n      if (!e.height) e.height = heights[d] // use height on object level\n      return e.height >= 20\n    })\n    land.sort(function(a, b) {return b.height - a.height})\n    const limit = 10\n    for (let l = 0, depression = 1; depression > 0 && l < limit; l++) {\n      depression = 0\n      for (let i = 0; i < land.length; i++) {\n        const id = land[i].index\n        if (land[i].type === 'border') continue\n        const hs = land[i].neighbors.map(function(n) {return cells[n].height})\n        const minHigh = d3.min(hs)\n        if (cells[id].height <= minHigh) {\n          depression++\n          land[i].pit = land[i].pit ? land[i].pit + 1 : 1\n          cells[id].height = minHigh + 2\n        }\n      }\n      if (l === 0) console.log(' depressions init: ' + depression)\n    }\n    console.timeEnd('resolveDepressionsPrimary')\n  }\n\n  // Depression filling algorithm (for a correct water flux modeling; phase2)\n  function resolveDepressionsSecondary() {\n    console.time('resolveDepressionsSecondary')\n    land = $.grep(cells, function(e) {return e.height >= 20})\n    land.sort(function(a, b) {return b.height - a.height})\n    const limit = 100\n    for (let l = 0, depression = 1; depression > 0 && l < limit; l++) {\n      depression = 0\n      for (let i = 0; i < land.length; i++) {\n        if (land[i].ctype === 99) continue\n        const nHeights = land[i].neighbors.map(function(n) {return cells[n].height})\n        const minHigh = d3.min(nHeights)\n        if (land[i].height <= minHigh) {\n          depression++\n          land[i].pit = land[i].pit ? land[i].pit + 1 : 1\n          land[i].height = Math.trunc(minHigh + 2)\n        }\n      }\n      if (l === 0) console.log(' depressions reGraphed: ' + depression)\n      if (l === limit - 1) console.error('Error: resolveDepressions iteration limit')\n    }\n    console.timeEnd('resolveDepressionsSecondary')\n  }\n\n  // restore initial heights if user don't want system to change heightmap\n  function restoreCustomHeights() {\n    land.forEach(function(l) {\n      if (!l.pit) return\n      l.height = Math.trunc(l.height - l.pit * 2)\n      if (l.height < 20) l.height = 20\n    })\n  }\n\n  function flux() {\n    console.time('flux')\n    riversData = []\n    let riverNext = 0\n    land.sort(function(a, b) {return b.height - a.height})\n    for (let i = 0; i < land.length; i++) {\n      const id = land[i].index\n      const sx = land[i].data[0]\n      const sy = land[i].data[1]\n      let fn = land[i].fn\n      if (land[i].ctype === 99) {\n        if (land[i].river !== undefined) {\n          let x, y\n          const min = Math.min(sy, graphHeight - sy, sx, graphWidth - sx)\n          if (min === sy) {\n            x = sx\n            y = 0\n          }\n          if (min === graphHeight - sy) {\n            x = sx\n            y = graphHeight\n          }\n          if (min === sx) {\n            x = 0\n            y = sy\n          }\n          if (min === graphWidth - sx) {\n            x = graphWidth\n            y = sy\n          }\n          riversData.push({river: land[i].river, cell: id, x, y})\n        }\n        continue\n      }\n      if (features[fn].river !== undefined) {\n        if (land[i].river !== features[fn].river) {\n          land[i].river = undefined\n          land[i].flux = 0\n        }\n      }\n      let minHeight = 1000, min\n      land[i].neighbors.forEach(function(e) {\n        if (cells[e].height < minHeight) {\n          minHeight = cells[e].height\n          min = e\n        }\n      })\n      // Define river number\n      if (min !== undefined && land[i].flux > 1) {\n        if (land[i].river === undefined) {\n          // State new River\n          land[i].river = riverNext\n          riversData.push({river: riverNext, cell: id, x: sx, y: sy})\n          riverNext += 1\n        }\n        // Assing existing River to the downhill cell\n        if (cells[min].river == undefined) {\n          cells[min].river = land[i].river\n        } else {\n          const riverTo = cells[min].river\n          const iRiver = $.grep(riversData, function(e) {\n            return (e.river == land[i].river)\n          })\n          const minRiver = $.grep(riversData, function(e) {\n            return (e.river == riverTo)\n          })\n          let iRiverL = iRiver.length\n          let minRiverL = minRiver.length\n          // re-assing river nunber if new part is greater\n          if (iRiverL >= minRiverL) {\n            cells[min].river = land[i].river\n            iRiverL += 1\n            minRiverL -= 1\n          }\n          // mark confluences\n          if (cells[min].height >= 20 && iRiverL > 1 && minRiverL > 1) {\n            if (!cells[min].confluence) {\n              cells[min].confluence = minRiverL - 1\n            } else {\n              cells[min].confluence += minRiverL - 1\n            }\n          }\n        }\n      }\n      if (cells[min].flux) cells[min].flux += land[i].flux\n      if (land[i].river !== undefined) {\n        const px = cells[min].data[0]\n        const py = cells[min].data[1]\n        if (cells[min].height < 20) {\n          // pour water to the sea\n          const x = (px + sx) / 2 + (px - sx) / 10\n          const y = (py + sy) / 2 + (py - sy) / 10\n          riversData.push({river: land[i].river, cell: id, x, y})\n        } else {\n          if (cells[min].lake === 1) {\n            fn = cells[min].fn\n            if (features[fn].river === undefined) features[fn].river = land[i].river\n          }\n          // add next River segment\n          riversData.push({river: land[i].river, cell: min, x: px, y: py})\n        }\n      }\n    }\n    console.timeEnd('flux')\n    drawRiverLines(riverNext)\n  }\n\n  function drawRiverLines(riverNext) {\n    console.time('drawRiverLines')\n    for (let i = 0; i < riverNext; i++) {\n      const dataRiver = $.grep(riversData, function(e) {\n        return e.river === i\n      })\n      if (dataRiver.length > 1) {\n        const riverAmended = amendRiver(dataRiver, 1)\n        const width = _.round(0.8 + Math.random() * 0.4, 1)\n        const increment = _.round(0.8 + Math.random() * 0.4, 1)\n        const d = drawRiver(riverAmended, width, increment)\n        rivers.append('path').attr('d', d).attr('id', 'river' + i).attr('data-width', width)\n              .attr('data-increment', increment)\n      }\n    }\n    rivers.selectAll('path').on('click', editRiver)\n    console.timeEnd('drawRiverLines')\n  }\n\n  // add more river points on 1/3 and 2/3 of length\n  function amendRiver(dataRiver, rndFactor) {\n    const riverAmended = []\n    let side = 1\n    for (let r = 0; r < dataRiver.length; r++) {\n      const dX = dataRiver[r].x\n      const dY = dataRiver[r].y\n      const cell = dataRiver[r].cell\n      const c = cells[cell].confluence || 0\n      riverAmended.push([dX, dY, c])\n      if (r + 1 < dataRiver.length) {\n        const eX = dataRiver[r + 1].x\n        const eY = dataRiver[r + 1].y\n        const angle = Math.atan2(eY - dY, eX - dX)\n        const serpentine = 1 / (r + 1)\n        const meandr = serpentine + 0.3 + Math.random() * 0.3 * rndFactor\n        if (Math.random() > 0.5) {\n          side *= -1\n        }\n        const dist = Math.hypot(eX - dX, eY - dY)\n        // if dist is big or river is small add 2 extra points\n        if (dist > 8 || (dist > 4 && dataRiver.length < 6)) {\n          let stX = (dX * 2 + eX) / 3\n          let stY = (dY * 2 + eY) / 3\n          let enX = (dX + eX * 2) / 3\n          let enY = (dY + eY * 2) / 3\n          stX += -Math.sin(angle) * meandr * side\n          stY += Math.cos(angle) * meandr * side\n          if (Math.random() > 0.8) {\n            side *= -1\n          }\n          enX += Math.sin(angle) * meandr * side\n          enY += -Math.cos(angle) * meandr * side\n          riverAmended.push([stX, stY], [enX, enY])\n          // if dist is medium or river is small add 1 extra point\n        } else if (dist > 4 || dataRiver.length < 6) {\n          let scX = (dX + eX) / 2\n          let scY = (dY + eY) / 2\n          scX += -Math.sin(angle) * meandr * side\n          scY += Math.cos(angle) * meandr * side\n          riverAmended.push([scX, scY])\n        }\n      }\n    }\n    return riverAmended\n  }\n\n  // draw river polygon using arrpoximation\n  function drawRiver(points, width, increment) {\n    lineGen.curve(d3.curveCatmullRom.alpha(0.1))\n    let extraOffset = 0.03 // start offset to make river source visible\n    width = width || 1 // river width modifier\n    increment = increment || 1 // river bed widening modifier\n    let riverLength = 0\n    points.map(function(p, i) {\n      if (i === 0) {return 0}\n      riverLength += Math.hypot(p[0] - points[i - 1][0], p[1] - points[i - 1][1])\n    })\n    const widening = Math.round((1000 + (riverLength * 30)) * increment)\n    const riverPointsLeft = [], riverPointsRight = []\n    const last = points.length - 1\n    const factor = riverLength / points.length\n\n    // first point\n    let x = points[0][0], y = points[0][1], c\n    let angle = Math.atan2(y - points[1][1], x - points[1][0])\n    let xLeft = x + -Math.sin(angle) * extraOffset, yLeft = y + Math.cos(angle) * extraOffset\n    riverPointsLeft.push({scX: xLeft, scY: yLeft})\n    let xRight = x + Math.sin(angle) * extraOffset, yRight = y + -Math.cos(angle) * extraOffset\n    riverPointsRight.unshift({scX: xRight, scY: yRight})\n\n    // middle points\n    for (let p = 1; p < last; p++) {\n      x = points[p][0], y = points[p][1], c = points[p][2]\n      if (c) {extraOffset += Math.atan(c * 10 / widening)} // confluence\n      const xPrev = points[p - 1][0], yPrev = points[p - 1][1]\n      const xNext = points[p + 1][0], yNext = points[p + 1][1]\n      angle = Math.atan2(yPrev - yNext, xPrev - xNext)\n      var offset = (Math.atan(Math.pow(p * factor, 2) / widening) / 2 * width) + extraOffset\n      xLeft = x + -Math.sin(angle) * offset, yLeft = y + Math.cos(angle) * offset\n      riverPointsLeft.push({scX: xLeft, scY: yLeft})\n      xRight = x + Math.sin(angle) * offset, yRight = y + -Math.cos(angle) * offset\n      riverPointsRight.unshift({scX: xRight, scY: yRight})\n    }\n\n    // end point\n    x = points[last][0], y = points[last][1], c = points[last][2]\n    if (c) {extraOffset += Math.atan(c * 10 / widening)} // confluence\n    angle = Math.atan2(points[last - 1][1] - y, points[last - 1][0] - x)\n    xLeft = x + -Math.sin(angle) * offset, yLeft = y + Math.cos(angle) * offset\n    riverPointsLeft.push({scX: xLeft, scY: yLeft})\n    xRight = x + Math.sin(angle) * offset, yRight = y + -Math.cos(angle) * offset\n    riverPointsRight.unshift({scX: xRight, scY: yRight})\n\n    // generate path and return\n    const right = lineGen(riverPointsRight)\n    let left = lineGen(riverPointsLeft)\n    left = left.substring(left.indexOf('C'))\n    return round(right + left, 2)\n  }\n\n  // draw river polygon with best quality\n  function drawRiverSlow(points, width, increment) {\n    lineGen.curve(d3.curveCatmullRom.alpha(0.1))\n    width = width || 1\n    const extraOffset = 0.02 * width\n    increment = increment || 1\n    const riverPoints = points.map(function(p) {\n      return {scX: p[0], scY: p[1]}\n    })\n    const river = defs.append('path').attr('d', lineGen(riverPoints))\n    const riverLength = river.node().getTotalLength()\n    const widening = Math.round((1000 + (riverLength * 30)) * increment)\n    const riverPointsLeft = [], riverPointsRight = []\n\n    for (let l = 0; l < riverLength; l++) {\n      var point = river.node().getPointAtLength(l)\n      var from = river.node().getPointAtLength(l - 0.1)\n      const to = river.node().getPointAtLength(l + 0.1)\n      var angle = Math.atan2(from.y - to.y, from.x - to.x)\n      var offset = (Math.atan(Math.pow(l, 2) / widening) / 2 * width) + extraOffset\n      var xLeft = point.x + -Math.sin(angle) * offset\n      var yLeft = point.y + Math.cos(angle) * offset\n      riverPointsLeft.push({scX: xLeft, scY: yLeft})\n      var xRight = point.x + Math.sin(angle) * offset\n      var yRight = point.y + -Math.cos(angle) * offset\n      riverPointsRight.unshift({scX: xRight, scY: yRight})\n    }\n\n    var point = river.node().getPointAtLength(riverLength)\n    var from = river.node().getPointAtLength(riverLength - 0.1)\n    var angle = Math.atan2(from.y - point.y, from.x - point.x)\n    var offset = (Math.atan(Math.pow(riverLength, 2) / widening) / 2 * width) + extraOffset\n    var xLeft = point.x + -Math.sin(angle) * offset\n    var yLeft = point.y + Math.cos(angle) * offset\n    riverPointsLeft.push({scX: xLeft, scY: yLeft})\n    var xRight = point.x + Math.sin(angle) * offset\n    var yRight = point.y + -Math.cos(angle) * offset\n    riverPointsRight.unshift({scX: xRight, scY: yRight})\n\n    river.remove()\n    // generate path and return\n    const right = lineGen(riverPointsRight)\n    let left = lineGen(riverPointsLeft)\n    left = left.substring(left.indexOf('C'))\n    return round(right + left, 2)\n  }\n\n  // add lakes on depressed points on river course\n  function addLakes() {\n    console.time('addLakes')\n    let smallLakes = 0\n    for (let i = 0; i < land.length; i++) {\n      // elavate all big lakes\n      if (land[i].lake === 1) {\n        land[i].height = 19\n        land[i].ctype = -1\n      }\n      // define eligible small lakes\n      if (land[i].lake === 2 && smallLakes < 100) {\n        if (land[i].river !== undefined) {\n          land[i].height = 19\n          land[i].ctype = -1\n          land[i].fn = -1\n          smallLakes++\n        } else {\n          land[i].lake = undefined\n          land[i].neighbors.forEach(function(n) {\n            if (cells[n].lake !== 1 && cells[n].river !== undefined) {\n              cells[n].lake = 2\n              cells[n].height = 19\n              cells[n].ctype = -1\n              cells[n].fn = -1\n              smallLakes++\n            } else if (cells[n].lake === 2) {\n              cells[n].lake = undefined\n            }\n          })\n        }\n      }\n    }\n    console.log('small lakes: ' + smallLakes)\n\n    // mark small lakes\n    let unmarked = $.grep(land, function(e) {return e.fn === -1})\n    while (unmarked.length) {\n      let fn = -1, queue = [unmarked[0].index], lakeCells = []\n      unmarked[0].session = 'addLakes'\n      while (queue.length) {\n        const q = queue.pop()\n        lakeCells.push(q)\n        if (cells[q].fn !== -1) fn = cells[q].fn\n        cells[q].neighbors.forEach(function(e) {\n          if (cells[e].lake && cells[e].session !== 'addLakes') {\n            cells[e].session = 'addLakes'\n            queue.push(e)\n          }\n        })\n      }\n      if (fn === -1) {\n        fn = features.length\n        features.push({i: fn, land: false, border: false})\n      }\n      lakeCells.forEach(function(c) {cells[c].fn = fn})\n      unmarked = $.grep(land, function(e) {return e.fn === -1})\n    }\n\n    land = $.grep(cells, function(e) {return e.height >= 20})\n    console.timeEnd('addLakes')\n  }\n\n  function editLabel() {\n    if (customization) return\n\n    unselect()\n    closeDialogs('#labelEditor, .stable')\n    elSelected =\n      d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true)\n\n    // update group parameters\n    let group = d3.select(this.parentNode)\n    updateGroupOptions()\n    labelGroupSelect.value = group.attr('id')\n    labelFontSelect.value = FONTS.indexOf(group.attr('data-font'))\n    labelSize.value = group.attr('data-size')\n    labelColor.value = toHEX(group.attr('fill'))\n    labelOpacity.value = group.attr('opacity')\n    labelText.value = elSelected.text()\n    const tr = parseTransform(elSelected.attr('transform'))\n    labelAngle.value = tr[2]\n    labelAngleValue.innerHTML = Math.abs(+tr[2]) + '°'\n\n    $('#labelEditor').dialog({\n      title: 'Edit Label: ' + labelText.value,\n      minHeight: 30, width: 'auto', maxWidth: 275, resizable: false,\n      position: {my: 'center top+10', at: 'bottom', of: this},\n      close: unselect\n    })\n\n    if (modules.editLabel) return\n    modules.editLabel = true\n\n    loadDefaultFonts()\n\n    function updateGroupOptions() {\n      labelGroupSelect.innerHTML = ''\n      labels.selectAll('g:not(#burgLabels)').each(function(d) {\n        if (this.parentNode.id === 'burgLabels') return\n        let id = d3.select(this).attr('id')\n        let opt = document.createElement('option')\n        opt.value = opt.innerHTML = id\n        labelGroupSelect.add(opt)\n      })\n    }\n\n    $('#labelGroupButton').click(function() {\n      $('#labelEditor > button').not(this).toggle()\n      $('#labelGroupButtons').toggle()\n    })\n\n    // on group change\n    document.getElementById('labelGroupSelect').addEventListener('change', function() {\n      document.getElementById(this.value).appendChild(elSelected.remove().node())\n    })\n\n    // toggle inputs to declare a new group\n    document.getElementById('labelGroupNew').addEventListener('click', function() {\n      if ($('#labelGroupInput').css('display') === 'none') {\n        $('#labelGroupInput').css('display', 'inline-block')\n        $('#labelGroupSelect').css('display', 'none')\n        labelGroupInput.focus()\n      } else {\n        $('#labelGroupSelect').css('display', 'inline-block')\n        $('#labelGroupInput').css('display', 'none')\n      }\n    })\n\n    // toggle inputs to select a group\n    document.getElementById('labelExternalFont').addEventListener('click', function() {\n      if ($('#labelFontInput').css('display') === 'none') {\n        $('#labelFontInput').css('display', 'inline-block')\n        $('#labelFontSelect').css('display', 'none')\n        labelFontInput.focus()\n      } else {\n        $('#labelFontSelect').css('display', 'inline-block')\n        $('#labelFontInput').css('display', 'none')\n      }\n    })\n\n    // on new group creation\n    document.getElementById('labelGroupInput').addEventListener('change', function() {\n      if (!this.value) {\n        tip('Please provide a valid group name')\n        return\n      }\n      let group = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '')\n      if (Number.isFinite(+group.charAt(0))) group = 'g' + group\n      // if el with this id exists, add size to id\n      while (labels.selectAll('#' + group).size()) {group += '_new'}\n      createNewLabelGroup(group)\n    })\n\n    function createNewLabelGroup(g) {\n      let group = elSelected.node().parentNode.cloneNode(false)\n      let groupNew = labels.append(f => group).attr('id', g)\n      groupNew.append(f => elSelected.remove().node())\n      updateGroupOptions()\n      $('#labelGroupSelect, #labelGroupInput').toggle()\n      labelGroupInput.value = ''\n      labelGroupSelect.value = g\n      updateLabelGroups()\n    }\n\n    // remove label group on click\n    document.getElementById('labelGroupRemove').addEventListener('click', function() {\n      let group = d3.select(elSelected.node().parentNode)\n      let id = group.attr('id')\n      let count = group.selectAll('text').size()\n      // remove group with < 2 label without ask\n      if (count < 2) {\n        removeAllLabelsInGroup(id)\n        $('#labelEditor').dialog('close')\n        return\n      }\n      alertMessage.innerHTML =\n        'Are you sure you want to remove all labels (' + count + ') of that group?'\n      $('#alert').dialog({\n        resizable: false, title: 'Remove label group',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            removeAllLabelsInGroup(id)\n            $('#labelEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    $('#labelTextButton').click(function() {\n      $('#labelEditor > button').not(this).toggle()\n      $('#labelTextButtons').toggle()\n    })\n\n    // on label text change\n    document.getElementById('labelText').addEventListener('input', function() {\n      if (!this.value) {\n        tip(\n          'Name should not be blank, set opacity to 0 to hide label or click remove button to delete')\n        return\n      }\n      // change Label text\n      if (elSelected.select('textPath').size()) elSelected.select('textPath').text(this.value)\n      else elSelected.text(this.value)\n      $('div[aria-describedby=\\'labelEditor\\'] .ui-dialog-title').text('Edit Label: ' + this.value)\n      // check if label is a country name\n      let id = elSelected.attr('id') || ''\n      if (id.includes('regionLabel')) {\n        let state = +elSelected.attr('id').slice(11)\n        states[state].name = this.value\n      }\n    })\n\n    // generate a random country name\n    document.getElementById('labelTextRandom').addEventListener('click', function() {\n      let name = elSelected.text()\n      let id = elSelected.attr('id') || ''\n      if (id.includes('regionLabel')) {\n        // label is a country name\n        let state = +elSelected.attr('id').slice(11)\n        name = generateStateName(state.i)\n        states[state].name = name\n      } else {\n        // label is not a country name, use random culture\n        let c = elSelected.node().getBBox()\n        let closest = cultureTree.find((c.x + c.width / 2), (c.y + c.height / 2))\n        let culture = Math.floor(Math.random() * cultures.length)\n        name = generateName(culture)\n      }\n      labelText.value = name\n      $('div[aria-describedby=\\'labelEditor\\'] .ui-dialog-title').text('Edit Label: ' + name)\n      // change Label text\n      if (elSelected.select('textPath').size()) elSelected.select('textPath').text(name)\n      else elSelected.text(name)\n    })\n\n    $('#labelFontButton').click(function() {\n      $('#labelEditor > button').not(this).toggle()\n      $('#labelFontButtons').toggle()\n    })\n\n    // on label font change\n    document.getElementById('labelFontSelect').addEventListener('change', function() {\n      let group = elSelected.node().parentNode\n      let font = FONTS[this.value].split(':')[0].replace(/\\+/g, ' ')\n      group.setAttribute('font-family', font)\n      group.setAttribute('data-font', FONTS[this.value])\n    })\n\n    // on adding custom font\n    document.getElementById('labelFontInput').addEventListener('change', function() {\n      fetchFonts(this.value).then(fetched => {\n        if (!fetched) return\n        labelExternalFont.click()\n        labelFontInput.value = ''\n        if (fetched === 1) $('#labelFontSelect').val(FONTS.length - 1).change()\n      })\n    })\n\n    // on label size input\n    document.getElementById('labelSize').addEventListener('input', function() {\n      let group = elSelected.node().parentNode\n      let size = +this.value\n      group.setAttribute('data-size', size)\n      group.setAttribute('font-size', _.round((size + (size / scale)) / 2, 2))\n    })\n\n    $('#labelStyleButton').click(function() {\n      $('#labelEditor > button').not(this).toggle()\n      $('#labelStyleButtons').toggle()\n    })\n\n    // on label fill color input\n    document.getElementById('labelColor').addEventListener('input', function() {\n      let group = elSelected.node().parentNode\n      group.setAttribute('fill', this.value)\n    })\n\n    // on label opacity input\n    document.getElementById('labelOpacity').addEventListener('input', function() {\n      let group = elSelected.node().parentNode\n      group.setAttribute('opacity', this.value)\n    })\n\n    $('#labelAngleButton').click(function() {\n      $('#labelEditor > button').not(this).toggle()\n      $('#labelAngleButtons').toggle()\n    })\n\n    // on label angle input\n    document.getElementById('labelAngle').addEventListener('input', function() {\n      const tr = parseTransform(elSelected.attr('transform'))\n      labelAngleValue.innerHTML = Math.abs(+this.value) + '°'\n      const c = elSelected.node().getBBox()\n      const angle = +this.value\n      const transform = `translate(${tr[0]},${tr[1]}) rotate(${angle} ${(c.x + c.width / 2)} ${(c.y + c.height / 2)})`\n      elSelected.attr('transform', transform)\n    })\n\n    // display control points to curve label (place on path)\n    document.getElementById('labelCurve').addEventListener('click', function() {\n      let c = elSelected.node().getBBox()\n      let cx = c.x + c.width / 2, cy = c.y + c.height / 2\n\n      if (!elSelected.select('textPath').size()) {\n        let id = elSelected.attr('id')\n        let pathId = '#textPath_' + id\n        let path = `M${cx - c.width},${cy} q${c.width},0 ${c.width * 2},0`\n        let text = elSelected.text(), x = elSelected.attr('x'), y = elSelected.attr('y')\n        elSelected.text(null).attr('data-x', x).attr('data-y', y).attr('x', null).attr('y', null)\n        defs.append('path').attr('id', 'textPath_' + id).attr('d', path)\n        elSelected.append('textPath').attr('href', pathId).attr('startOffset', '50%').text(text)\n      }\n\n      if (!debug.select('circle').size()) {\n        debug.append('circle').attr('id', 'textPathControl').attr('r', 1.6)\n             .attr('cx', cx).attr('cy', cy)\n             .attr('transform', elSelected.attr('transform') || null)\n             .call(d3.drag().on('start', textPathControlDrag))\n      }\n    })\n\n    // drag textPath controle point to curve the label\n    function textPathControlDrag() {\n      let textPath = defs.select('#textPath_' + elSelected.attr('id'))\n      let path = textPath.attr('d').split(' ')\n      let M = path[0].split(',')\n      let q = path[1].split(',') // +q[1] to get qy - the only changeble value\n      let y = d3.event.y\n\n      d3.event.on('drag', function() {\n        let dy = d3.event.y - y\n        let total = +q[1] + dy * 8\n        d3.select(this).attr('cy', d3.event.y)\n        textPath.attr('d', `${M[0]},${+M[1] - dy} ${q[0]},${total} ${path[2]}`)\n      })\n    }\n\n    // cancel label curvature\n    document.getElementById('labelCurveCancel').addEventListener('click', function() {\n      if (!elSelected.select('textPath').size()) return\n      let text = elSelected.text(), x = elSelected.attr('data-x'), y = elSelected.attr('data-y')\n      elSelected.text()\n      elSelected.attr('x', x).attr('y', y).attr('data-x', null).attr('data-y', null).text(text)\n      defs.select('#textPath_' + elSelected.attr('id')).remove()\n      debug.select('circle').remove()\n    })\n\n    // open legendsEditor\n    document.getElementById('labelLegend').addEventListener('click', function() {\n      let id = elSelected.attr('id')\n      let name = elSelected.text()\n      editLegends(id, name)\n    })\n\n    // copy label on click\n    document.getElementById('labelCopy').addEventListener('click', function() {\n      let group = d3.select(elSelected.node().parentNode)\n      copy = group.append(f => elSelected.node().cloneNode(true))\n      let id = 'label' + Date.now().toString().slice(7)\n      copy.attr('id', id).attr('class', null).on('click', editLabel)\n      let shift = +group.attr('font-size') + 1\n      if (copy.select('textPath').size()) {\n        let path = defs.select('#textPath_' + elSelected.attr('id')).attr('d')\n        let textPath = defs.append('path').attr('id', 'textPath_' + id)\n        copy.select('textPath').attr('href', '#textPath_' + id)\n        let pathArray = path.split(' ')\n        let x = +pathArray[0].split(',')[0].slice(1)\n        let y = +pathArray[0].split(',')[1]\n        textPath.attr('d', `M${x - shift},${y - shift} ${pathArray[1]} ${pathArray[2]}`)\n        shift\n      } else {\n        let x = +elSelected.attr('x') - shift\n        let y = +elSelected.attr('y') - shift\n        while (group.selectAll('text[x=\\'' + x + '\\']').size()) {\n          x -= shift\n          y -= shift\n        }\n        copy.attr('x', x).attr('y', y)\n      }\n    })\n\n    // remove label on click\n    document.getElementById('labelRemoveSingle').addEventListener('click', function() {\n      alertMessage.innerHTML = 'Are you sure you want to remove the label?'\n      $('#alert').dialog({\n        resizable: false, title: 'Remove label',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            elSelected.remove()\n            defs.select('#textPath_' + elSelected.attr('id')).remove()\n            $('#labelEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  function editRiver() {\n    if (customization) return\n    if (elSelected) {\n      const self = d3.select(this).attr('id') === elSelected.attr('id')\n      const point = d3.mouse(this)\n      if (elSelected.attr('data-river') === 'new') {\n        addRiverPoint([point[0], point[1]])\n        completeNewRiver()\n        return\n      } else if (self) {\n        riverAddControlPoint(point)\n        return\n      }\n    }\n\n    unselect()\n    closeDialogs('#riverEditor, .stable')\n    elSelected = d3.select(this)\n    elSelected.call(d3.drag().on('start', riverDrag))\n\n    const tr = parseTransform(elSelected.attr('transform'))\n    riverAngle.value = tr[2]\n    riverAngleValue.innerHTML = Math.abs(+tr[2]) + '°'\n    riverScale.value = tr[5]\n    riverWidthInput.value = +elSelected.attr('data-width')\n    riverIncrement.value = +elSelected.attr('data-increment')\n\n    $('#riverEditor').dialog({\n      title: 'Edit River',\n      minHeight: 30, width: 'auto', resizable: false,\n      position: {my: 'center top+20', at: 'top', of: d3.event},\n      close: function() {\n        if ($('#riverNew').hasClass('pressed')) completeNewRiver()\n        unselect()\n      }\n    })\n\n    if (!debug.select('.controlPoints').size()) debug.append('g').attr('class', 'controlPoints')\n    riverDrawPoints()\n\n    if (modules.editRiver) {return}\n    modules.editRiver = true\n\n    function riverAddControlPoint(point) {\n      let dists = []\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const x = +d3.select(this).attr('cx')\n        const y = +d3.select(this).attr('cy')\n        dists.push(Math.hypot(point[0] - x, point[1] - y))\n      })\n      let index = dists.length\n      if (dists.length > 1) {\n        const sorted = dists.slice(0).sort(function(a, b) {return a - b})\n        const closest = dists.indexOf(sorted[0])\n        const next = dists.indexOf(sorted[1])\n        if (closest <= next) {index = closest + 1} else {index = next + 1}\n      }\n      const before = ':nth-child(' + (index + 1) + ')'\n      debug.select('.controlPoints').insert('circle', before)\n           .attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35)\n           .call(d3.drag().on('drag', riverPointDrag))\n           .on('click', function(d) {\n             $(this).remove()\n             redrawRiver()\n           })\n      redrawRiver()\n    }\n\n    function riverDrawPoints() {\n      const node = elSelected.node()\n      // river is a polygon, so divide length by 2 to get course length\n      const l = node.getTotalLength() / 2\n      const parts = (l / 5) >> 0 // number of points\n      let inc = l / parts // increment\n      if (inc === Infinity) {inc = l} // 2 control points for short rivers\n      // draw control points\n      for (let i = l, c = l; i > 0; i -= inc, c += inc) {\n        const p1 = node.getPointAtLength(i)\n        const p2 = node.getPointAtLength(c)\n        const p = [(p1.x + p2.x) / 2, (p1.y + p2.y) / 2]\n        addRiverPoint(p)\n      }\n      // last point should be accurate\n      const lp1 = node.getPointAtLength(0)\n      const lp2 = node.getPointAtLength(l * 2)\n      const p = [(lp1.x + lp2.x) / 2, (lp1.y + lp2.y) / 2]\n      addRiverPoint(p)\n    }\n\n    function addRiverPoint(point) {\n      debug.select('.controlPoints').append('circle')\n           .attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35)\n           .call(d3.drag().on('drag', riverPointDrag))\n           .on('click', function(d) {\n             $(this).remove()\n             redrawRiver()\n           })\n    }\n\n    function riverPointDrag() {\n      d3.select(this).attr('cx', d3.event.x).attr('cy', d3.event.y)\n      redrawRiver()\n    }\n\n    function riverDrag() {\n      const x = d3.event.x, y = d3.event.y\n      const tr = parseTransform(elSelected.attr('transform'))\n      d3.event.on('drag', function() {\n        let xc = d3.event.x, yc = d3.event.y\n        let transform = `translate(${(+tr[0] + xc - x)},${(+tr[1] + yc - y)}) rotate(${tr[2]} ${tr[3]} ${tr[4]}) scale(${tr[5]})`\n        elSelected.attr('transform', transform)\n        debug.select('.controlPoints').attr('transform', transform)\n      })\n    }\n\n    function redrawRiver() {\n      let points = []\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const el = d3.select(this)\n        points.push([+el.attr('cx'), +el.attr('cy')])\n      })\n      const width = +riverWidthInput.value\n      const increment = +riverIncrement.value\n      const d = drawRiverSlow(points, width, increment)\n      elSelected.attr('d', d)\n    }\n\n    $('#riverWidthInput, #riverIncrement').change(function() {\n      const width = +riverWidthInput.value\n      const increment = +riverIncrement.value\n      elSelected.attr('data-width', width).attr('data-increment', increment)\n      redrawRiver()\n    })\n\n    $('#riverRegenerate').click(function() {\n      let points = [], amended = [], x, y, p1, p2\n      const node = elSelected.node()\n      const l = node.getTotalLength() / 2\n      const parts = (l / 8) >> 0 // number of points\n      let inc = l / parts // increment\n      if (inc === Infinity) {inc = l} // 2 control points for short rivers\n      for (let i = l, e = l; i > 0; i -= inc, e += inc) {\n        p1 = node.getPointAtLength(i)\n        p2 = node.getPointAtLength(e)\n        x = (p1.x + p2.x) / 2, y = (p1.y + p2.y) / 2\n        points.push([x, y])\n      }\n      // last point should be accurate\n      p1 = node.getPointAtLength(0)\n      p2 = node.getPointAtLength(l * 2)\n      x = (p1.x + p2.x) / 2, y = (p1.y + p2.y) / 2\n      points.push([x, y])\n      // amend points\n      const rndFactor = 0.3 + Math.random() * 1.4 // random factor in range 0.2-1.8\n      for (let i = 0; i < points.length; i++) {\n        x = points[i][0], y = points[i][1]\n        amended.push([x, y])\n        // add additional semi-random point\n        if (i + 1 < points.length) {\n          const x2 = points[i + 1][0], y2 = points[i + 1][1]\n          let side = Math.random() > 0.5 ? 1 : -1\n          const angle = Math.atan2(y2 - y, x2 - x)\n          const serpentine = 2 / (i + 1)\n          const meandr = serpentine + 0.3 + Math.random() * rndFactor\n          x = (x + x2) / 2, y = (y + y2) / 2\n          x += -Math.sin(angle) * meandr * side\n          y += Math.cos(angle) * meandr * side\n          amended.push([x, y])\n        }\n      }\n      const width = +riverWidthInput.value * 0.6 + Math.random()\n      const increment = +riverIncrement.value * 0.9 + Math.random() * 0.2\n      riverWidthInput.value = width\n      riverIncrement.value = increment\n      elSelected.attr('data-width', width).attr('data-increment', increment)\n      const d = drawRiverSlow(amended, width, increment)\n      elSelected.attr('d', d).attr('data-width', width).attr('data-increment', increment)\n      debug.select('.controlPoints').selectAll('*').remove()\n      amended.map(function(p) {addRiverPoint(p)})\n    })\n\n    $('#riverAngle').on('input', function() {\n      const tr = parseTransform(elSelected.attr('transform'))\n      riverAngleValue.innerHTML = Math.abs(+this.value) + '°'\n      const c = elSelected.node().getBBox()\n      const angle = +this.value, scale = +tr[5]\n      const transform = `translate(${tr[0]},${tr[1]}) rotate(${angle} ${(c.x + c.width / 2) * scale} ${(c.y + c.height / 2) * scale}) scale(${scale})`\n      elSelected.attr('transform', transform)\n      debug.select('.controlPoints').attr('transform', transform)\n    })\n\n    $('#riverReset').click(function() {\n      elSelected.attr('transform', '')\n      debug.select('.controlPoints').attr('transform', '')\n      riverAngle.value = 0\n      riverAngleValue.innerHTML = '0°'\n      riverScale.value = 1\n    })\n\n    $('#riverScale').change(function() {\n      const tr = parseTransform(elSelected.attr('transform'))\n      const scaleOld = +tr[5], scale = +this.value\n      const c = elSelected.node().getBBox()\n      const cx = c.x + c.width / 2, cy = c.y + c.height / 2\n      const trX = +tr[0] + cx * (scaleOld - scale)\n      const trY = +tr[1] + cy * (scaleOld - scale)\n      const scX = +tr[3] * scale / scaleOld\n      const scY = +tr[4] * scale / scaleOld\n      const transform = `translate(${trX},${trY}) rotate(${tr[2]} ${scX} ${scY}) scale(${scale})`\n      elSelected.attr('transform', transform)\n      debug.select('.controlPoints').attr('transform', transform)\n    })\n\n    $('#riverNew').click(function() {\n      if ($(this).hasClass('pressed')) {\n        completeNewRiver()\n      } else {\n        // enter creation mode\n        $('.pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        if (elSelected) elSelected.call(d3.drag().on('drag', null))\n        debug.select('.controlPoints').selectAll('*').remove()\n        viewbox.style('cursor', 'crosshair').on('click', newRiverAddPoint)\n      }\n    })\n\n    function newRiverAddPoint() {\n      const point = d3.mouse(this)\n      addRiverPoint([point[0], point[1]])\n      if (!elSelected || elSelected.attr('data-river') !== 'new') {\n        const id = +$('#rivers > path').last().attr('id').slice(5) + 1\n        elSelected = rivers.append('path').attr('data-river', 'new').attr('id', 'river' + id)\n                           .attr('data-width', 2).attr('data-increment', 1)\n                           .on('click', completeNewRiver)\n      } else {\n        redrawRiver()\n        let cell = diagram.find(point[0], point[1]).index\n        let f = cells[cell].fn\n        let ocean = !features[f].land && features[f].border\n        if (ocean && debug.select('.controlPoints').selectAll('circle')\n                          .size() > 5) completeNewRiver()\n      }\n    }\n\n    function completeNewRiver() {\n      $('#riverNew').removeClass('pressed')\n      restoreDefaultEvents()\n      if (!elSelected || elSelected.attr('data-river') !== 'new') return\n      redrawRiver()\n      elSelected.attr('data-river', '')\n      elSelected.call(d3.drag().on('start', riverDrag)).on('click', editRiver)\n      const r = +elSelected.attr('id').slice(5)\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const x = +d3.select(this).attr('cx')\n        const y = +d3.select(this).attr('cy')\n        const cell = diagram.find(x, y, 3)\n        if (!cell) return\n        if (cells[cell.index].river === undefined) cells[cell.index].river = r\n      })\n      unselect()\n      debug.append('g').attr('class', 'controlPoints')\n    }\n\n    $('#riverCopy').click(function() {\n      const tr = parseTransform(elSelected.attr('transform'))\n      const d = elSelected.attr('d')\n      let x = 2, y = 2\n      let transform = `translate(${tr[0] - x},${tr[1] - y}) rotate(${tr[2]} ${tr[3]} ${tr[4]}) scale(${tr[5]})`\n      while (rivers.selectAll('[transform=\\'' + transform + '\\'][d=\\'' + d + '\\']').size() > 0) {\n        x += 2\n        y += 2\n        transform =\n          `translate(${tr[0] - x},${tr[1] - y}) rotate(${tr[2]} ${tr[3]} ${tr[4]}) scale(${tr[5]})`\n      }\n      const river = +$('#rivers > path').last().attr('id').slice(5) + 1\n      rivers.append('path').attr('d', d)\n            .attr('transform', transform)\n            .attr('id', 'river' + river).on('click', editRiver)\n            .attr('data-width', elSelected.attr('data-width'))\n            .attr('data-increment', elSelected.attr('data-increment'))\n      unselect()\n    })\n\n    // open legendsEditor\n    document.getElementById('riverLegend').addEventListener('click', function() {\n      let id = elSelected.attr('id')\n      editLegends(id, id)\n    })\n\n    $('#riverRemove').click(function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the river?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove river',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            const river = +elSelected.attr('id').slice(5)\n            const avPrec = _.round(precInput.value / Math.sqrt(cells.length), 2)\n            land.map(function(l) {\n              if (l.river === river) {\n                l.river = undefined\n                l.flux = avPrec\n              }\n            })\n            elSelected.remove()\n            unselect()\n            $('#riverEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n  }\n\n  function editRoute() {\n    if (customization) {return}\n    if (elSelected) {\n      const self = d3.select(this).attr('id') === elSelected.attr('id')\n      const point = d3.mouse(this)\n      if (elSelected.attr('data-route') === 'new') {\n        addRoutePoint({x: point[0], y: point[1]})\n        completeNewRoute()\n        return\n      } else if (self) {\n        routeAddControlPoint(point)\n        return\n      }\n    }\n\n    unselect()\n    closeDialogs('#routeEditor, .stable')\n\n    if (this && this !== window) {\n      elSelected = d3.select(this)\n      if (!debug.select('.controlPoints').size()) debug.append('g')\n                                                       .attr('class', 'controlPoints')\n      routeDrawPoints()\n      routeUpdateGroups()\n      let routeType = d3.select(this.parentNode).attr('id')\n      routeGroup.value = routeType\n\n      $('#routeEditor').dialog({\n        title: 'Edit Route',\n        minHeight: 30, width: 'auto', resizable: false,\n        position: {my: 'center top+20', at: 'top', of: d3.event},\n        close: function() {\n          if ($('#addRoute').hasClass('pressed')) completeNewRoute()\n          if ($('#routeSplit').hasClass('pressed')) $('#routeSplit').removeClass('pressed')\n          unselect()\n        }\n      })\n    } else {elSelected = null}\n\n    if (modules.editRoute) {return}\n    modules.editRoute = true\n\n    function routeAddControlPoint(point) {\n      let dists = []\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const x = +d3.select(this).attr('cx')\n        const y = +d3.select(this).attr('cy')\n        dists.push(Math.hypot(point[0] - x, point[1] - y))\n      })\n      let index = dists.length\n      if (dists.length > 1) {\n        const sorted = dists.slice(0).sort(function(a, b) {return a - b})\n        const closest = dists.indexOf(sorted[0])\n        const next = dists.indexOf(sorted[1])\n        if (closest <= next) {index = closest + 1} else {index = next + 1}\n      }\n      const before = ':nth-child(' + (index + 1) + ')'\n      debug.select('.controlPoints').insert('circle', before)\n           .attr('cx', point[0]).attr('cy', point[1]).attr('r', 0.35)\n           .call(d3.drag().on('drag', routePointDrag))\n           .on('click', function(d) {\n             $(this).remove()\n             routeRedraw()\n           })\n      routeRedraw()\n    }\n\n    function routeDrawPoints() {\n      if (!elSelected.size()) return\n      const node = elSelected.node()\n      const l = node.getTotalLength()\n      const parts = (l / 5) >> 0 // number of points\n      let inc = l / parts // increment\n      if (inc === Infinity) inc = l // 2 control points for short routes\n      // draw control points\n      for (let i = 0; i <= l; i += inc) {\n        const p = node.getPointAtLength(i)\n        addRoutePoint(p)\n      }\n      // convert length to distance\n      routeLength.innerHTML = Math.round(l * distanceScale.value) + ' ' + distanceUnit.value\n    }\n\n    function addRoutePoint(point) {\n      const controlPoints = debug.select('.controlPoints').size()\n                            ? debug.select('.controlPoints')\n                            : debug.append('g').attr('class', 'controlPoints')\n      controlPoints.append('circle')\n                   .attr('cx', point.x).attr('cy', point.y).attr('r', 0.35)\n                   .call(d3.drag().on('drag', routePointDrag))\n                   .on('click', function(d) {\n                     if ($('#routeSplit').hasClass('pressed')) {\n                       routeSplitInPoint(this)\n                     } else {\n                       $(this).remove()\n                       routeRedraw()\n                     }\n                   })\n    }\n\n    function routePointDrag() {\n      d3.select(this).attr('cx', d3.event.x).attr('cy', d3.event.y)\n      routeRedraw()\n    }\n\n    function routeRedraw() {\n      let points = []\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const el = d3.select(this)\n        points.push({scX: +el.attr('cx'), scY: +el.attr('cy')})\n      })\n      lineGen.curve(d3.curveCatmullRom.alpha(0.1))\n      elSelected.attr('d', lineGen(points))\n      // get route distance\n      const l = elSelected.node().getTotalLength()\n      routeLength.innerHTML = Math.round(l * distanceScale.value) + ' ' + distanceUnit.value\n    }\n\n    function addNewRoute() {\n      let routeType = elSelected && elSelected.node() ? elSelected.node().parentNode.id :\n                      'searoutes'\n      const group = routes.select('#' + routeType)\n      const id = routeType + '' + group.selectAll('*').size()\n      elSelected =\n        group.append('path').attr('data-route', 'new').attr('id', id).on('click', editRoute)\n      routeUpdateGroups()\n      $('#routeEditor').dialog({\n        title: 'Edit Route', minHeight: 30, width: 'auto', resizable: false,\n        close: function() {\n          if ($('#addRoute').hasClass('pressed')) completeNewRoute()\n          if ($('#routeSplit').hasClass('pressed')) $('#routeSplit').removeClass('pressed')\n          unselect()\n        }\n      })\n    }\n\n    function newRouteAddPoint() {\n      const point = d3.mouse(this)\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n      addRoutePoint({x, y})\n      routeRedraw()\n    }\n\n    function completeNewRoute() {\n      $('#routeNew, #addRoute').removeClass('pressed')\n      restoreDefaultEvents()\n      if (!elSelected.size()) return\n      if (elSelected.attr('data-route') === 'new') {\n        routeRedraw()\n        elSelected.attr('data-route', '')\n        const node = elSelected.node()\n        const l = node.getTotalLength()\n        let pathCells = []\n        for (let i = 0; i <= l; i++) {\n          const p = node.getPointAtLength(i)\n          const cell = diagram.find(p.x, p.y)\n          if (!cell) {return}\n          pathCells.push(cell.index)\n        }\n        const uniqueCells = [...new Set(pathCells)]\n        uniqueCells.map(function(c) {\n          if (cells[c].path !== undefined) {cells[c].path += 1} else {cells[c].path = 1}\n        })\n      }\n      tip('', true)\n    }\n\n    function routeUpdateGroups() {\n      routeGroup.innerHTML = ''\n      routes.selectAll('g').each(function() {\n        const opt = document.createElement('option')\n        opt.value = opt.innerHTML = this.id\n        routeGroup.add(opt)\n      })\n    }\n\n    function routeSplitInPoint(clicked) {\n      const group = d3.select(elSelected.node().parentNode)\n      $('#routeSplit').removeClass('pressed')\n      const points1 = [], points2 = []\n      let points = points1\n      debug.select('.controlPoints').selectAll('circle').each(function() {\n        const el = d3.select(this)\n        points.push({scX: +el.attr('cx'), scY: +el.attr('cy')})\n        if (this === clicked) {\n          points = points2\n          points.push({scX: +el.attr('cx'), scY: +el.attr('cy')})\n        }\n        el.remove()\n      })\n      lineGen.curve(d3.curveCatmullRom.alpha(0.1))\n      elSelected.attr('d', lineGen(points1))\n      const id = routeGroup.value + '' + group.selectAll('*').size()\n      group.append('path').attr('id', id).attr('d', lineGen(points2)).on('click', editRoute)\n      routeDrawPoints()\n    }\n\n    $('#routeGroup').change(function() {\n      $(elSelected.node()).detach().appendTo($('#' + this.value))\n    })\n\n    // open legendsEditor\n    document.getElementById('routeLegend').addEventListener('click', function() {\n      let id = elSelected.attr('id')\n      editLegends(id, id)\n    })\n\n    $('#routeNew').click(function() {\n      if ($(this).hasClass('pressed')) {\n        completeNewRoute()\n      } else {\n        // enter creation mode\n        $('.pressed').removeClass('pressed')\n        $('#routeNew, #addRoute').addClass('pressed')\n        debug.select('.controlPoints').selectAll('*').remove()\n        addNewRoute()\n        viewbox.style('cursor', 'crosshair').on('click', newRouteAddPoint)\n        tip('Click on map to add route point', true)\n      }\n    })\n\n    $('#routeRemove').click(function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the route?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove route',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            elSelected.remove()\n            $('#routeEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  function editIcon() {\n    if (customization) return\n    if (elSelected) if (this.isSameNode(elSelected.node())) return\n\n    unselect()\n    closeDialogs('#iconEditor, .stable')\n    elSelected =\n      d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true)\n\n    // update group parameters\n    const group = d3.select(this.parentNode)\n    iconUpdateGroups()\n    iconGroup.value = group.attr('id')\n    iconFillColor.value = group.attr('fill')\n    iconStrokeColor.value = group.attr('stroke')\n    iconSize.value = group.attr('size')\n    iconStrokeWidth.value = group.attr('stroke-width')\n\n    $('#iconEditor').dialog({\n      title: 'Edit icon: ' + group.attr('id'),\n      minHeight: 30, width: 'auto', resizable: false,\n      position: {my: 'center top+20', at: 'top', of: d3.event},\n      close: unselect\n    })\n\n    if (modules.editIcon) {return}\n    modules.editIcon = true\n\n    $('#iconGroups').click(function() {\n      $('#iconEditor > button').not(this).toggle()\n      $('#iconGroupsSelection').toggle()\n    })\n\n    function iconUpdateGroups() {\n      iconGroup.innerHTML = ''\n      const anchor = group.attr('id').includes('anchor')\n      icons.selectAll('g').each(function(d) {\n        const id = d3.select(this).attr('id')\n        if (id === 'burgs') return\n        if (!anchor && id.includes('anchor')) return\n        if (anchor && !id.includes('anchor')) return\n        const opt = document.createElement('option')\n        opt.value = opt.innerHTML = id\n        iconGroup.add(opt)\n      })\n    }\n\n    $('#iconGroup').change(function() {\n      const newGroup = this.value\n      const to = $('#icons > #' + newGroup)\n      $(elSelected.node()).detach().appendTo(to)\n    })\n\n    $('#iconCopy').click(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const copy = elSelected.node().cloneNode()\n      copy.removeAttribute('data-id') // remove assignment to burg if any\n      const tr = parseTransform(copy.getAttribute('transform'))\n      const shift = 10 / Math.sqrt(scale)\n      let transform = 'translate(' + _.round(tr[0] - shift, 1) + ',' + _.round(tr[1] - shift, 1) + ')'\n      for (let i = 2; group.selectAll(\"[transform='\" + transform + \"']\").size() > 0; i++) {\n        transform =\n          'translate(' + _.round(tr[0] - shift * i, 1) + ',' + _.round(tr[1] - shift * i, 1) + ')'\n      }\n      copy.setAttribute('transform', transform)\n      group.node().insertBefore(copy, null)\n      copy.addEventListener('click', editIcon)\n    })\n\n    $('#iconRemoveGroup').click(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const count = group.selectAll('*').size()\n      if (count < 2) {\n        group.remove()\n        $('#labelEditor').dialog('close')\n        return\n      }\n      const message = 'Are you sure you want to remove all \\'' + iconGroup.value + '\\' icons (' + count + ')?'\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        resizable: false, title: 'Remove icon group',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            group.remove()\n            $('#iconEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    $('#iconColors').click(function() {\n      $('#iconEditor > button').not(this).toggle()\n      $('#iconColorsSection').toggle()\n    })\n\n    $('#iconFillColor').change(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      group.attr('fill', this.value)\n    })\n\n    $('#iconStrokeColor').change(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      group.attr('stroke', this.value)\n    })\n\n    $('#iconSetSize').click(function() {\n      $('#iconEditor > button').not(this).toggle()\n      $('#iconSizeSection').toggle()\n    })\n\n    $('#iconSize').change(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const size = +this.value\n      group.attr('size', size)\n      group.selectAll('*')\n           .each(function() {d3.select(this).attr('width', size).attr('height', size)})\n    })\n\n    $('#iconStrokeWidth').change(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      group.attr('stroke-width', this.value)\n    })\n\n    $('#iconRemove').click(function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the icon?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove icon',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            elSelected.remove()\n            $('#iconEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  function editReliefIcon() {\n    if (customization) return\n    if (elSelected) if (this.isSameNode(elSelected.node())) return\n\n    unselect()\n    closeDialogs('#reliefEditor, .stable')\n    elSelected =\n      d3.select(this).raise().call(d3.drag().on('start', elementDrag)).classed('draggable', true)\n    const group = elSelected.node().parentNode.id\n    reliefGroup.value = group\n\n    let bulkRemoveSection = document.getElementById('reliefBulkRemoveSection')\n    if (bulkRemoveSection.style.display != 'none') reliefBulkRemove.click()\n\n    $('#reliefEditor').dialog({\n      title: 'Edit relief icon',\n      minHeight: 30, width: 'auto', resizable: false,\n      position: {my: 'center top+40', at: 'top', of: d3.event},\n      close: unselect\n    })\n\n    if (modules.editReliefIcon) {return}\n    modules.editReliefIcon = true\n\n    $('#reliefGroups').click(function() {\n      $('#reliefEditor > button').not(this).toggle()\n      $('#reliefGroupsSelection').toggle()\n    })\n\n    $('#reliefGroup').change(function() {\n      const type = this.value\n      const bbox = elSelected.node().getBBox()\n      const cx = bbox.x\n      const cy = bbox.y + bbox.height / 2\n      const cell = diagram.find(cx, cy).index\n      const height = cell !== undefined ? cells[cell].height : 50\n      elSelected.remove()\n      elSelected = addReliefIcon(height / 100, type, cx, cy, cell)\n      elSelected.call(d3.drag().on('start', elementDrag))\n    })\n\n    $('#reliefCopy').click(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const copy = elSelected.node().cloneNode(true)\n      const tr = parseTransform(copy.getAttribute('transform'))\n      const shift = 10 / Math.sqrt(scale)\n      let transform = 'translate(' + _.round(tr[0] - shift, 1) + ',' + _.round(tr[1] - shift, 1) + ')'\n      for (let i = 2; group.selectAll(\"[transform='\" + transform + \"']\").size() > 0; i++) {\n        transform =\n          'translate(' + _.round(tr[0] - shift * i, 1) + ',' + _.round(tr[1] - shift * i, 1) + ')'\n      }\n      copy.setAttribute('transform', transform)\n      group.node().insertBefore(copy, null)\n      copy.addEventListener('click', editReliefIcon)\n    })\n\n    $('#reliefAddfromEditor').click(function() {\n      clickToAdd() // to load on click event function\n      $('#addRelief').click()\n    })\n\n    $('#reliefRemoveGroup').click(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const count = group.selectAll('*').size()\n      if (count < 2) {\n        group.selectAll('*').remove()\n        $('#labelEditor').dialog('close')\n        return\n      }\n      const message = 'Are you sure you want to remove all \\'' + reliefGroup.value + '\\' icons (' + count + ')?'\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        resizable: false, title: 'Remove all icons within group',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            group.selectAll('*').remove()\n            $('#reliefEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    $('#reliefBulkRemove').click(function() {\n      $('#reliefEditor > button').not(this).toggle()\n      let section = document.getElementById('reliefBulkRemoveSection')\n      if (section.style.display === 'none') {\n        section.style.display = 'inline-block'\n        tip('Drag to remove relief icons in radius', true)\n        viewbox.style('cursor', 'crosshair').call(d3.drag().on('drag', dragToRemoveReliefIcons))\n        customization = 5\n      } else {\n        section.style.display = 'none'\n        restoreDefaultEvents()\n        customization = 0\n      }\n    })\n\n    function dragToRemoveReliefIcons() {\n      let point = d3.mouse(this)\n      let cell = diagram.find(point[0], point[1]).index\n      let radius = +reliefBulkRemoveRadius.value\n      let r = Math.round(6 / graphSize * radius, 1)\n      moveCircle(point[0], point[1], r)\n      let selection = defineBrushSelection(cell, radius)\n      if (selection) removeReliefIcons(selection)\n    }\n\n    function removeReliefIcons(selection) {\n      if (selection.length === 0) return\n      selection.map(function(index) {\n        const selected = terrain.selectAll('g').selectAll('g[data-cell=\\'' + index + '\\']')\n        selected.remove()\n      })\n    }\n\n    $('#reliefRemove').click(function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the icon?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove relief icon',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            elSelected.remove()\n            $('#reliefEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  function editBurg() {\n    if (customization) return\n    unselect()\n    closeDialogs('#burgEditor, .stable')\n    elSelected = d3.select(this)\n    const id = +elSelected.attr('data-id')\n    if (id === undefined) return\n    d3.selectAll('[data-id=\\'' + id + '\\']').call(d3.drag().on('start', elementDrag))\n      .classed('draggable', true)\n\n    // update Burg details\n    const type = elSelected.node().parentNode.id\n    const labelGroup = burgLabels.select('#' + type)\n    const iconGroup = burgIcons.select('#' + type)\n    burgNameInput.value = manors[id].name\n    updateBurgsGroupOptions()\n    burgSelectGroup.value = labelGroup.attr('id')\n    burgSelectDefaultFont.value = FONTS.indexOf(labelGroup.attr('data-font'))\n    burgSetLabelSize.value = labelGroup.attr('data-size')\n    burgLabelColorInput.value = toHEX(labelGroup.attr('fill'))\n    burgLabelOpacity.value =\n      labelGroup.attr('opacity') === undefined ? 1 : +labelGroup.attr('opacity')\n    const tr = parseTransform(elSelected.attr('transform'))\n    burgLabelAngle.value = tr[2]\n    burgLabelAngleOutput.innerHTML = Math.abs(+tr[2]) + '°'\n    burgIconSize.value = iconGroup.attr('size')\n    burgIconFillOpacity.value =\n      iconGroup.attr('fill-opacity') === undefined ? 1 : +iconGroup.attr('fill-opacity')\n    burgIconFillColor.value = iconGroup.attr('fill')\n    burgIconStrokeWidth.value = iconGroup.attr('stroke-width')\n    burgIconStrokeOpacity.value =\n      iconGroup.attr('stroke-opacity') === undefined ? 1 : +iconGroup.attr('stroke-opacity')\n    burgIconStrokeColor.value = iconGroup.attr('stroke')\n    const cell = cells[manors[id].cell]\n    if (cell.region !== 'neutral' && cell.region !== undefined) {\n      burgToggleCapital.disabled = false\n      const capital = states[manors[id].region] ?\n                      id === states[manors[id].region].capital ? 1 : 0 : 0\n      d3.select('#burgToggleCapital').classed('pressed', capital)\n    } else {\n      burgToggleCapital.disabled = true\n      d3.select('#burgToggleCapital').classed('pressed', false)\n    }\n    d3.select('#burgTogglePort').classed('pressed', cell.port !== undefined)\n    burgPopulation.value = manors[id].population\n    burgPopulationFriendly.value =\n      Math.round(manors[id].population * urbanization.value * populationRate.value * 1000)\n\n    $('#burgEditor').dialog({\n      title: 'Edit Burg: ' + manors[id].name,\n      minHeight: 30, width: 'auto', resizable: false,\n      position: {my: 'center top+40', at: 'top', of: d3.event},\n      close: function() {\n        d3.selectAll('[data-id=\\'' + id + '\\']').call(d3.drag().on('drag', null))\n          .classed('draggable', false)\n        elSelected = null\n      }\n    })\n\n    if (modules.editBurg) return\n    modules.editBurg = true\n\n    loadDefaultFonts()\n\n    function updateBurgsGroupOptions() {\n      burgSelectGroup.innerHTML = ''\n      burgIcons.selectAll('g').each(function(d) {\n        const opt = document.createElement('option')\n        opt.value = opt.innerHTML = d3.select(this).attr('id')\n        burgSelectGroup.add(opt)\n      })\n    }\n\n    $('#burgEditor > button').not('#burgAddfromEditor').not('#burgRelocate').not('#burgRemove')\n                             .click(function() {\n                               if ($(this).next().is(':visible')) {\n                                 $('#burgEditor > button').show()\n                                 $(this).next('div').hide()\n                               } else {\n                                 $('#burgEditor > *').not(this).hide()\n                                 $(this).next('div').show()\n                               }\n                             })\n\n    $('#burgEditor > div > button').click(function() {\n      if ($(this).next().is(':visible')) {\n        $('#burgEditor > div > button').show()\n        $(this).parent().prev().show()\n        $(this).next('div').hide()\n      } else {\n        $('#burgEditor > div > button').not(this).hide()\n        $(this).parent().prev().hide()\n        $(this).next('div').show()\n      }\n    })\n\n    $('#burgSelectGroup').change(function() {\n      const id = +elSelected.attr('data-id')\n      const g = this.value\n      moveBurgToGroup(id, g)\n    })\n\n    $('#burgInputGroup').change(function() {\n      let newGroup = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '')\n      if (Number.isFinite(+newGroup.charAt(0))) newGroup = 'g' + newGroup\n      if (burgLabels.select('#' + newGroup).size()) {\n        tip('The group \"' + newGroup + '\" is already exists')\n        return\n      }\n      burgInputGroup.value = ''\n      // clone old group assigning new id\n      const id = elSelected.node().parentNode.id\n      const l = burgLabels.select('#' + id).node().cloneNode(false)\n      l.id = newGroup\n      const i = burgIcons.select('#' + id).node().cloneNode(false)\n      i.id = newGroup\n      burgLabels.node().insertBefore(l, null)\n      burgIcons.node().insertBefore(i, null)\n      // select new group\n      const opt = document.createElement('option')\n      opt.value = opt.innerHTML = newGroup\n      burgSelectGroup.add(opt)\n      $('#burgSelectGroup').val(newGroup).change()\n      $('#burgSelectGroup, #burgInputGroup').toggle()\n      updateLabelGroups()\n    })\n\n    $('#burgAddGroup').click(function() {\n      if ($('#burgInputGroup').css('display') === 'none') {\n        $('#burgInputGroup').css('display', 'inline-block')\n        $('#burgSelectGroup').css('display', 'none')\n        burgInputGroup.focus()\n      } else {\n        $('#burgSelectGroup').css('display', 'inline-block')\n        $('#burgInputGroup').css('display', 'none')\n      }\n    })\n\n    $('#burgRemoveGroup').click(function() {\n      const group = d3.select(elSelected.node().parentNode)\n      const type = group.attr('id')\n      const id = +elSelected.attr('data-id')\n      const count = group.selectAll('*').size()\n      const message = 'Are you sure you want to remove all Burgs (' + count + ') of that group?'\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        resizable: false, title: 'Remove Burgs',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            group.selectAll('*').each(function(d) {\n              const id = +d3.select(this).attr('data-id')\n              if (id === undefined) return\n              const cell = manors[id].cell\n              const state = manors[id].region\n              if (states[state]) {\n                if (states[state].capital === id) states[state].capital = 'select'\n                states[state].burgs--\n              }\n              manors[id].region = 'removed'\n              cells[cell].manor = undefined\n            })\n            burgLabels.select('#' + type).selectAll('*').remove()\n            burgIcons.select('#' + type).selectAll('*').remove()\n            $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']').parent().children().remove()\n            closeDialogs('.stable')\n            updateCountryEditors()\n            $('#burgEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n\n    })\n\n    $('#burgNameInput').on('input', function() {\n      if (this.value === '') {\n        tip(\n          'Name should not be blank, set opacity to 0 to hide label or remove button to delete')\n        return\n      }\n      const id = +elSelected.attr('data-id')\n      burgLabels.selectAll('[data-id=\\'' + id + '\\']').text(this.value)\n      manors[id].name = this.value\n      $('div[aria-describedby=\\'burgEditor\\'] .ui-dialog-title').text('Edit Burg: ' + this.value)\n    })\n\n    $('#burgNameReCulture, #burgNameReRandom').click(function() {\n      const id = +elSelected.attr('data-id')\n      const culture = this.id === 'burgNameReCulture' ? manors[id].culture :\n                      Math.floor(Math.random() * cultures.length)\n      const name = generateName(culture)\n      burgLabels.selectAll('[data-id=\\'' + id + '\\']').text(name)\n      manors[id].name = name\n      burgNameInput.value = name\n      $('div[aria-describedby=\\'burgEditor\\'] .ui-dialog-title').text('Edit Burg: ' + name)\n    })\n\n    $('#burgToggleExternalFont').click(function() {\n      if ($('#burgInputExternalFont').css('display') === 'none') {\n        $('#burgInputExternalFont').css('display', 'inline-block')\n        $('#burgSelectDefaultFont').css('display', 'none')\n        burgInputExternalFont.focus()\n      } else {\n        $('#burgSelectDefaultFont').css('display', 'inline-block')\n        $('#burgInputExternalFont').css('display', 'none')\n      }\n    })\n\n    $('#burgSelectDefaultFont').change(function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgLabels.select('#' + type)\n      if (burgSelectDefaultFont.value === '') return\n      const font = FONTS[burgSelectDefaultFont.value].split(':')[0].replace(/\\+/g, ' ')\n      group.attr('font-family', font).attr('data-font', FONTS[burgSelectDefaultFont.value])\n    })\n\n    $('#burgInputExternalFont').change(function() {\n      fetchFonts(this.value).then(fetched => {\n        if (!fetched) return\n        burgToggleExternalFont.click()\n        burgInputExternalFont.value = ''\n        if (fetched === 1) $('#burgSelectDefaultFont').val(FONTS.length - 1).change()\n      })\n    })\n\n    $('#burgSetLabelSize').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgLabels.select('#' + type)\n      group.attr('data-size', +this.value)\n      invokeActiveZooming()\n    })\n\n    $('#burgLabelColorInput').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgLabels.select('#' + type)\n      group.attr('fill', this.value)\n    })\n\n    $('#burgLabelOpacity').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgLabels.select('#' + type)\n      group.attr('opacity', +this.value)\n    })\n\n    $('#burgLabelAngle').on('input', function() {\n      const id = +elSelected.attr('data-id')\n      const el = burgLabels.select('[data-id=\\'' + id + '\\']')\n      const tr = parseTransform(el.attr('transform'))\n      const c = el.node().getBBox()\n      burgLabelAngleOutput.innerHTML = Math.abs(+this.value) + '°'\n      const angle = +this.value\n      const transform = `translate(${tr[0]},${tr[1]}) rotate(${angle} ${(c.x + c.width / 2)} ${(c.y + c.height / 2)})`\n      el.attr('transform', transform)\n    })\n\n    $('#burgIconSize').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      const size = +this.value\n      group.attr('size', size)\n      group.selectAll('*').each(function() {d3.select(this).attr('r', size)})\n    })\n\n    $('#burgIconFillOpacity').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      group.attr('fill-opacity', +this.value)\n    })\n\n    $('#burgIconFillColor').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      group.attr('fill', this.value)\n    })\n\n    $('#burgIconStrokeWidth').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      group.attr('stroke-width', +this.value)\n    })\n\n    $('#burgIconStrokeOpacity').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      group.attr('stroke-opacity', +this.value)\n    })\n\n    $('#burgIconStrokeColor').on('input', function() {\n      const type = elSelected.node().parentNode.id\n      const group = burgIcons.select('#' + type)\n      group.attr('stroke', this.value)\n    })\n\n    $('#burgToggleCapital').click(function() {\n      const id = +elSelected.attr('data-id')\n      const state = manors[id].region\n      if (states[state] === undefined) return\n      const capital = states[manors[id].region] ?\n                      id === states[manors[id].region].capital ? 0 : 1 : 1\n      if (capital && states[state].capital !== 'select') {\n        // move oldCapital to a town group\n        const oldCapital = states[state].capital\n        moveBurgToGroup(oldCapital, 'towns')\n      }\n      states[state].capital = capital ? id : 'select'\n      d3.select('#burgToggleCapital').classed('pressed', capital)\n      const g = capital ? 'capitals' : 'towns'\n      moveBurgToGroup(id, g)\n    })\n\n    $('#burgTogglePort').click(function() {\n      const id = +elSelected.attr('data-id')\n      const cell = cells[manors[id].cell]\n      const markAsPort = cell.port === undefined ? true : undefined\n      cell.port = markAsPort\n      d3.select('#burgTogglePort').classed('pressed', markAsPort)\n      if (markAsPort) {\n        const type = elSelected.node().parentNode.id\n        const ag = type === 'capitals' ? '#capital-anchors' : '#town-anchors'\n        const group = icons.select(ag)\n        const size = +group.attr('size')\n        const x = _.round(manors[id].x - size * 0.47, 2)\n        const y = _.round(manors[id].y - size * 0.47, 2)\n        group.append('use').attr('xlink:href', '#icon-anchor').attr('data-id', id)\n             .attr('x', x).attr('y', y).attr('width', size).attr('height', size)\n             .on('click', editIcon)\n      } else {\n        $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']').remove()\n      }\n    })\n\n    $('#burgPopulation').on('input', function() {\n      const id = +elSelected.attr('data-id')\n      burgPopulationFriendly.value =\n        Math.round(this.value * urbanization.value * populationRate.value * 1000)\n      manors[id].population = +this.value\n    })\n\n    $('#burgRelocate').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        restoreDefaultEvents()\n        tip('', true)\n      } else {\n        $('.pressed').removeClass('pressed')\n        const id = elSelected.attr('data-id')\n        $(this).addClass('pressed').attr('data-id', id)\n        viewbox.style('cursor', 'crosshair').on('click', relocateBurgOnClick)\n        tip('Click on map to relocate burg. Hold Shift for continuous move', true)\n      }\n    })\n\n    // open legendsEditor\n    document.getElementById('burglLegend').addEventListener('click', function() {\n      let burg = +elSelected.attr('data-id')\n      let id = 'burg' + burg\n      let name = manors[burg].name\n      editLegends(id, name)\n    })\n\n    // move burg to a different cell\n    function relocateBurgOnClick() {\n      const point = d3.mouse(this)\n      const index = getIndex(point)\n      const i = +$('#burgRelocate').attr('data-id')\n      if (isNaN(i) || !manors[i]) return\n\n      if (cells[index].height < 20) {\n        tip('Cannot place burg in the water! Select a land cell', null, 'error')\n        return\n      }\n\n      if (cells[index].manor !== undefined && cells[index].manor !== i) {\n        tip('There is already a burg in this cell. Please select a free cell', null, 'error')\n        $('#grid').fadeIn()\n        d3.select('#toggleGrid').classed('buttonoff', false)\n        return\n      }\n\n      let region = cells[index].region\n      const oldRegion = manors[i].region\n      // relocating capital to other country you \"conquer\" target cell\n      if (states[oldRegion] && states[oldRegion].capital === i) {\n        if (region !== oldRegion) {\n          tip('Capital cannot be moved to another country!', null, 'error')\n          return\n        }\n      }\n\n      if (d3.event.shiftKey === false) {\n        $('#burgRelocate').removeClass('pressed')\n        restoreDefaultEvents()\n        tip('', true)\n        if (region !== oldRegion) {\n          recalculateStateData(oldRegion)\n          recalculateStateData(region)\n          updateCountryEditors()\n        }\n      }\n\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n      burgIcons.select('circle[data-id=\\'' + i + '\\']').attr('transform', null).attr('cx', x)\n               .attr('cy', y)\n      burgLabels.select('text[data-id=\\'' + i + '\\']').attr('transform', null).attr('x', x)\n                .attr('y', y)\n      const anchor = icons.select('use[data-id=\\'' + i + '\\']')\n      if (anchor.size()) {\n        const size = anchor.attr('width')\n        const xa = _.round(x - size * 0.47, 2)\n        const ya = _.round(y - size * 0.47, 2)\n        anchor.attr('transform', null).attr('x', xa).attr('y', ya)\n      }\n      cells[index].manor = i\n      cells[manors[i].cell].manor = undefined\n      manors[i].x = x, manors[i].y = y, manors[i].region = region, manors[i].cell = index\n    }\n\n    // open in MFCG\n    $('#burgSeeInMFCG').click(function() {\n      const id = +elSelected.attr('data-id')\n      const name = manors[id].name\n      const cell = manors[id].cell\n      const pop = Math.round(manors[id].population)\n      const size = pop > 65 ? 65 : pop < 6 ? 6 : pop\n      const s = seed + '' + id\n      const hub = cells[cell].crossroad > 2 ? 1 : 0\n      const river = cells[cell].river ? 1 : 0\n      const coast = cells[cell].port !== undefined ? 1 : 0\n      const sec = pop > 40 ? 1 : Math.random() < pop / 100 ? 1 : 0\n      const thr = sec && Math.random() < 0.8 ? 1 : 0\n      const url = 'http://fantasycities.watabou.ru/'\n      let params = `?name=${name}&size=${size}&seed=${s}&hub=${hub}&random=0&continuous=0`\n      params +=\n        `&river=${river}&coast=${coast}&citadel=${id & 1}&plaza=${sec}&temple=${thr}&walls=${sec}&shantytown=${sec}`\n      const win = window.open(url + params, '_blank')\n      win.focus()\n    })\n\n    $('#burgAddfromEditor').click(function() {\n      clickToAdd() // to load on click event function\n      $('#addBurg').click()\n    })\n\n    $('#burgRemove').click(function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the Burg?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove Burg',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            const id = +elSelected.attr('data-id')\n            d3.selectAll('[data-id=\\'' + id + '\\']').remove()\n            const cell = manors[id].cell\n            const state = manors[id].region\n            if (states[state]) {\n              if (states[state].capital === id) states[state].capital = 'select'\n              states[state].burgs--\n            }\n            manors[id].region = 'removed'\n            cells[cell].manor = undefined\n            closeDialogs('.stable')\n            updateCountryEditors()\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  function editMarker() {\n    if (customization) return\n\n    unselect()\n    closeDialogs('#markerEditor, .stable')\n    elSelected =\n      d3.select(this).call(d3.drag().on('start', elementDrag)).classed('draggable', true)\n\n    $('#markerEditor').dialog({\n      title: 'Edit Marker',\n      minHeight: 30, width: 'auto', maxWidth: 275, resizable: false,\n      position: {my: 'center top+30', at: 'bottom', of: d3.event},\n      close: unselect\n    })\n\n    // update inputs\n    let id = elSelected.attr('href')\n    let symbol = d3.select('#defs-markers').select(id)\n    let icon = symbol.select('text')\n    markerSelectGroup.value = id.slice(1)\n    markerIconSize.value = parseFloat(icon.attr('font-size'))\n    markerIconShiftX.value = parseFloat(icon.attr('x'))\n    markerIconShiftY.value = parseFloat(icon.attr('y'))\n    markerIconFill.value = icon.attr('fill')\n    markerIconStrokeWidth.value = icon.attr('stroke-width')\n    markerIconStroke.value = icon.attr('stroke')\n    markerSize.value = elSelected.attr('data-size')\n    markerBase.value = symbol.select('path').attr('fill')\n    markerFill.value = symbol.select('circle').attr('fill')\n    let opacity = symbol.select('circle').attr('opacity')\n    markerToggleBubble.className = opacity === '0' ? 'icon-info' : 'icon-info-circled'\n\n    let table = document.getElementById('markerIconTable')\n    let selected = table.getElementsByClassName('selected')\n    if (selected.length) selected[0].removeAttribute('class')\n    selected = document.querySelectorAll('#markerIcon' + icon.text().codePointAt())\n    if (selected.length) selected[0].className = 'selected'\n    markerIconCustom.value = selected.length ? '' : icon.text()\n\n    if (modules.editMarker) return\n    modules.editMarker = true\n\n    $('#markerGroup').click(function() {\n      $('#markerEditor > button').not(this).toggle()\n      $('#markerGroupSection').toggle()\n      updateMarkerGroupOptions()\n    })\n\n    function updateMarkerGroupOptions() {\n      markerSelectGroup.innerHTML = ''\n      d3.select('#defs-markers').selectAll('symbol').each(function() {\n        let opt = document.createElement('option')\n        opt.value = opt.innerHTML = this.id\n        markerSelectGroup.add(opt)\n      })\n      let id = elSelected.attr('href').slice(1)\n      markerSelectGroup.value = id\n    }\n\n    // on add marker type click\n    document.getElementById('markerAddGroup').addEventListener('click', function() {\n      if ($('#markerInputGroup').css('display') === 'none') {\n        $('#markerInputGroup').css('display', 'inline-block')\n        $('#markerSelectGroup').css('display', 'none')\n        markerInputGroup.focus()\n      } else {\n        $('#markerSelectGroup').css('display', 'inline-block')\n        $('#markerInputGroup').css('display', 'none')\n      }\n    })\n\n    // on marker type change\n    document.getElementById('markerSelectGroup').addEventListener('change', function() {\n      elSelected.attr('href', '#' + this.value)\n      elSelected.attr('data-id', '#' + this.value)\n    })\n\n    // on new type input\n    document.getElementById('markerInputGroup').addEventListener('change', function() {\n      let newGroup = this.value.toLowerCase().replace(/ /g, '_').replace(/[^\\w\\s]/gi, '')\n      if (Number.isFinite(+newGroup.charAt(0))) newGroup = 'm' + newGroup\n      if (d3.select('#defs-markers').select('#' + newGroup).size()) {\n        tip('The type \"' + newGroup + '\" is already exists')\n        return\n      }\n      markerInputGroup.value = ''\n      // clone old group assigning new id\n      let id = elSelected.attr('href')\n      let l = d3.select('#defs-markers').select(id).node().cloneNode(true)\n      l.id = newGroup\n      elSelected.attr('href', '#' + newGroup)\n      elSelected.attr('data-id', '#' + newGroup)\n      document.getElementById('defs-markers').insertBefore(l, null)\n\n      // select new group\n      let opt = document.createElement('option')\n      opt.value = opt.innerHTML = newGroup\n      markerSelectGroup.add(opt)\n      $('#markerSelectGroup').val(newGroup).change()\n      $('#markerSelectGroup, #markerInputGroup').toggle()\n      updateMarkerGroupOptions()\n    })\n\n    $('#markerIconButton').click(function() {\n      $('#markerEditor > button').not(this).toggle()\n      $('#markerIconButtons').toggle()\n      if (!$('#markerIconTable').text()) drawIconsList(icons)\n    })\n\n    $('#markerRemoveGroup').click(function() {\n      let id = elSelected.attr('href')\n      let used = document.querySelectorAll('use[data-id=\\'' + id + '\\']')\n      let count = used.length === 1 ? '1 element' : used.length + ' elements'\n      const message = 'Are you sure you want to remove the marker (' + count + ')?'\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        resizable: false, title: 'Remove marker',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            if (id !== '#marker0') d3.select('#defs-markers').select(id).remove()\n            used.forEach(function(e) {e.remove()})\n            updateMarkerGroupOptions()\n            $('#markerEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    function drawIconsList() {\n      let table = document.getElementById('markerIconTable'), row = ''\n      table.addEventListener('click', clickMarkerIconTable, false)\n      table.addEventListener('mouseover', hoverMarkerIconTable, false)\n\n      for (let i = 0; i < ICONS.length; i++) {\n        if (i % 20 === 0) row = table.insertRow(0)\n        let cell = row.insertCell(0)\n        let icon = String.fromCodePoint(parseInt(ICONS[i][0], 16))\n        cell.innerHTML = icon\n        cell.id = 'markerIcon' + icon.codePointAt()\n        cell.setAttribute('data-desc', ICONS[i][2])\n      }\n    }\n\n    function clickMarkerIconTable(e) {\n      if (e.target !== e.currentTarget) {\n        let table = document.getElementById('markerIconTable')\n        let selected = table.getElementsByClassName('selected')\n        if (selected.length) selected[0].removeAttribute('class')\n        e.target.className = 'selected'\n        let id = elSelected.attr('href')\n        let icon = e.target.innerHTML\n        d3.select('#defs-markers').select(id).select('text').text(icon)\n      }\n      e.stopPropagation()\n    }\n\n    function hoverMarkerIconTable(e) {\n      if (e.target !== e.currentTarget) {\n        let desc = e.target.getAttribute('data-desc')\n        tip(e.target.innerHTML + ' ' + desc)\n      }\n      e.stopPropagation()\n    }\n\n    // change marker icon size\n    document.getElementById('markerIconSize').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('font-size', this.value + 'px')\n    })\n\n    // change marker icon x shift\n    document.getElementById('markerIconShiftX').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('x', this.value + '%')\n    })\n\n    // change marker icon y shift\n    document.getElementById('markerIconShiftY').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('y', this.value + '%')\n    })\n\n    // apply custom unicode icon on input\n    document.getElementById('markerIconCustom').addEventListener('input', function() {\n      if (!this.value) return\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').text(this.value)\n    })\n\n    $('#markerStyleButton').click(function() {\n      $('#markerEditor > button').not(this).toggle()\n      $('#markerStyleButtons').toggle()\n    })\n\n    // change marker size\n    document.getElementById('markerSize').addEventListener('input', function() {\n      let id = elSelected.attr('data-id')\n      let used = document.querySelectorAll('use[data-id=\\'' + id + '\\']')\n      let size = this.value\n      used.forEach(function(e) {e.setAttribute('data-size', size)})\n      invokeActiveZooming()\n    })\n\n    // change marker base color\n    document.getElementById('markerBase').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select(id).select('path').attr('fill', this.value)\n      d3.select(id).select('circle').attr('stroke', this.value)\n    })\n\n    // change marker fill color\n    document.getElementById('markerFill').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select(id).select('circle').attr('fill', this.value)\n    })\n\n    // change marker icon y shift\n    document.getElementById('markerIconFill').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('fill', this.value)\n    })\n\n    // change marker icon y shift\n    document.getElementById('markerIconStrokeWidth').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('stroke-width', this.value)\n    })\n\n    // change marker icon y shift\n    document.getElementById('markerIconStroke').addEventListener('input', function() {\n      let id = elSelected.attr('href')\n      d3.select('#defs-markers').select(id).select('text').attr('stroke', this.value)\n    })\n\n    // toggle marker bubble display\n    document.getElementById('markerToggleBubble').addEventListener('click', function() {\n      let id = elSelected.attr('href')\n      let show = 1\n      if (this.className === 'icon-info-circled') {\n        this.className = 'icon-info'\n        show = 0\n      } else {\n        this.className = 'icon-info-circled'\n\n      }\n      d3.select(id).select('circle').attr('opacity', show)\n      d3.select(id).select('path').attr('opacity', show)\n    })\n\n    // open legendsEditor\n    document.getElementById('markerLegendButton').addEventListener('click', function() {\n      let id = elSelected.attr('id')\n      let symbol = elSelected.attr('href')\n      let icon = d3.select('#defs-markers').select(symbol).select('text').text()\n      let name = 'Marker ' + icon\n      editLegends(id, name)\n    })\n\n    // click on master button to add new markers on click\n    document.getElementById('markerAdd').addEventListener('click', function() {\n      document.getElementById('addMarker').click()\n    })\n\n    // remove marker on click\n    document.getElementById('markerRemove').addEventListener('click', function() {\n      alertMessage.innerHTML = 'Are you sure you want to remove the marker?'\n      $('#alert').dialog({\n        resizable: false, title: 'Remove marker',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            elSelected.remove()\n            $('#markerEditor').dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  // clear elSelected variable\n  function unselect() {\n    tip('', true)\n    restoreDefaultEvents()\n    if (customization === 5) customization = 0\n    if (!elSelected) return\n    elSelected.call(d3.drag().on('drag', null)).attr('class', null)\n    debug.selectAll('*').remove()\n    viewbox.style('cursor', 'default')\n    elSelected = null\n  }\n\n  // transform string to array [translateX,translateY,rotateDeg,rotateX,rotateY,scale]\n  function parseTransform(string) {\n    if (!string) {return [0, 0, 0, 0, 0, 1]}\n    const a = string.replace(/[a-z()]/g, '').replace(/[ ]/g, ',').split(',')\n    return [a[0] || 0, a[1] || 0, a[2] || 0, a[3] || 0, a[4] || 0, a[5] || 1]\n  }\n\n  // generic function to move any burg to any group\n  function moveBurgToGroup(id, g) {\n    $('#burgLabels [data-id=' + id + ']').detach().appendTo($('#burgLabels > #' + g))\n    $('#burgIcons [data-id=' + id + ']').detach().appendTo($('#burgIcons > #' + g))\n    const rSize = $('#burgIcons > #' + g).attr('size')\n    $('#burgIcons [data-id=' + id + ']').attr('r', rSize)\n    const el = $('#icons g[id*=\\'anchors\\'] [data-id=' + id + ']')\n    if (el.length) {\n      const to = g === 'towns' ? $('#town-anchors') : $('#capital-anchors')\n      el.detach().appendTo(to)\n      const useSize = to.attr('size')\n      const x = _.round(manors[id].x - useSize * 0.47, 2)\n      const y = _.round(manors[id].y - useSize * 0.47, 2)\n      el.attr('x', x).attr('y', y).attr('width', useSize).attr('height', useSize)\n    }\n    updateCountryEditors()\n  }\n\n  // generate cultures for a new map based on options and namesbase\n  function generateCultures() {\n    const count = +culturesInput.value\n    cultures = d3.shuffle(defaultCultures).slice(0, count)\n    const centers = d3.range(cultures.length).map(function(d, i) {\n      const x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1)\n      const y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1)\n      const center = [x, y]\n      cultures[i].center = center\n      return center\n    })\n    cultureTree = d3.quadtree(centers)\n  }\n\n  function manorsAndRegions() {\n    console.group('manorsAndRegions')\n    calculateChains()\n    rankPlacesGeography()\n    locateCapitals()\n    generateMainRoads()\n    rankPlacesEconomy()\n    locateTowns()\n    getNames()\n    shiftSettlements()\n    checkAccessibility()\n    defineRegions('withCultures')\n    generatePortRoads()\n    generateSmallRoads()\n    generateOceanRoutes()\n    calculatePopulation()\n    drawManors()\n    drawRegions()\n    console.groupEnd('manorsAndRegions')\n  }\n\n  // Assess cells geographycal suitability for settlement\n  function rankPlacesGeography() {\n    console.time('rankPlacesGeography')\n    land.map(function(c) {\n      let score = 0\n      c.flux = _.round(c.flux, 2)\n      // get base score from height (will be biom)\n      if (c.height <= 40) score = 2\n      else if (c.height <= 50) score = 1.8\n      else if (c.height <= 60) score = 1.6\n      else if (c.height <= 80) score = 1.4\n      score += (1 - c.height / 100) / 3\n      if (c.ctype && Math.random() < 0.8 && !c.river) {\n        c.score = 0 // ignore 80% of extended cells\n      } else {\n        if (c.harbor) {\n          if (c.harbor === 1) {score += 1} else {score -= 0.3} // good sea harbor is valued\n        }\n        if (c.river) score += 1 // coastline is valued\n        if (c.river && c.ctype === 1) score += 1 // estuary is valued\n        if (c.flux > 1) score += Math.pow(c.flux, 0.3) // riverbank is valued\n        if (c.confluence) score += Math.pow(c.confluence, 0.7) // confluence is valued;\n        const neighbEv = c.neighbors.map(\n          function(n) {if (cells[n].height >= 20) return cells[n].height})\n        const difEv = c.height - d3.mean(neighbEv)\n        // if (!isNaN(difEv)) score += difEv * 10 * (1 - c.height / 100); // local height maximums are valued\n      }\n      c.score = _.round(Math.random() * score + score, 3) // add random factor\n    })\n    land.sort(function(a, b) {return b.score - a.score})\n    console.timeEnd('rankPlacesGeography')\n  }\n\n  // Assess the cells economical suitability for settlement\n  function rankPlacesEconomy() {\n    console.time('rankPlacesEconomy')\n    land.map(function(c) {\n      let score = c.score\n      let path = c.path || 0 // roads are valued\n      if (path) {\n        path = Math.pow(path, 0.2)\n        const crossroad = c.crossroad || 0 // crossroads are valued\n        score = score + path + crossroad\n      }\n      c.score = _.round(Math.random() * score + score, 2) // add random factor\n    })\n    land.sort(function(a, b) {return b.score - a.score})\n    console.timeEnd('rankPlacesEconomy')\n  }\n\n  // calculate population for manors, cells and states\n  function calculatePopulation() {\n    // neutral population factors < 1 as neutral lands are usually pretty wild\n    const ruralFactor = 0.5, urbanFactor = 0.9\n\n    // calculate population for each burg (based on trade/people attractors)\n    manors.map(function(m) {\n      const cell = cells[m.cell]\n      let score = cell.score\n      if (score <= 0) {score = _.round(Math.random(), 2)}\n      if (cell.crossroad) {score += cell.crossroad} // crossroads\n      if (cell.confluence) {score += Math.pow(cell.confluence, 0.3)} // confluences\n      if (m.i !== m.region && cell.port) {score *= 1.5} // ports (not capital)\n      if (m.i === m.region && !cell.port) {score *= 2} // land-capitals\n      if (m.i === m.region && cell.port) {score *= 3} // port-capitals\n      if (m.region === 'neutral') score *= urbanFactor\n      const rnd = 0.6 + Math.random() * 0.8 // random factor\n      m.population = _.round(score * rnd, 1)\n    })\n\n    // calculate rural population for each cell based on area + elevation (elevation to be changed to biome)\n    const graphSizeAdj = 90 / Math.sqrt(cells.length, 2) // adjust to different graphSize\n    land.map(function(l) {\n      let population = 0\n      const elevationFactor = Math.pow(1 - l.height / 100, 3)\n      population = elevationFactor * l.area * graphSizeAdj\n      if (l.region === 'neutral') population *= ruralFactor\n      l.pop = _.round(population, 1)\n    })\n\n    // calculate population for each region\n    states.map(function(s, i) {\n      // define region burgs count\n      const burgs = $.grep(manors, function(e) {\n        return e.region === i\n      })\n      s.burgs = burgs.length\n      // define region total and burgs population\n      let burgsPop = 0 // get summ of all burgs population\n      burgs.map(function(b) {burgsPop += b.population})\n      s.urbanPopulation = _.round(burgsPop, 2)\n      const regionCells = $.grep(cells, function(e) {\n        return e.region === i\n      })\n      let cellsPop = 0\n      regionCells.map(function(c) {cellsPop += c.pop})\n      s.cells = regionCells.length\n      s.ruralPopulation = _.round(cellsPop, 1)\n    })\n\n    // collect data for neutrals\n    const neutralCells = $.grep(cells, function(e) {return e.region === 'neutral'})\n    if (neutralCells.length) {\n      let burgs = 0, urbanPopulation = 0, ruralPopulation = 0, area = 0\n      manors.forEach(function(m) {\n        if (m.region !== 'neutral') return\n        urbanPopulation += m.population\n        burgs++\n      })\n      neutralCells.forEach(function(c) {\n        ruralPopulation += c.pop\n        area += cells[c.index].area\n      })\n      states.push({\n        i: states.length, color: 'neutral', name: 'Neutrals', capital: 'neutral',\n        cells: neutralCells.length, burgs, urbanPopulation: _.round(urbanPopulation, 2),\n        ruralPopulation: _.round(ruralPopulation, 2), area: Math.round(area)\n      })\n    }\n  }\n\n  function locateCapitals() {\n    console.time('locateCapitals')\n    // min distance detween capitals\n    const count = +regionsInput.value\n    let spacing = (graphWidth + graphHeight) / 2 / count\n    console.log(' states: ' + count)\n\n    for (let l = 0; manors.length < count; l++) {\n      const region = manors.length\n      const x = land[l].data[0], y = land[l].data[1]\n      let minDist = 10000 // dummy value\n      for (let c = 0; c < manors.length; c++) {\n        const dist = Math.hypot(x - manors[c].x, y - manors[c].y)\n        if (dist < minDist) minDist = dist\n        if (minDist < spacing) break\n      }\n      if (minDist >= spacing) {\n        const cell = land[l].index\n        const closest = cultureTree.find(x, y)\n        const culture = getCultureId(closest)\n        manors.push({i: region, cell, x, y, region, culture})\n      }\n      if (l === land.length - 1) {\n        console.error(\n          'Cannot place capitals with current spacing. Trying again with reduced spacing')\n        l = -1, manors = [], spacing /= 1.2\n      }\n    }\n\n    // For each capital create a country\n    const scheme = count <= 8 ? colors8 : colors20\n    const mod = +powerInput.value\n    manors.forEach(function(m, i) {\n      const power = _.round(Math.random() * mod / 2 + 1, 1)\n      const color = scheme(i / count)\n      states.push({i, color, power, capital: i})\n      const p = cells[m.cell]\n      p.manor = i\n      p.region = i\n      p.culture = m.culture\n    })\n    console.timeEnd('locateCapitals')\n  }\n\n  function locateTowns() {\n    console.time('locateTowns')\n    const count = +manorsInput.value\n    const neutral = +neutralInput.value\n    const manorTree = d3.quadtree()\n    manors.forEach(function(m) {manorTree.add([m.x, m.y])})\n\n    for (let l = 0; manors.length < count && l < land.length; l++) {\n      const x = land[l].data[0], y = land[l].data[1]\n      const c = manorTree.find(x, y)\n      const d = Math.hypot(x - c[0], y - c[1])\n      if (d < 6) continue\n      const cell = land[l].index\n      let region = 'neutral', culture = -1, closest = neutral\n      for (let c = 0; c < states.length; c++) {\n        let dist = Math.hypot(manors[c].x - x, manors[c].y - y) / states[c].power\n        const cap = manors[c].cell\n        if (cells[cell].fn !== cells[cap].fn) dist *= 3\n        if (dist < closest) {\n          region = c\n          closest = dist\n        }\n      }\n      if (closest > neutral / 5 || region === 'neutral') {\n        const closestCulture = cultureTree.find(x, y)\n        culture = getCultureId(closestCulture)\n      } else {\n        culture = manors[region].culture\n      }\n      land[l].manor = manors.length\n      land[l].culture = culture\n      land[l].region = region\n      manors.push({i: manors.length, cell, x, y, region, culture})\n      manorTree.add([x, y])\n    }\n    if (manors.length < count) {\n      const error = 'Cannot place all burgs. Requested ' + count + ', placed ' + manors.length\n      console.error(error)\n    }\n    console.timeEnd('locateTowns')\n  }\n\n  // shift settlements from cell point\n  function shiftSettlements() {\n    for (let i = 0; i < manors.length; i++) {\n      const capital = i < regionsInput.value\n      const cell = cells[manors[i].cell]\n      let x = manors[i].x, y = manors[i].y\n      if ((capital && cell.harbor) || cell.harbor === 1) {\n        // port: capital with any harbor and towns with good harbors\n        if (cell.haven === undefined) {\n          cell.harbor = undefined\n        } else {\n          cell.port = cells[cell.haven].fn\n          x = cell.coastX\n          y = cell.coastY\n        }\n      }\n      if (cell.river && cell.type !== 1) {\n        let shift = 0.2 * cell.flux\n        if (shift < 0.2) shift = 0.2\n        if (shift > 1) shift = 1\n        shift = Math.random() > .5 ? shift : shift * -1\n        x = _.round(x + shift, 2)\n        shift = Math.random() > .5 ? shift : shift * -1\n        y = _.round(y + shift, 2)\n      }\n      cell.data[0] = manors[i].x = x\n      cell.data[1] = manors[i].y = y\n    }\n  }\n\n  // Validate each island with manors has port\n  function checkAccessibility() {\n    console.time('checkAccessibility')\n    for (let f = 0; f < features.length; f++) {\n      if (!features[f].land) continue\n      const manorsOnIsland = $.grep(land, function(e) {\n        return e.manor !== undefined && e.fn === f\n      })\n      if (!manorsOnIsland.length) continue\n\n      // if lake port is the only port on lake, remove port\n      const lakePorts = $.grep(manorsOnIsland, function(p) {\n        return p.port && !features[p.port].border\n      })\n      if (lakePorts.length) {\n        const lakes = []\n        lakePorts.forEach(function(p) {lakes[p.port] = lakes[p.port] ? lakes[p.port] + 1 : 1})\n        lakePorts.forEach(function(p) {if (lakes[p.port] === 1) p.port = undefined})\n      }\n\n      // check how many ocean ports are there on island\n      const oceanPorts = $.grep(manorsOnIsland, function(p) {\n        return p.port && features[p.port].border\n      })\n      if (oceanPorts.length) continue\n      const portCandidates = $.grep(manorsOnIsland, function(c) {\n        return c.harbor && features[cells[c.harbor].fn].border && c.ctype === 1\n      })\n      if (portCandidates.length) {\n        // No ports on island. Upgrading first burg to port\n        const candidate = portCandidates[0]\n        candidate.harbor = 1\n        candidate.port = cells[candidate.haven].fn\n        const manor = manors[portCandidates[0].manor]\n        candidate.data[0] = manor.x = candidate.coastX\n        candidate.data[1] = manor.y = candidate.coastY\n        // add score for each burg on island (as it's the only port)\n        candidate.score += Math.floor((portCandidates.length - 1) / 2)\n      } else {\n        // No ports on island. Reducing score for burgs\n        manorsOnIsland.forEach(function(e) {e.score -= 2})\n      }\n    }\n    console.timeEnd('checkAccessibility')\n  }\n\n  function generateMainRoads() {\n    console.time('generateMainRoads')\n    lineGen.curve(d3.curveBasis)\n    if (states.length < 2 || manors.length < 2) return\n    for (let f = 0; f < features.length; f++) {\n      if (!features[f].land) continue\n      const manorsOnIsland = $.grep(land,\n        function(e) {return e.manor !== undefined && e.fn === f})\n      if (manorsOnIsland.length > 1) {\n        for (let d = 1; d < manorsOnIsland.length; d++) {\n          for (let m = 0; m < d; m++) {\n            const path = findLandPath(manorsOnIsland[d].index, manorsOnIsland[m].index, 'main')\n            restorePath(manorsOnIsland[m].index, manorsOnIsland[d].index, 'main', path)\n          }\n        }\n      }\n    }\n    console.timeEnd('generateMainRoads')\n  }\n\n  // add roads from port to capital if capital is not a port\n  function generatePortRoads() {\n    console.time('generatePortRoads')\n    if (!states.length || manors.length < 2) return\n    const portless = []\n    for (let s = 0; s < states.length; s++) {\n      const cell = manors[s].cell\n      if (cells[cell].port === undefined) portless.push(s)\n    }\n    for (let l = 0; l < portless.length; l++) {\n      const ports = $.grep(land,\n        function(l) {return l.port !== undefined && l.region === portless[l]})\n      if (!ports.length) continue\n      let minDist = 1000, end = -1\n      ports.map(function(p) {\n        const dist = Math.hypot(e.data[0] - p.data[0], e.data[1] - p.data[1])\n        if (dist < minDist && dist > 1) {\n          minDist = dist\n          end = p.index\n        }\n      })\n      if (end !== -1) {\n        const start = manors[portless[l]].cell\n        const path = findLandPath(start, end, 'direct')\n        restorePath(end, start, 'main', path)\n      }\n    }\n    console.timeEnd('generatePortRoads')\n  }\n\n  function generateSmallRoads() {\n    console.time('generateSmallRoads')\n    if (manors.length < 2) return\n    for (let f = 0; f < features.length; f++) {\n      const manorsOnIsland = $.grep(land, function(e) {\n        return e.manor !== undefined && e.fn === f\n      })\n      const l = manorsOnIsland.length\n      if (l > 1) {\n        const secondary = Math.round((l + 8) / 10)\n        for (let s = 0; s < secondary; s++) {\n          var start = manorsOnIsland[Math.floor(Math.random() * l)].index\n          var end = manorsOnIsland[Math.floor(Math.random() * l)].index\n          var dist = Math.hypot(cells[start].data[0] - cells[end].data[0],\n            cells[start].data[1] - cells[end].data[1])\n          if (dist > 10) {\n            var path = findLandPath(start, end, 'direct')\n            restorePath(end, start, 'small', path)\n          }\n        }\n        manorsOnIsland.map(function(e, d) {\n          if (!e.path && d > 0) {\n            const start = e.index\n            let end = -1\n            const road = $.grep(land, function(e) {\n              return e.path && e.fn === f\n            })\n            if (road.length > 0) {\n              let minDist = 10000\n              road.map(function(i) {\n                const dist = Math.hypot(e.data[0] - i.data[0], e.data[1] - i.data[1])\n                if (dist < minDist) {\n                  minDist = dist\n                  end = i.index\n                }\n              })\n            } else {\n              end = manorsOnIsland[0].index\n            }\n            const path = findLandPath(start, end, 'main')\n            restorePath(end, start, 'small', path)\n          }\n        })\n      }\n    }\n    console.timeEnd('generateSmallRoads')\n  }\n\n  function generateOceanRoutes() {\n    console.time('generateOceanRoutes')\n    lineGen.curve(d3.curveBasis)\n    const cAnchors = icons.selectAll('#capital-anchors')\n    const tAnchors = icons.selectAll('#town-anchors')\n    const cSize = cAnchors.attr('size') || 2\n    const tSize = tAnchors.attr('size') || 1\n\n    const ports = []\n    // groups all ports on water feature\n    for (let m = 0; m < manors.length; m++) {\n      const cell = manors[m].cell\n      const port = cells[cell].port\n      if (port === undefined) continue\n      if (ports[port] === undefined) ports[port] = []\n      ports[port].push(cell)\n\n      // draw anchor icon\n      const group = m < states.length ? cAnchors : tAnchors\n      const size = m < states.length ? cSize : tSize\n      const x = _.round(cells[cell].data[0] - size * 0.47, 2)\n      const y = _.round(cells[cell].data[1] - size * 0.47, 2)\n      group.append('use').attr('xlink:href', '#icon-anchor').attr('data-id', m)\n           .attr('x', x).attr('y', y).attr('width', size).attr('height', size)\n      icons.selectAll('use').on('click', editIcon)\n    }\n\n    for (let w = 0; w < ports.length; w++) {\n      if (!ports[w]) continue\n      if (ports[w].length < 2) continue\n      const onIsland = []\n      for (let i = 0; i < ports[w].length; i++) {\n        const cell = ports[w][i]\n        const fn = cells[cell].fn\n        if (onIsland[fn] === undefined) onIsland[fn] = []\n        onIsland[fn].push(cell)\n      }\n\n      for (let fn = 0; fn < onIsland.length; fn++) {\n        if (!onIsland[fn]) continue\n        if (onIsland[fn].length < 2) continue\n        const start = onIsland[fn][0]\n        const paths = findOceanPaths(start, -1)\n\n        for (let h = 1; h < onIsland[fn].length; h++) {\n          // routes from all ports on island to 1st port on island\n          restorePath(onIsland[fn][h], start, 'ocean', paths)\n        }\n\n        // inter-island routes\n        for (let c = fn + 1; c < onIsland.length; c++) {\n          if (!onIsland[c]) continue\n          if (!onIsland[c].length) continue\n          if (onIsland[fn].length > 3) {\n            const end = onIsland[c][0]\n            restorePath(end, start, 'ocean', paths)\n          }\n        }\n\n        if (features[w].border && !features[fn].border && onIsland[fn].length > 5) {\n          // encircle the island\n          onIsland[fn].sort(function(a, b) {return cells[b].cost - cells[a].cost})\n          for (let a = 2; a < onIsland[fn].length && a < 10; a++) {\n            const from = onIsland[fn][1], to = onIsland[fn][a]\n            const dist = Math.hypot(cells[from].data[0] - cells[to].data[0],\n              cells[from].data[1] - cells[to].data[1])\n            const distPath = getPathDist(from, to)\n            if (distPath > dist * 4 + 10) {\n              const totalCost = cells[from].cost + cells[to].cost\n              const pathsAdd = findOceanPaths(from, to)\n              if (cells[to].cost < totalCost) {\n                restorePath(to, from, 'ocean', pathsAdd)\n                break\n              }\n            }\n          }\n        }\n\n      }\n\n    }\n    console.timeEnd('generateOceanRoutes')\n  }\n\n  function findLandPath(start, end, type) {\n    // A* algorithm\n    const queue = new PriorityQueue({\n      comparator: function(a, b) {\n        return a.p - b.p\n      }\n    })\n    const cameFrom = []\n    const costTotal = []\n    costTotal[start] = 0\n    queue.queue({e: start, p: 0})\n    while (queue.length > 0) {\n      const next = queue.dequeue().e\n      if (next === end) {break}\n      const pol = cells[next]\n      pol.neighbors.forEach(function(e) {\n        if (cells[e].height >= 20) {\n          let cost = cells[e].height / 100 * 2\n          if (cells[e].path && type === 'main') {\n            cost = 0.15\n          } else {\n            if (typeof e.manor === 'undefined') {cost += 0.1}\n            if (typeof e.river !== 'undefined') {cost -= 0.1}\n            if (cells[e].harbor) {cost *= 0.3}\n            if (cells[e].path) {cost *= 0.5}\n            cost +=\n              Math.hypot(cells[e].data[0] - pol.data[0], cells[e].data[1] - pol.data[1]) / 30\n          }\n          const costNew = costTotal[next] + cost\n          if (!cameFrom[e] || costNew < costTotal[e]) { //\n            costTotal[e] = costNew\n            cameFrom[e] = next\n            const dist = Math.hypot(cells[e].data[0] - cells[end].data[0],\n              cells[e].data[1] - cells[end].data[1]) / 15\n            const priority = costNew + dist\n            queue.queue({e, p: priority})\n          }\n        }\n      })\n    }\n    return cameFrom\n  }\n\n  function findOceanPaths(start, end) {\n    const queue = new PriorityQueue({comparator: function(a, b) {return a.p - b.p}})\n    let next\n    const cameFrom = [], costTotal = []\n    cameFrom[start] = 'no', costTotal[start] = 0\n    queue.queue({e: start, p: 0})\n    while (queue.length > 0 && next !== end) {\n      next = queue.dequeue().e\n      const pol = cells[next]\n      pol.neighbors.forEach(function(e) {\n        if (cells[e].ctype < 0 || cells[e].haven === next) {\n          let cost = 1\n          if (cells[e].ctype > 0) cost += 100\n          if (cells[e].ctype < -1) {\n            const dist = Math.hypot(cells[e].data[0] - pol.data[0],\n              cells[e].data[1] - pol.data[1])\n            cost += 50 + dist * 2\n          }\n          if (cells[e].path && cells[e].ctype < 0) cost *= 0.8\n          const costNew = costTotal[next] + cost\n          if (!cameFrom[e]) {\n            costTotal[e] = costNew\n            cells[e].cost = costNew\n            cameFrom[e] = next\n            queue.queue({e, p: costNew})\n          }\n        }\n      })\n    }\n    return cameFrom\n  }\n\n  function getPathDist(start, end) {\n    const queue = new PriorityQueue({\n      comparator: function(a, b) {\n        return a.p - b.p\n      }\n    })\n    let next, costNew\n    const cameFrom = []\n    const costTotal = []\n    cameFrom[start] = 'no'\n    costTotal[start] = 0\n    queue.queue({e: start, p: 0})\n    while (queue.length > 0 && next !== end) {\n      next = queue.dequeue().e\n      const pol = cells[next]\n      pol.neighbors.forEach(function(e) {\n        if (cells[e].path && (cells[e].ctype === -1 || cells[e].haven === next)) {\n          const dist = Math.hypot(cells[e].data[0] - pol.data[0], cells[e].data[1] - pol.data[1])\n          costNew = costTotal[next] + dist\n          if (!cameFrom[e]) {\n            costTotal[e] = costNew\n            cameFrom[e] = next\n            queue.queue({e, p: costNew})\n          }\n        }\n      })\n    }\n    return costNew\n  }\n\n  function restorePath(end, start, type, from) {\n    let path = [], current = end\n    const limit = 1000\n    let prev = cells[end]\n    if (type === 'ocean' || !prev.path) {\n      path.push({scX: prev.data[0], scY: prev.data[1], i: end})\n    }\n    if (!prev.path) {prev.path = 1}\n    for (let i = 0; i < limit; i++) {\n      current = from[current]\n      let cur = cells[current]\n      if (!cur) {break}\n      if (cur.path) {\n        cur.path += 1\n        path.push({scX: cur.data[0], scY: cur.data[1], i: current})\n        prev = cur\n        drawPath()\n      } else {\n        cur.path = 1\n        if (prev) {path.push({scX: prev.data[0], scY: prev.data[1], i: prev.index})}\n        prev = undefined\n        path.push({scX: cur.data[0], scY: cur.data[1], i: current})\n      }\n      if (current === start || !from[current]) {break}\n    }\n    drawPath()\n\n    function drawPath() {\n      if (path.length > 1) {\n        // mark crossroades\n        if (type === 'main' || type === 'small') {\n          const plus = type === 'main' ? 4 : 2\n          const f = cells[path[0].i]\n          if (f.path > 1) {\n            if (!f.crossroad) {f.crossroad = 0}\n            f.crossroad += plus\n          }\n          const t = cells[(path[path.length - 1].i)]\n          if (t.path > 1) {\n            if (!t.crossroad) {t.crossroad = 0}\n            t.crossroad += plus\n          }\n        }\n        // draw path segments\n        let line = lineGen(path)\n        line = round(line, 1)\n        let id = 0 // to create unique route id\n        if (type === 'main') {\n          id = roads.selectAll('path').size()\n          roads.append('path').attr('d', line).attr('id', 'road' + id).on('click', editRoute)\n        } else if (type === 'small') {\n          id = trails.selectAll('path').size()\n          trails.append('path').attr('d', line).attr('id', 'trail' + id).on('click', editRoute)\n        } else if (type === 'ocean') {\n          id = searoutes.selectAll('path').size()\n          searoutes.append('path').attr('d', line).attr('id', 'searoute' + id)\n                   .on('click', editRoute)\n        }\n      }\n      path = []\n    }\n  }\n\n  // Append burg elements\n  function drawManors() {\n    console.time('drawManors')\n    const capitalIcons = burgIcons.select('#capitals')\n    const capitalLabels = burgLabels.select('#capitals')\n    const townIcons = burgIcons.select('#towns')\n    const townLabels = burgLabels.select('#towns')\n    const capitalSize = capitalIcons.attr('size') || 1\n    const townSize = townIcons.attr('size') || 0.5\n    capitalIcons.selectAll('*').remove()\n    capitalLabels.selectAll('*').remove()\n    townIcons.selectAll('*').remove()\n    townLabels.selectAll('*').remove()\n\n    for (let i = 0; i < manors.length; i++) {\n      const x = manors[i].x, y = manors[i].y\n      const cell = manors[i].cell\n      const name = manors[i].name\n      const ic = i < states.length ? capitalIcons : townIcons\n      const lb = i < states.length ? capitalLabels : townLabels\n      const size = i < states.length ? capitalSize : townSize\n      ic.append('circle').attr('id', 'burg' + i).attr('data-id', i).attr('cx', x).attr('cy', y)\n        .attr('r', size).on('click', editBurg)\n      lb.append('text').attr('data-id', i).attr('x', x).attr('y', y).attr('dy', '-0.35em')\n        .text(name).on('click', editBurg)\n    }\n    console.timeEnd('drawManors')\n  }\n\n  // get settlement and country names based on option selected\n  function getNames() {\n    console.time('getNames')\n    // if names source is an external resource\n    if (namesInput.value === '1') {\n      const request = new XMLHttpRequest()\n      const url = 'https://archivist.xalops.com/archivist-core/api/name/settlement?count='\n      request.open('GET', url + manors.length, true)\n      request.onload = function() {\n        const names = JSON.parse(request.responseText)\n        for (let i = 0; i < manors.length; i++) {\n          manors[i].name = names[i]\n          burgLabels.select('[data-id=\\'' + i + '\\']').text(names[i])\n          if (i < states.length) {\n            states[i].name = generateStateName(i)\n            labels.select('#countries').select('#regionLabel' + i).text(states[i].name)\n          }\n        }\n        console.log(names)\n      }\n      request.send(null)\n    }\n\n    if (namesInput.value !== '0') return\n    for (let i = 0; i < manors.length; i++) {\n      const culture = manors[i].culture\n      manors[i].name = generateName(culture)\n      if (i < states.length) states[i].name = generateStateName(i)\n    }\n    console.timeEnd('getNames')\n  }\n\n  function calculateChains() {\n    for (let c = 0; c < nameBase.length; c++) {\n      chain[c] = calculateChain(c)\n    }\n  }\n\n  // calculate Markov's chain from namesbase data\n  function calculateChain(c) {\n    const chain = []\n    const d = nameBase[c].join(' ').toLowerCase()\n    const method = nameBases[c].method\n\n    for (let i = -1, prev = ' ', str = ''; i < d.length - 2; prev = str, i += str.length, str =\n      '') {\n      let vowel = 0, f = ' '\n      if (method === 'let-to-let') {str = d[i + 1]} else {\n        for (let c = i + 1; str.length < 5; c++) {\n          if (d[c] === undefined) break\n          str += d[c]\n          if (str === ' ') break\n          if (d[c] !== 'o' && d[c] !== 'e' && VOWELS.includes(d[c]) && d[c + 1] === d[c]) break\n          if (d[c + 2] === ' ') {\n            str += d[c + 1]\n            break\n          }\n          if (VOWELS.includes(d[c])) vowel++\n          if (vowel && VOWELS.includes(d[c + 2])) break\n        }\n      }\n      if (i >= 0) {\n        f = d[i]\n        if (method === 'syl-to-syl') f = prev\n      }\n      if (chain[f] === undefined) chain[f] = []\n      chain[f].push(str)\n    }\n    return chain\n  }\n\n  // generate random name using Markov's chain\n  function generateName(culture, base) {\n    if (base === undefined) {\n      if (!cultures[culture]) {\n        console.error('culture ' + culture + ' is not defined. Will load default cultures and set first culture')\n        generateCultures()\n        culture = 0\n      }\n      base = cultures[culture].base\n    }\n    if (!nameBases[base]) {\n      console.error('nameBase ' + base + ' is not defined. Will load default names data and first base')\n      if (!nameBases[0]) applyDefaultNamesData()\n      base = 0\n    }\n    const method = nameBases[base].method\n    const error = function(base) {\n      tip('Names data for base ' + nameBases[base].name + ' is incorrect. Please fix in Namesbase Editor')\n      editNamesbase()\n    }\n\n    if (method === 'selection') {\n      if (nameBase[base].length < 1) {\n        error(base)\n        return\n      }\n      const rnd = _.random(nameBase[base].length - 1)\n      return nameBase[base][rnd]\n    }\n\n    const data = chain[base]\n    if (data === undefined || data[' '] === undefined) {\n      error(base)\n      return\n    }\n    const max = nameBases[base].max\n    const min = nameBases[base].min\n    const d = nameBases[base].d\n    let word = '', variants = data[' ']\n    if (variants === undefined) {\n      error(base)\n      return\n    }\n    let cur = variants[_.random(variants.length - 1)]\n    for (let i = 0; i < 21; i++) {\n      if (cur === ' ' && Math.random() < 0.8) {\n        // space means word end, but we don't want to end if word is too short\n        if (word.length < min) {\n          word = ''\n          variants = data[' ']\n        } else {break}\n      } else {\n        const l = method === 'let-to-syl' && cur.length > 1 ? cur[cur.length - 1] : cur\n        variants = data[l]\n        // word is getting too long, restart\n        word += cur // add current el to word\n        if (word.length > max) word = ''\n      }\n      if (variants === undefined) {\n        error(base)\n        return\n      }\n      cur = variants[_.random(variants.length - 1)]\n    }\n    // very rare case, let's just select a random name\n    if (word.length < 2) word = nameBase[base][_.random(nameBase[base].length - 1)]\n\n    // do not allow multi-word name if word is foo short or not allowed for culture\n    if (word.includes(' ')) {\n      let words = word.split(' ')\n      if (Math.random() > nameBases[base].m) {word = words.join('')} else {\n        for (let i = 0; i < words.length; i++) {\n          if (words[i].length < 2) {\n            if (!i) words[1] = words[0] + words[1]\n            if (i) words[i - 1] += words[i]\n            words.splice(i, 1)\n            i--\n          }\n        }\n        word = words.join(' ')\n      }\n    }\n\n    // parse word to get a final name\n    return [...word].reduce(function(r, c, i, data) {\n      if (c === ' ') {\n        if (!r.length) return ''\n        if (i + 1 === data.length) return r\n      }\n      if (!r.length) return c.toUpperCase()\n      if (r.slice(-1) === ' ') return r + c.toUpperCase()\n      if (c === data[i - 1]) {\n        if (!d.includes(c)) return r\n        if (c === data[i - 2]) return r\n      }\n      return r + c\n    }, '')\n  }\n\n  // Define areas based on the closest manor to a polygon\n  function defineRegions(withCultures) {\n    console.time('defineRegions')\n    const manorTree = d3.quadtree()\n    manors.forEach(function(m) {if (m.region !== 'removed') manorTree.add([m.x, m.y])})\n\n    const neutral = +neutralInput.value\n    land.forEach(function(i) {\n      if (i.manor !== undefined && manors[i.manor].region !== 'removed') {\n        i.region = manors[i.manor].region\n        if (withCultures && manors[i.manor].culture !== undefined) i.culture =\n          manors[i.manor].culture\n        return\n      }\n      const x = i.data[0], y = i.data[1]\n\n      let dist = 100000, manor = null\n      if (manors.length) {\n        const c = manorTree.find(x, y)\n        dist = Math.hypot(c[0] - x, c[1] - y)\n        manor = getManorId(c)\n      }\n      if (dist > neutral / 2 || manor === null) {\n        i.region = 'neutral'\n        if (withCultures) {\n          const closestCulture = cultureTree.find(x, y)\n          i.culture = getCultureId(closestCulture)\n        }\n      } else {\n        const cell = manors[manor].cell\n        if (cells[cell].fn !== i.fn) {\n          let minDist = dist * 3\n          land.forEach(function(l) {\n            if (l.fn === i.fn && l.manor !== undefined) {\n              if (manors[l.manor].region === 'removed') return\n              const distN = Math.hypot(l.data[0] - x, l.data[1] - y)\n              if (distN < minDist) {\n                minDist = distN\n                manor = l.manor\n              }\n            }\n          })\n        }\n        i.region = manors[manor].region\n        if (withCultures) i.culture = manors[manor].culture\n      }\n    })\n    console.timeEnd('defineRegions')\n  }\n\n  // Define areas cells\n  function drawRegions() {\n    console.time('drawRegions')\n    labels.select('#countries').selectAll('*').remove()\n\n    // arrays to store edge data\n    const edges = [], coastalEdges = [], borderEdges = [], neutralEdges = []\n    for (let a = 0; a < states.length; a++) {\n      edges[a] = []\n      coastalEdges[a] = []\n    }\n    const e = diagram.edges\n    for (let i = 0; i < e.length; i++) {\n      if (e[i] === undefined) continue\n      const start = e[i][0].join(' ')\n      const end = e[i][1].join(' ')\n      const p = {start, end}\n      if (e[i].left === undefined) {\n        const r = e[i].right.index\n        const rr = cells[r].region\n        if (Number.isInteger(rr)) edges[rr].push(p)\n        continue\n      }\n      if (e[i].right === undefined) {\n        const l = e[i].left.index\n        const lr = cells[l].region\n        if (Number.isInteger(lr)) edges[lr].push(p)\n        continue\n      }\n      const l = e[i].left.index\n      const r = e[i].right.index\n      const lr = cells[l].region\n      const rr = cells[r].region\n      if (lr === rr) continue\n      if (Number.isInteger(lr)) {\n        edges[lr].push(p)\n        if (rr === undefined) {\n          coastalEdges[lr].push(p)\n        } else if (rr === 'neutral') {neutralEdges.push(p)}\n      }\n      if (Number.isInteger(rr)) {\n        edges[rr].push(p)\n        if (lr === undefined) {\n          coastalEdges[rr].push(p)\n        } else if (lr === 'neutral') {neutralEdges.push(p)} else if (Number.isInteger(\n          lr)) {borderEdges.push(p)}\n      }\n    }\n    edges.map(function(e, i) {\n      if (e.length) {\n        drawRegion(e, i)\n        drawRegionCoast(coastalEdges[i], i)\n      }\n    })\n    drawBorders(borderEdges, 'state')\n    drawBorders(neutralEdges, 'neutral')\n    console.timeEnd('drawRegions')\n  }\n\n  function drawRegion(edges, region) {\n    let path = ''\n    const array = []\n    lineGen.curve(d3.curveLinear)\n    while (edges.length > 2) {\n      const edgesOrdered = [] // to store points in a correct order\n      const start = edges[0].start\n      let end = edges[0].end\n      edges.shift()\n      let spl = start.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      spl = end.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      for (let i = 0; end !== start && i < 2000; i++) {\n        const next = $.grep(edges, function(e) {\n          return (e.start == end || e.end == end)\n        })\n        if (next.length > 0) {\n          if (next[0].start == end) {\n            end = next[0].end\n          } else if (next[0].end == end) {\n            end = next[0].start\n          }\n          spl = end.split(' ')\n          edgesOrdered.push({scX: spl[0], scY: spl[1]})\n        }\n        const rem = edges.indexOf(next[0])\n        edges.splice(rem, 1)\n      }\n      path += lineGen(edgesOrdered) + 'Z '\n      array[array.length] = edgesOrdered.map(function(e) {return [+e.scX, +e.scY]})\n    }\n    const color = states[region].color\n    regions.append('path').attr('d', round(path, 1)).attr('fill', color)\n           .attr('class', 'region' + region)\n    array.sort(function(a, b) {return b.length - a.length})\n    let capital = states[region].capital\n    // add capital cell as a hole\n    if (!isNaN(capital)) {\n      const capitalCell = manors[capital].cell\n      array.push(polygons[capitalCell])\n    }\n    const name = states[region].name\n    const c = polylabel(array, 1.0) // pole of inaccessibility\n    labels.select('#countries').append('text').attr('id', 'regionLabel' + region)\n          .attr('x', Math.round(c[0])).attr('y', Math.round(c[1])).text(name).on('click', editLabel)\n    states[region].area = Math.round(Math.abs(d3.polygonArea(array[0]))) // define region area\n  }\n\n  function drawRegionCoast(edges, region) {\n    let path = ''\n    while (edges.length > 0) {\n      const edgesOrdered = [] // to store points in a correct order\n      const start = edges[0].start\n      let end = edges[0].end\n      edges.shift()\n      let spl = start.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      spl = end.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      let next = $.grep(edges, function(e) {\n        return (e.start == end || e.end == end)\n      })\n      while (next.length > 0) {\n        if (next[0].start == end) {\n          end = next[0].end\n        } else if (next[0].end == end) {\n          end = next[0].start\n        }\n        spl = end.split(' ')\n        edgesOrdered.push({scX: spl[0], scY: spl[1]})\n        const rem = edges.indexOf(next[0])\n        edges.splice(rem, 1)\n        next = $.grep(edges, function(e) {return (e.start == end || e.end == end)})\n      }\n      path += lineGen(edgesOrdered)\n    }\n    const color = states[region].color\n    regions.append('path').attr('d', round(path, 1)).attr('fill', 'none').attr('stroke', color)\n           .attr('stroke-width', 5).attr('class', 'region' + region)\n  }\n\n  function drawBorders(edges, type) {\n    let path = ''\n    if (edges.length < 1) {return}\n    while (edges.length > 0) {\n      const edgesOrdered = [] // to store points in a correct order\n      const start = edges[0].start\n      let end = edges[0].end\n      edges.shift()\n      let spl = start.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      spl = end.split(' ')\n      edgesOrdered.push({scX: spl[0], scY: spl[1]})\n      let next = $.grep(edges, function(e) {\n        return (e.start == end || e.end == end)\n      })\n      while (next.length > 0) {\n        if (next[0].start == end) {\n          end = next[0].end\n        } else if (next[0].end == end) {\n          end = next[0].start\n        }\n        spl = end.split(' ')\n        edgesOrdered.push({scX: spl[0], scY: spl[1]})\n        const rem = edges.indexOf(next[0])\n        edges.splice(rem, 1)\n        next = $.grep(edges, function(e) {return (e.start == end || e.end == end)})\n      }\n      path += lineGen(edgesOrdered)\n    }\n    if (type === 'state') {stateBorders.append('path').attr('d', round(path, 1))}\n    if (type === 'neutral') {neutralBorders.append('path').attr('d', round(path, 1))}\n  }\n\n  // generate region name\n  function generateStateName(state) {\n    let culture = null\n    if (states[state]) if (manors[states[state].capital]) culture =\n      manors[states[state].capital].culture\n    let name = 'NameIdontWant'\n    if (Math.random() < 0.85 || culture === null) {\n      // culture is random if capital is not yet defined\n      if (culture === null) culture = _.random(cultures.length - 1)\n      // try to avoid too long words as a basename\n      for (let i = 0; i < 20 && name.length > 7; i++) {\n        name = generateName(culture)\n      }\n    } else {\n      name = manors[state].name\n    }\n    const base = cultures[culture].base\n\n    let addSuffix = false\n    // handle special cases\n    const e = name.slice(-2)\n    if (base === 5 && (e === 'sk' || e === 'ev' || e === 'ov')) {\n      // remove -sk and -ev/-ov for Ruthenian\n      name = name.slice(0, -2)\n      addSuffix = true\n    } else if (name.length > 5 && base === 1 && name.slice(-3) === 'ton') {\n      // remove -ton ending for English\n      name = name.slice(0, -3)\n      addSuffix = true\n    } else if (name.length > 6 && name.slice(-4) === 'berg') {\n      // remove -berg ending for any\n      name = name.slice(0, -4)\n      addSuffix = true\n    } else if (base === 12) {\n      // Japanese ends on vowels\n      if (VOWELS.includes(name.slice(-1))) return name\n      return name + 'u'\n    } else if (base === 10) {\n      // Korean has \"guk\" suffix\n      if (name.slice(-3) === 'guk') return name\n      if (name.slice(-1) === 'g') name = name.slice(0, -1)\n      if (Math.random() < 0.2 && name.length < 7) name = name + 'guk' // 20% for \"guk\"\n      return name\n    } else if (base === 11) {\n      // Chinese has \"guo\" suffix\n      if (name.slice(-3) === 'guo') return name\n      if (name.slice(-1) === 'g') name = name.slice(0, -1)\n      if (Math.random() < 0.3 && name.length < 7) name = name + ' Guo' // 30% for \"guo\"\n      return name\n    }\n\n    // define if suffix should be used\n    let vowel = VOWELS.includes(name.slice(-1)) // last char is vowel\n    if (vowel && name.length > 3) {\n      if (Math.random() < 0.85) {\n        if (VOWELS.includes(name.slice(-2, -1))) {\n          name = name.slice(0, -2)\n          addSuffix = true // 85% for vv\n        } else if (Math.random() < 0.7) {\n          name = name.slice(0, -1)\n          addSuffix = true // ~60% for cv\n        }\n      }\n    } else if (Math.random() < 0.6) {\n      addSuffix = true // 60% for cc and vc\n    }\n\n    if (addSuffix === false) return name\n    let suffix = 'ia' // common latin suffix\n    const rnd = Math.random()\n    if (rnd < 0.05 && base === 3) suffix = 'terra' // 5% \"terra\" for Italian\n    else if (rnd < 0.05 && base === 4) suffix = 'terra' // 5% \"terra\" for Spanish\n    else if (rnd < 0.05 && base == 2) suffix = 'terre' // 5% \"terre\" for French\n    else if (rnd < 0.5 && base == 0) suffix = 'land' // 50% \"land\" for German\n    else if (rnd < 0.4 && base == 1) suffix = 'land' // 40% \"land\" for English\n    else if (rnd < 0.3 && base == 6) suffix = 'land' // 30% \"land\" for Nordic\n    else if (rnd < 0.1 && base == 7) suffix = 'eia' // 10% \"eia\" for Greek (\"ia\" is also Greek)\n    else if (rnd < 0.4 && base == 9) suffix = 'maa' // 40% \"maa\" for Finnic\n    if (name.slice(-1 * suffix.length) === suffix) return name // no suffix if name already ends with it\n    if (name.slice(-1) === suffix.charAt(0)) name = name.slice(0, -1) // remove name last letter if it's a suffix first letter\n    return name + suffix\n  }\n\n  // re-calculate cultures\n  function recalculateCultures(fullRedraw) {\n    console.time('recalculateCultures')\n    // For each capital find closest culture and assign it to capital\n    states.forEach(function(s) {\n      if (s.capital === 'neutral' || s.capital === 'select') return\n      const capital = manors[s.capital]\n      const c = cultureTree.find(capital.x, capital.y)\n      capital.culture = getCultureId(c)\n    })\n\n    // For each town if distance to its capital > neutral / 2,\n    // assign closest culture to the town; else assign capital's culture\n    const manorTree = d3.quadtree()\n    const neutral = +neutralInput.value\n    manors.forEach(function(m) {\n      if (m.region === 'removed') return\n      manorTree.add([m.x, m.y])\n      if (m.region === 'neutral') {\n        const culture = cultureTree.find(m.x, m.y)\n        m.culture = getCultureId(culture)\n        return\n      }\n      const c = states[m.region].capital\n      if (c !== 'neutral' && c !== 'select') {\n        const dist = Math.hypot(m.x - manors[c].x, m.y - manors[c].y)\n        if (dist <= neutral / 5) {\n          m.culture = manors[c].culture\n          return\n        }\n      }\n      const culture = cultureTree.find(m.x, m.y)\n      m.culture = getCultureId(culture)\n    })\n\n    // For each land cell if distance to closest manor > neutral / 2,\n    // assign closest culture to the cell; else assign manors's culture\n    const changed = []\n    land.forEach(function(i) {\n      const x = i.data[0], y = i.data[1]\n      const c = manorTree.find(x, y)\n      const culture = i.culture\n      const dist = Math.hypot(c[0] - x, c[1] - y)\n      let manor = getManorId(c)\n      if (dist > neutral / 2 || manor === undefined) {\n        const closestCulture = cultureTree.find(i.data[0], i.data[1])\n        i.culture = getCultureId(closestCulture)\n      } else {\n        const cell = manors[manor].cell\n        if (cells[cell].fn !== i.fn) {\n          let minDist = dist * 3\n          land.forEach(function(l) {\n            if (l.fn === i.fn && l.manor !== undefined) {\n              if (manors[l.manor].region === 'removed') return\n              const distN = Math.hypot(l.data[0] - x, l.data[1] - y)\n              if (distN < minDist) {\n                minDist = distN\n                manor = l.manor\n              }\n            }\n          })\n        }\n        i.culture = manors[manor].culture\n      }\n      // re-color cells\n      if (i.culture !== culture || fullRedraw) {\n        const clr = cultures[i.culture].color\n        cults.select('#cult' + i.index).attr('fill', clr).attr('stroke', clr)\n      }\n    })\n    console.timeEnd('recalculateCultures')\n  }\n\n  // get culture Id from center coordinates\n  function getCultureId(c) {\n    for (let i = 0; i < cultures.length; i++) {\n      if (cultures[i].center[0] === c[0]) if (cultures[i].center[1] === c[1]) return i\n    }\n  }\n\n  // get manor Id from center coordinates\n  function getManorId(c) {\n    for (let i = 0; i < manors.length; i++) {\n      if (manors[i].x === c[0]) if (manors[i].y === c[1]) return i\n    }\n  }\n\n  // focus on coorditanes, cell or burg provided in searchParams\n  function focusOn() {\n    if (params.get('from') === 'MFCG') {\n      // focus on burg from MFCG\n      findBurgForMFCG()\n      return\n    }\n    let s = params.get('scale') || 8\n    let x = params.get('x')\n    let y = params.get('y')\n    let c = params.get('cell')\n    if (c !== null) {\n      x = cells[+c].data[0]\n      y = cells[+c].data[1]\n    }\n    let b = params.get('burg')\n    if (b !== null) {\n      x = manors[+b].x\n      y = manors[+b].y\n    }\n    if (x !== null && y !== null) zoomTo(x, y, s, 1600)\n  }\n\n  // find burg from MFCG and focus on it\n  function findBurgForMFCG() {\n    if (!manors.length) {\n      console.error('No burgs generated. Cannot select a burg for MFCG')\n      return\n    }\n    const size = +params.get('size')\n    let coast = +params.get('coast')\n    let port = +params.get('port')\n    let river = +params.get('river')\n    let selection = defineSelection(coast, port, river)\n    if (!selection.length) selection = defineSelection(coast, !port, !river)\n    if (!selection.length) selection = defineSelection(!coast, 0, !river)\n    if (!selection.length) selection = manors[0] // select first if nothing is found\n    if (!selection.length) {\n      console.error('Cannot find a burg for MFCG')\n      return\n    }\n\n    function defineSelection(coast, port, river) {\n      let selection = []\n      if (port && river) selection = $.grep(manors,\n        function(e) {return cells[e.cell].port !== undefined && cells[e.cell].river !== undefined})\n      else if (!port && coast && river) selection = $.grep(manors,\n        function(e) {return cells[e.cell].port === undefined && cells[e.cell].ctype === 1 && cells[e.cell].river !== undefined})\n      else if (!coast && !river) selection = $.grep(manors,\n        function(e) {return cells[e.cell].ctype !== 1 && cells[e.cell].river === undefined})\n      else if (!coast && river) selection = $.grep(manors,\n        function(e) {return cells[e.cell].ctype !== 1 && cells[e.cell].river !== undefined})\n      else if (coast && !river) selection = $.grep(manors,\n        function(e) {return cells[e.cell].ctype === 1 && cells[e.cell].river === undefined})\n      return selection\n    }\n\n    // select a burg with closes population from selection\n    const selected = d3.scan(selection,\n      function(a, b) {return Math.abs(a.population - size) - Math.abs(b.population - size)})\n    const burg = selection[selected].i\n    if (size && burg !== undefined) {manors[burg].population = size} else {return}\n\n    // focus on found burg\n    const label = burgLabels.select('[data-id=\\'' + burg + '\\']')\n    if (!label.size()) {\n      console.error('Cannot find a label for MFCG burg ' + burg)\n      return\n    }\n    tip('Here stands the glorious city of ' + manors[burg].name, true)\n    label.classed('drag', true).on('mouseover', function() {\n      d3.select(this).classed('drag', false)\n      tip('', true)\n    })\n    const x = +label.attr('x'), y = +label.attr('y')\n    zoomTo(x, y, 8, 1600)\n  }\n\n  // draw Cultures\n  function toggleCultures() {\n    if (cults.selectAll('path').size() == 0) {\n      land.map(function(i) {\n        const color = cultures[i.culture].color\n        cults.append('path')\n             .attr('d', 'M' + polygons[i.index].join('L') + 'Z')\n             .attr('id', 'cult' + i.index)\n             .attr('fill', color)\n             .attr('stroke', color)\n      })\n    } else {\n      cults.selectAll('path').remove()\n    }\n  }\n\n  // clean data to get rid of redundand info\n  function cleanData() {\n    console.time('cleanData')\n    cells.map(function(c) {\n      delete c.cost\n      delete c.used\n      delete c.coastX\n      delete c.coastY\n      if (c.ctype === undefined) delete c.ctype\n      if (c.lake === undefined) delete c.lake\n      c.height = Math.trunc(c.height)\n      if (c.height >= 20) c.flux = _.round(c.flux, 2)\n    })\n    // restore layers if they was turned on\n    if (!$('#toggleHeight').hasClass('buttonoff') && !terrs.selectAll('path')\n                                                           .size()) toggleHeight()\n    if (!$('#toggleCultures').hasClass('buttonoff') && !cults.selectAll('path')\n                                                             .size()) toggleCultures()\n    closeDialogs()\n    invokeActiveZooming()\n    console.timeEnd('cleanData')\n  }\n\n  // close all dialogs except stated\n  function closeDialogs(except) {\n    except = except || '#except'\n    $('.dialog:visible').not(except).each(function(e) {\n      $(this).dialog('close')\n    })\n  }\n\n  // change transparency for modal windowa\n  function changeDialogsTransparency(v) {\n    localStorage.setItem('transparency', v)\n    const alpha = (100 - +v) / 100\n    const optionsColor = 'rgba(164, 139, 149, ' + alpha + ')' // purple-red\n    const dialogsColor = 'rgba(255, 255, 255, ' + alpha + ')' // white\n    document.getElementById('options').style.backgroundColor = optionsColor\n    document.getElementById('dialogs').style.backgroundColor = dialogsColor\n  }\n\n  // Draw the water flux system (for dubugging)\n  function toggleFlux() {\n    const colorFlux = d3.scaleSequential(d3chromatic.interpolateBlues)\n    if (terrs.selectAll('path').size() == 0) {\n      land.map(function(i) {\n        terrs.append('path')\n             .attr('d', 'M' + polygons[i.index].join('L') + 'Z')\n             .attr('fill', colorFlux(0.1 + i.flux))\n             .attr('stroke', colorFlux(0.1 + i.flux))\n      })\n    } else {\n      terrs.selectAll('path').remove()\n    }\n  }\n\n  // Draw the Relief (need to create more beautiness)\n  function drawRelief() {\n    console.time('drawRelief')\n    let h, count, rnd, cx, cy, swampCount = 0\n    const hills = terrain.select('#hills')\n    const mounts = terrain.select('#mounts')\n    const swamps = terrain.select('#swamps')\n    const forests = terrain.select('#forests')\n    terrain.selectAll('g').selectAll('g').remove()\n    // sort the land to Draw the top element first (reduce the elements overlapping)\n    land.sort(compareY)\n    for (let i = 0; i < land.length; i++) {\n      if (land[i].river) continue // no icons on rivers\n      const cell = land[i].index\n      const p = d3.polygonCentroid(polygons[cell]) // polygon centroid point\n      if (p === undefined) continue // something is wrong with data\n      const height = land[i].height\n      const area = land[i].area\n      if (height >= 70) {\n        // mount icon\n        h = (height - 55) * 0.12\n        for (let c = 0, a = area; Math.random() < a / 50; c++, a -= 50) {\n          if (polygons[cell][c] === undefined) break\n          const g = mounts.append('g').attr('data-cell', cell)\n          if (c < 2) {\n            cx = p[0] - h / 100 * (1 - c / 10) - c * 2\n            cy = p[1] + h / 400 + c\n          } else {\n            const p2 = polygons[cell][c]\n            cx = (p[0] * 1.2 + p2[0] * 0.8) / 2\n            cy = (p[1] * 1.2 + p2[1] * 0.8) / 2\n          }\n          rnd = Math.random() * 0.8 + 0.2\n          let mount = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h + rnd) + ',' + (cy - h / 1.2 + rnd) + ' L' + (cx + h * 2) + ',' + cy\n          let shade = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h / 1.5) + ',' + cy\n          let dash = 'M' + (cx - 0.1) + ',' + (cy + 0.3) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.3)\n          dash +=\n            'M' + (cx + 0.4) + ',' + (cy + 0.6) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.6)\n          g.append('path').attr('d', round(mount, 1)).attr('stroke', '#5c5c70')\n          g.append('path').attr('d', round(shade, 1)).attr('fill', '#999999')\n          g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes')\n        }\n      } else if (height > 50) {\n        // hill icon\n        h = (height - 40) / 10\n        if (h > 1.7) h = 1.7\n        for (let c = 0, a = area; Math.random() < a / 30; c++, a -= 30) {\n          if (land[i].ctype === 1 && c > 0) break\n          if (polygons[cell][c] === undefined) break\n          const g = hills.append('g').attr('data-cell', cell)\n          if (c < 2) {\n            cx = p[0] - h - c * 1.2\n            cy = p[1] + h / 4 + c / 1.6\n          } else {\n            const p2 = polygons[cell][c]\n            cx = (p[0] * 1.2 + p2[0] * 0.8) / 2\n            cy = (p[1] * 1.2 + p2[1] * 0.8) / 2\n          }\n          let hill = 'M' + cx + ',' + cy + ' Q' + (cx + h) + ',' + (cy - h) + ' ' + (cx + 2 * h) + ',' + cy\n          let shade = 'M' + (cx + 0.6 * h) + ',' + (cy + 0.1) + ' Q' + (cx + h * 0.95) + ',' + (cy - h * 0.91) + ' ' + (cx + 2 * h * 0.97) + ',' + cy\n          let dash = 'M' + (cx - 0.1) + ',' + (cy + 0.2) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.2)\n          dash +=\n            'M' + (cx + 0.4) + ',' + (cy + 0.4) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.4)\n          g.append('path').attr('d', round(hill, 1)).attr('stroke', '#5c5c70')\n          g.append('path').attr('d', round(shade, 1)).attr('fill', 'white')\n          g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes')\n        }\n      }\n\n      // swamp icons\n      if (height >= 21 && height < 22 && swampCount < +swampinessInput.value && land[i].used != 1) {\n        const g = swamps.append('g').attr('data-cell', cell)\n        swampCount++\n        land[i].used = 1\n        let swamp = drawSwamp(p[0], p[1])\n        land[i].neighbors.forEach(function(e) {\n          if (cells[e].height >= 20 && cells[e].height < 30 && !cells[e].river && cells[e].used != 1) {\n            cells[e].used = 1\n            swamp += drawSwamp(cells[e].data[0], cells[e].data[1])\n          }\n        })\n        g.append('path').attr('d', round(swamp, 1))\n      }\n\n      // forest icons\n      if (Math.random() < height / 100 && height >= 22 && height < 48) {\n        for (let c = 0, a = area; Math.random() < a / 15; c++, a -= 15) {\n          if (land[i].ctype === 1 && c > 0) break\n          if (polygons[cell][c] === undefined) break\n          const g = forests.append('g').attr('data-cell', cell)\n          if (c === 0) {\n            cx = _.round(p[0] - 1 - Math.random(), 1)\n            cy = p[1] - 2\n          } else {\n            const p2 = polygons[cell][c]\n            if (c > 1) {\n              const dist = Math.hypot(p2[0] - polygons[cell][c - 1][0],\n                p2[1] - polygons[cell][c - 1][1])\n              if (dist < 2) continue\n            }\n            cx = (p[0] * 0.5 + p2[0] * 1.5) / 2\n            cy = (p[1] * 0.5 + p2[1] * 1.5) / 2 - 1\n          }\n          const forest = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 v0.75 h0.1 v-0.75 q0.95,-0.47 -0.05,-1.25 z '\n          const light = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 h0.1 q0.95,-0.47 -0.05,-1.25 z '\n          const shade = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 q-0.2,-0.55 0,-1.1 z '\n          g.append('path').attr('d', forest)\n          g.append('path').attr('d', light).attr('fill', 'white').attr('stroke', 'none')\n          g.append('path').attr('d', shade).attr('fill', '#999999').attr('stroke', 'none')\n        }\n      }\n    }\n    terrain.selectAll('g').selectAll('g').on('click', editReliefIcon)\n    console.timeEnd('drawRelief')\n  }\n\n  function addReliefIcon(height, type, cx, cy, cell) {\n    const g = terrain.select('#' + type).append('g').attr('data-cell', cell)\n    if (type === 'mounts') {\n      const h = height >= 0.7 ? (height - 0.55) * 12 : 1.8\n      const rnd = Math.random() * 0.8 + 0.2\n      let mount = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h + rnd) + ',' + (cy - h / 1.2 + rnd) + ' L' + (cx + h * 2) + ',' + cy\n      let shade = 'M' + cx + ',' + cy + ' L' + (cx + h / 3 + rnd) + ',' + (cy - h / 4 - rnd * 1.2) + ' L' + (cx + h / 1.1) + ',' + (cy - h) + ' L' + (cx + h / 1.5) + ',' + cy\n      let dash = 'M' + (cx - 0.1) + ',' + (cy + 0.3) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.3)\n      dash += 'M' + (cx + 0.4) + ',' + (cy + 0.6) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.6)\n      g.append('path').attr('d', round(mount, 1)).attr('stroke', '#5c5c70')\n      g.append('path').attr('d', round(shade, 1)).attr('fill', '#999999')\n      g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes')\n    }\n    if (type === 'hills') {\n      let h = height > 0.5 ? (height - 0.4) * 10 : 1.2\n      if (h > 1.8) h = 1.8\n      let hill = 'M' + cx + ',' + cy + ' Q' + (cx + h) + ',' + (cy - h) + ' ' + (cx + 2 * h) + ',' + cy\n      let shade = 'M' + (cx + 0.6 * h) + ',' + (cy + 0.1) + ' Q' + (cx + h * 0.95) + ',' + (cy - h * 0.91) + ' ' + (cx + 2 * h * 0.97) + ',' + cy\n      let dash = 'M' + (cx - 0.1) + ',' + (cy + 0.2) + ' L' + (cx + 2 * h + 0.1) + ',' + (cy + 0.2)\n      dash += 'M' + (cx + 0.4) + ',' + (cy + 0.4) + ' L' + (cx + 2 * h - 0.3) + ',' + (cy + 0.4)\n      g.append('path').attr('d', round(hill, 1)).attr('stroke', '#5c5c70')\n      g.append('path').attr('d', round(shade, 1)).attr('fill', 'white')\n      g.append('path').attr('d', round(dash, 1)).attr('class', 'strokes')\n    }\n    if (type === 'swamps') {\n      const swamp = drawSwamp(cx, cy)\n      g.append('path').attr('d', round(swamp, 1))\n    }\n    if (type === 'forests') {\n      const rnd = Math.random()\n      const h = rnd * 0.4 + 0.6\n      const forest = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 v0.75 h0.1 v-0.75 q0.95,-0.47 -0.05,-1.25 z '\n      const light = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 h0.1 q0.95,-0.47 -0.05,-1.25 z '\n      const shade = 'M' + cx + ',' + cy + ' q-1,0.8 -0.05,1.25 q-0.2,-0.55 0,-1.1 z '\n      g.append('path').attr('d', forest)\n      g.append('path').attr('d', light).attr('fill', 'white').attr('stroke', 'none')\n      g.append('path').attr('d', shade).attr('fill', '#999999').attr('stroke', 'none')\n    }\n    g.on('click', editReliefIcon)\n    return g\n  }\n\n  function compareY(a, b) {\n    if (a.data[1] > b.data[1]) return 1\n    if (a.data[1] < b.data[1]) return -1\n    return 0\n  }\n\n  function drawSwamp(x, y) {\n    const h = 0.6\n    let line = ''\n    for (let c = 0; c < 3; c++) {\n      let cx\n      let cy\n      if (c == 0) {\n        cx = x\n        cy = y - 0.5 - Math.random()\n      }\n      if (c == 1) {\n        cx = x + h + Math.random()\n        cy = y + h + Math.random()\n      }\n      if (c == 2) {\n        cx = x - h - Math.random()\n        cy = y + 2 * h + Math.random()\n      }\n      line +=\n        'M' + cx + ',' + cy + ' H' + (cx - h / 6) + ' M' + cx + ',' + cy + ' H' + (cx + h / 6) + ' M' + cx + ',' + cy + ' L' + (cx - h / 3) + ',' + (cy - h / 2) + ' M' + cx + ',' + cy + ' V' + (cy - h / 1.5) + ' M' + cx + ',' + cy + ' L' + (cx + h / 3) + ',' + (cy - h / 2)\n      line +=\n        'M' + (cx - h) + ',' + cy + ' H' + (cx - h / 2) + ' M' + (cx + h / 2) + ',' + cy + ' H' + (cx + h)\n    }\n    return line\n  }\n\n  // Complete the map for the \"customize\" mode\n  function getMap() {\n    if (customization !== 1) {\n      tip(\n        'Nothing to complete! Click on \"Edit\" or \"Clear all\" to enter a heightmap customization mode',\n        null, 'error')\n      return\n    }\n    if (+landmassCounter.innerHTML < 150) {\n      tip('Insufficient land area! Please add more land cells to complete the map', null,\n        'error')\n      return\n    }\n    exitCustomization()\n    console.time('TOTAL')\n    markFeatures()\n    drawOcean()\n    elevateLakes()\n    resolveDepressionsPrimary()\n    reGraph()\n    resolveDepressionsSecondary()\n    flux()\n    addLakes()\n    if (!changeHeights.checked) restoreCustomHeights()\n    drawCoastline()\n    drawRelief()\n    const keepData = states.length && manors.length\n    if (keepData) {\n      restoreRegions()\n    } else {\n      generateCultures()\n      manorsAndRegions()\n    }\n    cleanData()\n    console.timeEnd('TOTAL')\n  }\n\n  // Add support \"click to add\" button events\n  $('#customizeTab').click(clickToAdd)\n\n  function clickToAdd() {\n    if (modules.clickToAdd) return\n    modules.clickToAdd = true\n\n    // add label on click\n    $('#addLabel').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        restoreDefaultEvents()\n      } else {\n        $('.pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        closeDialogs('.stable')\n        viewbox.style('cursor', 'crosshair').on('click', addLabelOnClick)\n      }\n    })\n\n    function addLabelOnClick() {\n      const point = d3.mouse(this)\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n\n      // get culture in clicked point to generate a name\n      const closest = cultureTree.find(x, y)\n      const culture = cultureTree.data().indexOf(closest) || 0\n      const name = generateName(culture)\n\n      let group = labels.select('#addedLabels')\n      if (!group.size()) {\n        group = labels.append('g').attr('id', 'addedLabels')\n                      .attr('fill', '#3e3e4b').attr('opacity', 1)\n                      .attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC')\n                      .attr('font-size', 18).attr('data-size', 18)\n      }\n      let id = 'label' + Date.now().toString().slice(7)\n      group.append('text').attr('id', id).attr('x', x).attr('y', y).text(name)\n           .on('click', editLabel)\n\n      if (d3.event.shiftKey === false) {\n        $('#addLabel').removeClass('pressed')\n        restoreDefaultEvents()\n      }\n    }\n\n    // add burg on click\n    $('#addBurg').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        restoreDefaultEvents()\n        tip('', true)\n      } else {\n        $('.pressed').removeClass('pressed')\n        $(this).attr('data-state', -1).addClass('pressed')\n        $('#burgAdd, #burgAddfromEditor').addClass('pressed')\n        viewbox.style('cursor', 'crosshair').on('click', addBurgOnClick)\n        tip('Click on map to place burg icon with a label. Hold Shift to place several', true)\n      }\n    })\n\n    function addBurgOnClick() {\n      const point = d3.mouse(this)\n      const index = getIndex(point)\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n\n      // get culture in clicked point to generate a name\n      let culture = cells[index].culture\n      if (culture === undefined) culture = 0\n      const name = generateName(culture)\n\n      if (cells[index].height < 20) {\n        tip('Cannot place burg in the water! Select a land cell', null, 'error')\n        return\n      }\n      if (cells[index].manor !== undefined) {\n        tip('There is already a burg in this cell. Please select a free cell', null, 'error')\n        $('#grid').fadeIn()\n        d3.select('#toggleGrid').classed('buttonoff', false)\n        return\n      }\n      const i = manors.length\n      const size = burgIcons.select('#towns').attr('size')\n      burgIcons.select('#towns').append('circle').attr('id', 'burg' + i).attr('data-id', i)\n               .attr('cx', x).attr('cy', y).attr('r', size).on('click', editBurg)\n      burgLabels.select('#towns').append('text').attr('data-id', i).attr('x', x).attr('y', y)\n                .attr('dy', '-0.35em').text(name).on('click', editBurg)\n      invokeActiveZooming()\n\n      if (d3.event.shiftKey === false) {\n        $('#addBurg, #burgAdd, #burgAddfromEditor').removeClass('pressed')\n        restoreDefaultEvents()\n      }\n\n      let region, state = +$('#addBurg').attr('data-state')\n      if (state !== -1) {\n        region = states[state].capital === 'neutral' ? 'neutral' : state\n        const oldRegion = cells[index].region\n        if (region !== oldRegion) {\n          cells[index].region = region\n          redrawRegions()\n        }\n      } else {\n        region = cells[index].region\n        state = region === 'neutral' ? states.length - 1 : region\n      }\n      cells[index].manor = i\n      let score = cells[index].score\n      if (score <= 0) {score = _.round(Math.random(), 2)}\n      if (cells[index].crossroad) {score += cells[index].crossroad} // crossroads\n      if (cells[index].confluence) {score += Math.pow(cells[index].confluence, 0.3)} // confluences\n      if (cells[index].port !== undefined) {score *= 3} // port-capital\n      const population = _.round(score, 1)\n      manors.push({i, cell: index, x, y, region, culture, name, population})\n      recalculateStateData(state)\n      updateCountryEditors()\n      tip('', true)\n    }\n\n    // add river on click\n    $('#addRiver').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        unselect()\n      } else {\n        $('.pressed').removeClass('pressed')\n        unselect()\n        $(this).addClass('pressed')\n        closeDialogs('.stable')\n        viewbox.style('cursor', 'crosshair').on('click', addRiverOnClick)\n        tip('Click on map to place new river or extend an existing one', true)\n      }\n    })\n\n    function addRiverOnClick() {\n      const point = d3.mouse(this)\n      const index = diagram.find(point[0], point[1]).index\n      let cell = cells[index]\n      if (cell.river || cell.height < 20) return\n      const dataRiver = [] // to store river points\n      const last = $('#rivers > path').last()\n      const river = last.length ? +last.attr('id').slice(5) + 1 : 0\n      cell.flux = 0.85\n      while (cell) {\n        cell.river = river\n        const x = cell.data[0], y = cell.data[1]\n        dataRiver.push({x, y, cell: index})\n        const nHeights = []\n        cell.neighbors.forEach(function(e) {nHeights.push(cells[e].height)})\n        const minId = nHeights.indexOf(d3.min(nHeights))\n        const min = cell.neighbors[minId]\n        const tx = cells[min].data[0], ty = cells[min].data[1]\n        if (cells[min].height < 20) {\n          const px = (x + tx) / 2\n          const py = (y + ty) / 2\n          dataRiver.push({x: px, y: py, cell: index})\n          cell = undefined\n        } else {\n          if (cells[min].river === undefined) {\n            cells[min].flux += cell.flux\n            cell = cells[min]\n          } else {\n            const r = cells[min].river\n            const riverEl = $('#river' + r)\n            const riverCells = $.grep(land, function(e) {return e.river === r})\n            riverCells.sort(function(a, b) {return b.height - a.height})\n            const riverCellsUpper = $.grep(riverCells,\n              function(e) {return e.height > cells[min].height})\n            if (dataRiver.length > riverCellsUpper.length) {\n              // new river is more perspective\n              const avPrec = _.round(precInput.value / Math.sqrt(cells.length), 2)\n              let dataRiverMin = []\n              riverCells.map(function(c) {\n                if (c.height < cells[min].height) {\n                  cells[c.index].river = undefined\n                  cells[c.index].flux = avPrec\n                } else {\n                  dataRiverMin.push({x: c.data[0], y: c.data[1], cell: c.index})\n                }\n              })\n              cells[min].flux += cell.flux\n              if (cells[min].confluence) {\n                cells[min].confluence += riverCellsUpper.length\n              } else {cells[min].confluence = riverCellsUpper.length}\n              cell = cells[min]\n              // redraw old river's upper part or remove if small\n              if (dataRiverMin.length > 1) {\n                var riverAmended = amendRiver(dataRiverMin, 1)\n                var d = drawRiver(riverAmended, 1.3, 1)\n                riverEl.attr('d', d).attr('data-width', 1.3).attr('data-increment', 1)\n              } else {\n                riverEl.remove()\n                dataRiverMin.map(function(c) {cells[c.cell].river = undefined})\n              }\n            } else {\n              if (cells[min].confluence) {\n                cells[min].confluence += dataRiver.length\n              } else {cells[min].confluence = dataRiver.length}\n              cells[min].flux += cell.flux\n              dataRiver.push({x: tx, y: ty, cell: min})\n              cell = undefined\n            }\n          }\n        }\n      }\n      const rndFactor = 0.2 + Math.random() * 1.6 // random factor in range 0.2-1.8\n      var riverAmended = amendRiver(dataRiver, rndFactor)\n      var d = drawRiver(riverAmended, 1.3, 1)\n      rivers.append('path').attr('d', d).attr('id', 'river' + river)\n            .attr('data-width', 1.3).attr('data-increment', 1).on('click', editRiver)\n    }\n\n    // add relief icon on click\n    $('#addRelief').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        restoreDefaultEvents()\n      } else {\n        $('.pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        closeDialogs('.stable')\n        viewbox.style('cursor', 'crosshair').on('click', addReliefOnClick)\n        tip('Click on map to place relief icon. Hold Shift to place several', true)\n      }\n    })\n\n    function addReliefOnClick() {\n      const point = d3.mouse(this)\n      const index = getIndex(point)\n      const height = cells[index].height\n      if (height < 20) {\n        tip('Cannot place icon in the water! Select a land cell')\n        return\n      }\n\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n      const type = reliefGroup.value\n      addReliefIcon(height / 100, type, x, y, index)\n\n      if (d3.event.shiftKey === false) {\n        $('#addRelief').removeClass('pressed')\n        restoreDefaultEvents()\n      }\n      tip('', true)\n    }\n\n    // add route on click\n    $('#addRoute').click(function() {\n      if (!modules.editRoute) editRoute()\n      $('#routeNew').click()\n    })\n\n    // add marker on click\n    $('#addMarker').click(function() {\n      if ($(this).hasClass('pressed')) {\n        $('.pressed').removeClass('pressed')\n        restoreDefaultEvents()\n      } else {\n        $('.pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        $('#markerAdd').addClass('pressed')\n        viewbox.style('cursor', 'crosshair').on('click', addMarkerOnClick)\n      }\n    })\n\n    function addMarkerOnClick() {\n      const point = d3.mouse(this)\n      let x = _.round(point[0], 2), y = _.round(point[1], 2)\n      let selected = markerSelectGroup.value\n      let valid = selected && d3.select('#defs-markers').select('#' + selected).size() === 1\n      let symbol = valid ? '#' + selected : '#marker0'\n      let desired = valid ? markers.select('[data-id=\\'' + symbol + '\\']').attr('data-size') : 1\n      if (isNaN(desired)) desired = 1\n      let id = 'marker' + Date.now().toString().slice(7) // unique id\n      let size = desired * 5 + 25 / scale\n\n      markers.append('use').attr('id', id).attr('xlink:href', symbol).attr('data-id', symbol)\n             .attr('data-x', x).attr('data-y', y).attr('x', x - size / 2).attr('y', y - size)\n             .attr('data-size', desired).attr('width', size).attr('height', size)\n             .on('click', editMarker)\n\n      if (d3.event.shiftKey === false) {\n        $('#addMarker, #markerAdd').removeClass('pressed')\n        restoreDefaultEvents()\n      }\n    }\n\n  }\n\n  // return cell / polly Index or error\n  function getIndex(point) {\n    let c = diagram.find(point[0], point[1])\n    if (!c) {\n      console.error('Cannot find closest cell for points' + point[0] + ', ' + point[1])\n      return\n    }\n    return c.index\n  }\n\n  // re-calculate data for a particular state\n  function recalculateStateData(state) {\n    const s = states[state] || states[states.length - 1]\n    if (s.capital === 'neutral') state = 'neutral'\n    const burgs = $.grep(manors, function(e) {return e.region === state})\n    s.burgs = burgs.length\n    let burgsPop = 0 // get summ of all burgs population\n    burgs.map(function(b) {burgsPop += b.population})\n    s.urbanPopulation = _.round(burgsPop, 1)\n    const regionCells = $.grep(cells, function(e) {return (e.region === state)})\n    let cellsPop = 0, area = 0\n    regionCells.map(function(c) {\n      cellsPop += c.pop\n      area += c.area\n    })\n    s.cells = regionCells.length\n    s.area = Math.round(area)\n    s.ruralPopulation = _.round(cellsPop, 1)\n  }\n\n  function changeSelectedOnClick() {\n    const point = d3.mouse(this)\n    const index = diagram.find(point[0], point[1]).index\n    if (cells[index].height < 20) return\n    $('.selected').removeClass('selected')\n    let color\n\n    // select state\n    if (customization === 2) {\n      const assigned = regions.select('#temp').select('path[data-cell=\\'' + index + '\\']')\n      let s = assigned.size() ? assigned.attr('data-state') : cells[index].region\n      if (s === 'neutral') s = states.length - 1\n      color = states[s].color\n      if (color === 'neutral') color = 'white'\n      $('#state' + s).addClass('selected')\n    }\n\n    // select culture\n    if (customization === 4) {\n      const assigned = cults.select('#cult' + index)\n      const c = assigned.attr('data-culture') !== null\n                ? +assigned.attr('data-culture')\n                : cells[index].culture\n      color = cultures[c].color\n      $('#culture' + c).addClass('selected')\n    }\n\n    debug.selectAll('.circle').attr('stroke', color)\n  }\n\n  // fetch default fonts if not done before\n  function loadDefaultFonts() {\n    if (!$('link[href=\"fonts.css\"]').length) {\n      $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"fonts.css\">')\n      const fontsToAdd = ['Amatic+SC:700', 'IM+Fell+English', 'Great+Vibes', 'MedievalSharp', 'Metamorphous',\n                          'Nova+Script', 'Uncial+Antiqua', 'Underdog', 'Caesar+Dressing', 'Bitter', 'Yellowtail', 'Montez',\n                          'Shadows+Into+Light', 'Fredericka+the+Great', 'Orbitron', 'Dancing+Script:700',\n                          'Architects+Daughter', 'Kaushan+Script', 'Gloria+Hallelujah', 'Satisfy', 'Comfortaa:700', 'Cinzel']\n      fontsToAdd.forEach(function(f) {if (FONTS.indexOf(f) === -1) FONTS.push(f)})\n      updateFontOptions()\n    }\n  }\n\n  function fetchFonts(url) {\n    return new Promise((resolve, reject) => {\n      if (url === '') {\n        tip(\n          'Use a direct link to any @font-face declaration or just font name to fetch from Google Fonts')\n        return\n      }\n      if (url.indexOf('http') === -1) {\n        url = url.replace(url.charAt(0), url.charAt(0).toUpperCase()).split(' ').join('+')\n        url = 'https://fonts.googleapis.com/css?family=' + url\n      }\n      const fetched = addFonts(url).then(fetched => {\n        if (fetched === undefined) {\n          tip('Cannot fetch font for this value!')\n          return\n        }\n        if (fetched === 0) {\n          tip('Already in the fonts list!')\n          return\n        }\n        updateFontOptions()\n        if (fetched === 1) {\n          tip('Font ' + FONTS[FONTS.length - 1] + ' is fetched')\n        } else if (fetched > 1) {\n          tip(fetched + ' fonts are added to the list')\n        }\n        resolve(fetched)\n      })\n    })\n  }\n\n  function addFonts(url) {\n    $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + url + '\">')\n    return fetch(url)\n      .then(resp => resp.text())\n      .then(text => {\n        let s = document.createElement('style')\n        s.innerHTML = text\n        document.head.appendChild(s)\n        let styleSheet = Array.prototype.filter.call(\n          document.styleSheets,\n          sS => sS.ownerNode === s)[0]\n        let FontRule = rule => {\n          let family = rule.style.getPropertyValue('font-family')\n          let font = family.replace(/['\"]+/g, '').replace(/ /g, '+')\n          let weight = rule.style.getPropertyValue('font-weight')\n          if (weight !== '400') font += ':' + weight\n          if (FONTS.indexOf(font) == -1) {\n            FONTS.push(font)\n            fetched++\n          }\n        }\n        let fetched = 0\n        for (let r of styleSheet.cssRules) {FontRule(r)}\n        document.head.removeChild(s)\n        return fetched\n      })\n      .catch(function() {})\n  }\n\n  // Update font list for Label and Burg Editors\n  function updateFontOptions() {\n    labelFontSelect.innerHTML = ''\n    for (let i = 0; i < FONTS.length; i++) {\n      const opt = document.createElement('option')\n      opt.value = i\n      const font = FONTS[i].split(':')[0].replace(/\\+/g, ' ')\n      opt.style.fontFamily = opt.innerHTML = font\n      labelFontSelect.add(opt)\n    }\n    burgSelectDefaultFont.innerHTML = labelFontSelect.innerHTML\n  }\n\n  // Save in .map format, based on FileSystem API\n  function saveMap() {\n    console.time('saveMap')\n    // data convention: 0 - params; 1 - all points; 2 - cells; 3 - manors; 4 - states;\n    // 5 - svg; 6 - options (see below); 7 - cultures;\n    // 8 - empty (former nameBase); 9 - empty (former nameBases); 10 - heights; 11 - notes;\n    // size stats: points = 6%, cells = 36%, manors and states = 2%, svg = 56%;\n    const date = new Date()\n    const dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()\n    const license = 'File can be loaded in azgaar.github.io/Fantasy-Map-Generator'\n    const params = version + '|' + license + '|' + dateString + '|' + seed\n    const options = customization + '|' +\n                    distanceUnit.value + '|' + distanceScale.value + '|' + areaUnit.value + '|' +\n                    barSize.value + '|' + barLabel.value + '|' + barBackOpacity.value + '|' + barBackColor.value + '|' +\n                    populationRate.value + '|' + urbanization.value\n\n    // set zoom / transform values to default\n    svg.attr('width', graphWidth).attr('height', graphHeight)\n    const transform = d3.zoomTransform(svg.node())\n    viewbox.attr('transform', null)\n    const oceanBack = ocean.select('rect')\n    const oceanShift = [oceanBack.attr('x'), oceanBack.attr('y'), oceanBack.attr(\n      'width'), oceanBack.attr('height')]\n    oceanBack.attr('x', 0).attr('y', 0).attr('width', graphWidth).attr('height', graphHeight)\n\n    const svg_xml = (new XMLSerializer()).serializeToString(svg.node())\n    const line = '\\r\\n'\n    let data = params + line + JSON.stringify(points) + line + JSON.stringify(cells) + line\n    data += JSON.stringify(manors) + line + JSON.stringify(\n      states) + line + svg_xml + line + options + line\n    data +=\n      JSON.stringify(cultures) + line + '' + line + '' + line + heights + line + JSON.stringify(\n      notes) + line\n    const dataBlob = new Blob([data], {type: 'text/plain'})\n    const dataURL = window.URL.createObjectURL(dataBlob)\n    const link = document.createElement('a')\n    link.download = 'fantasy_map_' + Date.now() + '.map'\n    link.href = dataURL\n    document.body.appendChild(link)\n    link.click()\n\n    // restore initial values\n    svg.attr('width', svgWidth).attr('height', svgHeight)\n    zoom.transform(svg, transform)\n    oceanBack.attr('x', oceanShift[0]).attr('y', oceanShift[1]).attr('width', oceanShift[2])\n             .attr('height', oceanShift[3])\n\n    console.timeEnd('saveMap')\n    window.setTimeout(function() {window.URL.revokeObjectURL(dataURL)}, 4000)\n  }\n\n  // Map Loader based on FileSystem API\n  $('#mapToLoad').change(function() {\n    console.time('loadMap')\n    closeDialogs()\n    const fileToLoad = this.files[0]\n    this.value = ''\n    uploadFile(fileToLoad)\n  })\n\n  function uploadFile(file, callback) {\n    console.time('loadMap')\n    const fileReader = new FileReader()\n    fileReader.onload = function(fileLoadedEvent) {\n      const dataLoaded = fileLoadedEvent.target.result\n      const data = dataLoaded.split('\\r\\n')\n      // data convention: 0 - params; 1 - all points; 2 - cells; 3 - manors; 4 - states;\n      // 5 - svg; 6 - options; 7 - cultures; 8 - none; 9 - none; 10 - heights; 11 - notes;\n      const params = data[0].split('|')\n      const mapVersion = params[0] || data[0]\n      if (mapVersion !== version) {\n        let message = `The Map version `\n        // mapVersion reference was not added to downloaded map before v. 0.52b, so I cannot support really old files\n        if (mapVersion.length <= 10) {\n          message += `(${mapVersion}) does not match the Generator version (${version}). The map will be auto-updated.\n                    In case of critical issues you may send the .map file\n                    <a href=\"mailto:maxganiev@yandex.ru?Subject=Map%20update%20request\" target=\"_blank\">to me</a>\n                    or just keep using\n                    <a href=\"https://github.com/Azgaar/Fantasy-Map-Generator/wiki/Changelog\" target=\"_blank\">an appropriate version</a>\n                    of the Generator`\n        } else if (!mapVersion || parseFloat(mapVersion) < 0.54) {\n          message += `you are trying to load is too old and cannot be updated. Please re-create the map or just keep using\n                    <a href=\"https://github.com/Azgaar/Fantasy-Map-Generator/wiki/Changelog\" target=\"_blank\">an archived version</a>\n                    of the Generator. Please note the Generator is still on demo and a lot of changes are being made every month`\n        }\n        alertMessage.innerHTML = message\n        $('#alert').dialog({\n          title: 'Warning', buttons: {\n            OK: function() {\n              loadDataFromMap(data)\n            }\n          }\n        })\n      } else {loadDataFromMap(data)}\n      if (mapVersion.length > 10) {console.error('Cannot load map') }\n    }\n    fileReader.readAsText(file, 'UTF-8')\n    if (callback) {callback()}\n  }\n\n  function loadDataFromMap(data) {\n    closeDialogs()\n    // update seed\n    const params = data[0].split('|')\n    if (params[3]) {\n      seed = params[3]\n      $('#optionsSeed').value = seed\n    }\n\n    // get options\n    if (data[0] === '0.52b' || data[0] === '0.53b') {\n      customization = 0\n    } else if (data[6]) {\n      const options = data[6].split('|')\n      customization = +options[0] || 0\n      if (options[1]) distanceUnit.value = options[1]\n      if (options[2]) distanceScale.value = options[2]\n      if (options[3]) areaUnit.value = options[3]\n      if (options[4]) barSize.value = options[4]\n      if (options[5]) barLabel.value = options[5]\n      if (options[6]) barBackOpacity.value = options[6]\n      if (options[7]) barBackColor.value = options[7]\n      if (options[8]) populationRate.value = options[8]\n      if (options[9]) urbanization.value = options[9]\n    }\n\n    // replace old svg\n    svg.remove()\n    if (data[0] === '0.52b' || data[0] === '0.53b') {\n      states = [] // no states data in old maps\n      document.body.insertAdjacentHTML('afterbegin', data[4])\n    } else {\n      states = JSON.parse(data[4])\n      document.body.insertAdjacentHTML('afterbegin', data[5])\n    }\n\n    svg = d3.select('svg')\n\n    // always change graph size to the size of loaded map\n    const nWidth = +svg.attr('width'), nHeight = +svg.attr('height')\n    graphWidth = nWidth\n    graphHeight = nHeight\n    voronoi = d3.voronoi().extent([[-1, -1], [graphWidth + 1, graphHeight + 1]])\n    zoom.translateExtent([[0, 0], [graphWidth, graphHeight]]).scaleExtent([1, 20])\n        .scaleTo(svg, 1)\n    viewbox.attr('transform', null)\n\n    // temporary fit loaded svg element to current canvas size\n    svg.attr('width', svgWidth).attr('height', svgHeight)\n    if (nWidth !== svgWidth || nHeight !== svgHeight) {\n      alertMessage.innerHTML =\n        `The loaded map has size ${nWidth} x ${nHeight} pixels, while the current canvas size is ${svgWidth} x ${svgHeight} pixels.\n                              Click \"Rescale\" to fit the map to the current canvas size. Click \"OK\" to browse the map without rescaling`\n      $('#alert').dialog({\n        title: 'Map size conflict',\n        buttons: {\n          Rescale: function() {\n            applyLoadedData(data)\n            // rescale loaded map\n            const xRatio = svgWidth / nWidth\n            const yRatio = svgHeight / nHeight\n            const scaleTo = _.round(Math.min(xRatio, yRatio), 4)\n            // calculate frames to scretch ocean background\n            const extent = (100 / scaleTo) + '%'\n            const xShift = (nWidth * scaleTo - svgWidth) / 2 / scaleTo\n            const yShift = (nHeight * scaleTo - svgHeight) / 2 / scaleTo\n            svg.select('#ocean').selectAll('rect').attr('x', xShift).attr('y', yShift)\n               .attr('width', extent).attr('height', extent)\n            zoom.translateExtent([[0, 0], [nWidth, nHeight]]).scaleExtent([scaleTo, 20])\n                .scaleTo(svg, scaleTo)\n            $(this).dialog('close')\n          },\n          OK: function() {\n            changeMapSize()\n            applyLoadedData(data)\n            $(this).dialog('close')\n          }\n        }\n      })\n    } else {\n      applyLoadedData(data)\n    }\n  }\n\n  function applyLoadedData(data) {\n    // redefine variables\n    defs = svg.select('#deftemp')\n    viewbox = svg.select('#viewbox')\n    ocean = viewbox.select('#ocean')\n    oceanLayers = ocean.select('#oceanLayers')\n    oceanPattern = ocean.select('#oceanPattern')\n    landmass = viewbox.select('#landmass')\n    grid = viewbox.select('#grid')\n    overlay = viewbox.select('#overlay')\n    terrs = viewbox.select('#terrs')\n    cults = viewbox.select('#cults')\n    routes = viewbox.select('#routes')\n    roads = routes.select('#roads')\n    trails = routes.select('#trails')\n    rivers = viewbox.select('#rivers')\n    terrain = viewbox.select('#terrain')\n    regions = viewbox.select('#regions')\n    borders = viewbox.select('#borders')\n    stateBorders = borders.select('#stateBorders')\n    neutralBorders = borders.select('#neutralBorders')\n    coastline = viewbox.select('#coastline')\n    lakes = viewbox.select('#lakes')\n    searoutes = routes.select('#searoutes')\n    labels = viewbox.select('#labels')\n    icons = viewbox.select('#icons')\n    markers = viewbox.select('#markers')\n    ruler = viewbox.select('#ruler')\n    debug = viewbox.select('#debug')\n\n    if (!d3.select('#defs-markers').size()) {\n      let symbol = '<g id=\"defs-markers\"><symbol id=\"marker0\" viewBox=\"0 0 30 30\"><path d=\"M6,19 l9,10 L24,19\" fill=\"#000000\" stroke=\"none\"></path><circle cx=\"15\" cy=\"15\" r=\"10\" stroke-width=\"1\" stroke=\"#000000\" fill=\"#ffffff\"></circle><text x=\"50%\" y=\"50%\" fill=\"#000000\" stroke-width=\"0\" stroke=\"#000000\" font-size=\"22px\" dominant-baseline=\"central\">?</text></symbol></g>'\n      let cont = document.getElementsByTagName('defs')\n      cont[0].insertAdjacentHTML('afterbegin', symbol)\n      markers = viewbox.append('g').attr('id', 'markers')\n    }\n\n    // version control: ensure required groups are created with correct data\n    if (!labels.select('#burgLabels').size()) {\n      labels.append('g').attr('id', 'burgLabels')\n      $('#labels #capitals, #labels #towns').detach().appendTo($('#burgLabels'))\n    }\n\n    if (!icons.select('#burgIcons').size()) {\n      icons.append('g').attr('id', 'burgIcons')\n      $('#icons #capitals, #icons #towns').detach().appendTo($('#burgIcons'))\n      icons.select('#burgIcons').select('#capitals').attr('size', 1).attr('fill-opacity', .7)\n           .attr('stroke-opacity', 1)\n      icons.select('#burgIcons').select('#towns').attr('size', .5).attr('fill-opacity', .7)\n           .attr('stroke-opacity', 1)\n    }\n\n    icons.selectAll('g').each(function() {\n      const size = this.getAttribute('font-size')\n      if (size === null || size === undefined) return\n      this.removeAttribute('font-size')\n      this.setAttribute('size', size)\n    })\n\n    icons.select('#burgIcons').selectAll('circle').each(function() {\n      this.setAttribute('r', this.parentNode.getAttribute('size'))\n    })\n\n    icons.selectAll('use').each(function() {\n      const size = this.parentNode.getAttribute('size')\n      if (size === null || size === undefined) return\n      this.setAttribute('width', size)\n      this.setAttribute('height', size)\n    })\n\n    if (!labels.select('#countries').size()) {\n      labels.append('g').attr('id', 'countries')\n            .attr('fill', '#3e3e4b').attr('opacity', 1)\n            .attr('font-family', 'Almendra SC').attr('data-font', 'Almendra+SC')\n            .attr('font-size', 14).attr('data-size', 14)\n    }\n\n    burgLabels = labels.select('#burgLabels')\n    burgIcons = icons.select('#burgIcons')\n\n    // restore events\n    svg.call(zoom)\n    restoreDefaultEvents()\n    viewbox.on('touchmove mousemove', moved)\n    overlay.selectAll('*').call(d3.drag().on('start', elementDrag))\n    terrain.selectAll('g').selectAll('g').on('click', editReliefIcon)\n    labels.selectAll('text').on('click', editLabel)\n    icons.selectAll('circle, path, use').on('click', editIcon)\n    burgLabels.selectAll('text').on('click', editBurg)\n    burgIcons.selectAll('circle, path, use').on('click', editBurg)\n    rivers.selectAll('path').on('click', editRiver)\n    routes.selectAll('path').on('click', editRoute)\n    markers.selectAll('use').on('click', editMarker)\n    svg.select('#scaleBar').call(d3.drag().on('start', elementDrag)).on('click', editScale)\n    ruler.selectAll('g').call(d3.drag().on('start', elementDrag))\n    ruler.selectAll('g').selectAll('text').on('click', removeParent)\n    ruler.selectAll('.opisometer').selectAll('circle')\n         .call(d3.drag().on('start', opisometerEdgeDrag))\n    ruler.selectAll('.linear').selectAll('circle:not(.center)')\n         .call(d3.drag().on('drag', rulerEdgeDrag))\n    ruler.selectAll('.linear').selectAll('circle.center')\n         .call(d3.drag().on('drag', rulerCenterDrag))\n\n    // update data\n    const newPoints = []\n    riversData = [], queue = [], elSelected = ''\n    points = JSON.parse(data[1])\n    cells = JSON.parse(data[2])\n    manors = JSON.parse(data[3])\n    if (data[7]) cultures = JSON.parse(data[7])\n    if (data[7] === undefined) generateCultures()\n    if (data[11]) notes = JSON.parse(data[11])\n\n    // place random point\n    function placePoint() {\n      const x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1)\n      const y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1)\n      return [x, y]\n    }\n\n    // ensure each culure has a valid namesbase assigned, if not assign first base\n    if (!nameBase[0]) applyDefaultNamesData()\n    cultures.forEach(function(c) {\n      const b = c.base\n      if (b === undefined) c.base = 0\n      if (!nameBase[b] || !nameBases[b]) c.base = 0\n      if (c.center === undefined) c.center = placePoint()\n    })\n    const graphSizeAdj = 90 / Math.sqrt(cells.length, 2) // adjust to different graphSize\n\n    // cells validations\n    cells.forEach(function(c, d) {\n      // collect points\n      newPoints.push(c.data)\n\n      // update old 0-1 height range to a new 0-100 range\n      if (c.height < 1) c.height = Math.trunc(c.height * 100)\n      if (c.height === 1 && c.region !== undefined && c.flux !== undefined) c.height = 100\n\n      // check if there are any unavailable cultures\n      if (c.culture > cultures.length - 1) {\n        const center = [c.data[0], c.data[1]]\n        const cult = {name: 'AUTO_' + c.culture, color: '#ff0000', base: 0, center}\n        cultures.push(cult)\n      }\n\n      if (c.height >= 20) {\n        if (!polygons[d] || !polygons[d].length) return\n        // calculate area\n        if (c.area === undefined || isNaN(c.area)) {\n          const area = d3.polygonArea(polygons[d])\n          c.area = _.round(Math.abs(area), 2)\n        }\n        // calculate population\n        if (c.pop === undefined || isNaN(c.pop)) {\n          let population = 0\n          const elevationFactor = Math.pow((100 - c.height) / 100, 3)\n          population = elevationFactor * c.area * graphSizeAdj\n          if (c.region === 'neutral') population *= 0.5\n          c.pop = _.round(population, 1)\n        }\n        // if culture is undefined, set to 0\n        if (c.culture === undefined || isNaN(c.culture)) c.culture = 0\n      }\n    })\n\n    land = $.grep(cells, function(e) {return (e.height >= 20)})\n    calculateVoronoi(newPoints)\n\n    // get heights Uint8Array\n    if (data[10]) {heights = new Uint8Array(data[10].split(','))} else {\n      heights = new Uint8Array(points.length)\n      for (let i = 0; i < points.length; i++) {\n        const cell = diagram.find(points[i][0], points[i][1]).index\n        heights[i] = cells[cell].height\n      }\n    }\n\n    // restore Heightmap customization mode\n    if (customization === 1) {\n      optionsTrigger.click()\n      $('#customizeHeightmap, #customizationMenu').slideDown()\n      $('#openEditor').slideUp()\n      updateHistory()\n      customizeTab.click()\n      paintBrushes.click()\n      tip('The map is in Heightmap customization mode. Please finalize the Heightmap', true)\n    }\n    // restore Country Edition mode\n    if (customization === 2 || customization === 3) tip(\n      'The map is in Country Edition mode. Please complete the assignment', true)\n\n    // restore layers state\n    d3.select('#toggleCultures').classed('buttonoff', !cults.selectAll('path').size())\n    d3.select('#toggleHeight').classed('buttonoff', !terrs.selectAll('path').size())\n    d3.select('#toggleCountries').classed('buttonoff', regions.style('display') === 'none')\n    d3.select('#toggleRivers').classed('buttonoff', rivers.style('display') === 'none')\n    d3.select('#toggleOcean').classed('buttonoff', oceanPattern.style('display') === 'none')\n    d3.select('#toggleRelief').classed('buttonoff', terrain.style('display') === 'none')\n    d3.select('#toggleBorders').classed('buttonoff', borders.style('display') === 'none')\n    d3.select('#toggleIcons').classed('buttonoff', icons.style('display') === 'none')\n    d3.select('#toggleLabels').classed('buttonoff', labels.style('display') === 'none')\n    d3.select('#toggleRoutes').classed('buttonoff', routes.style('display') === 'none')\n    d3.select('#toggleGrid').classed('buttonoff', grid.style('display') === 'none')\n\n    // update map to support some old versions and fetch fonts\n    labels.selectAll('g').each(function(d) {\n      const el = d3.select(this)\n      if (el.attr('id') === 'burgLabels') return\n      const font = el.attr('data-font')\n      if (font && FONTS.indexOf(font) === -1) addFonts(\n        'https://fonts.googleapis.com/css?family=' + font)\n      if (!el.attr('data-size')) el.attr('data-size', +el.attr('font-size'))\n      if (el.style('display') === 'none') el.node().style.display = null\n    })\n\n    invokeActiveZooming()\n    console.timeEnd('loadMap')\n  }\n\n  // get square grid with some jirrering\n  function getJitteredGrid() {\n    let sizeMod = _.round((graphWidth + graphHeight) / 1500, 2) // screen size modifier\n    spacing = _.round(7.5 * sizeMod / graphSize, 2) // space between points before jirrering\n    const radius = spacing / 2 // square radius\n    const jittering = radius * 0.9 // max deviation\n    const jitter = function() {return Math.random() * 2 * jittering - jittering}\n    let points = []\n    for (let y = radius; y < graphHeight; y += spacing) {\n      for (let x = radius; x < graphWidth; x += spacing) {\n        let xj = _.round(x + jitter(), 2)\n        let yj = _.round(y + jitter(), 2)\n        points.push([xj, yj])\n      }\n    }\n    return points\n  }\n\n  // Hotkeys, see github.com/Azgaar/Fantasy-Map-Generator/wiki/Hotkeys\n  d3.select('body').on('keydown', function() {\n    const active = document.activeElement.tagName\n    if (active === 'INPUT' || active === 'SELECT' || active === 'TEXTAREA') return\n    const key = d3.event.keyCode\n    const ctrl = d3.event.ctrlKey\n    const p = d3.mouse(this)\n    if (key === 117) $('#randomMap').click() // \"F6\" for new map\n    else if (key === 27) closeDialogs() // Escape to close all dialogs\n    else if (key === 79) optionsTrigger.click() // \"O\" to toggle options\n    else if (key === 80) saveAsImage('png') // \"P\" to save as PNG\n    else if (key === 83) saveAsImage('svg') // \"S\" to save as SVG\n    else if (key === 77) saveMap() // \"M\" to save MAP file\n    else if (key === 76) mapToLoad.click() // \"L\" to load MAP\n    else if (key === 32) console.table(cells[diagram.find(p[0], p[1]).index]) // Space to log focused cell data\n    else if (key === 192) console.log(cells) // \"`\" to log cells data\n    else if (key === 66) console.table(manors) // \"B\" to log burgs data\n    else if (key === 67) console.table(states) // \"C\" to log countries data\n    else if (key === 70) console.table(features) // \"F\" to log features data\n    else if (key === 37) zoom.translateBy(svg, 10, 0) // Left to scroll map left\n    else if (key === 39) zoom.translateBy(svg, -10, 0) // Right to scroll map right\n    else if (key === 38) zoom.translateBy(svg, 0, 10) // Up to scroll map up\n    else if (key === 40) zoom.translateBy(svg, 0, -10) // Up to scroll map up\n    else if (key === 107) zoom.scaleBy(svg, 1.2) // Plus to zoom map up\n    else if (key === 109) zoom.scaleBy(svg, 0.8) // Minus to zoom map out\n    else if (key === 48 || key === 96) resetZoom() // 0 to reset zoom\n    else if (key === 49 || key === 97) zoom.scaleTo(svg, 1) // 1 to zoom to 1\n    else if (key === 50 || key === 98) zoom.scaleTo(svg, 2) // 2 to zoom to 2\n    else if (key === 51 || key === 99) zoom.scaleTo(svg, 3) // 3 to zoom to 3\n    else if (key === 52 || key === 100) zoom.scaleTo(svg, 4) // 4 to zoom to 4\n    else if (key === 53 || key === 101) zoom.scaleTo(svg, 5) // 5 to zoom to 5\n    else if (key === 54 || key === 102) zoom.scaleTo(svg, 6) // 6 to zoom to 6\n    else if (key === 55 || key === 103) zoom.scaleTo(svg, 7) // 7 to zoom to 7\n    else if (key === 56 || key === 104) zoom.scaleTo(svg, 8) // 8 to zoom to 8\n    else if (key === 57 || key === 105) zoom.scaleTo(svg, 9) // 9 to zoom to 9\n    else if (key === 9) $('#updateFullscreen').click() // Tab to fit map to fullscreen\n    else if (ctrl && key === 90) undo.click() // Ctrl + \"Z\" to toggle undo\n    else if (ctrl && key === 89) redo.click() // Ctrl + \"Y\" to toggle undo\n  })\n\n  // move layers on mapLayers dragging (jquery sortable)\n  function moveLayer(event, ui) {\n    const el = getLayer(ui.item.attr('id'))\n    if (el) {\n      const prev = getLayer(ui.item.prev().attr('id'))\n      const next = getLayer(ui.item.next().attr('id'))\n      if (prev) {el.insertAfter(prev)} else if (next) {el.insertBefore(next)}\n    }\n  }\n\n  // define connection between option layer buttons and actual svg groups\n  function getLayer(id) {\n    if (id === 'toggleGrid') {return $('#grid')}\n    if (id === 'toggleOverlay') {return $('#overlay')}\n    if (id === 'toggleHeight') {return $('#terrs')}\n    if (id === 'toggleCultures') {return $('#cults')}\n    if (id === 'toggleRoutes') {return $('#routes')}\n    if (id === 'toggleRivers') {return $('#rivers')}\n    if (id === 'toggleCountries') {return $('#regions')}\n    if (id === 'toggleBorders') {return $('#borders')}\n    if (id === 'toggleRelief') {return $('#terrain')}\n    if (id === 'toggleLabels') {return $('#labels')}\n    if (id === 'toggleIcons') {return $('#icons')}\n  }\n\n  // UI Button handlers\n  $('button, a, li, i').on('click', function() {\n    const id = this.id\n    const parent = this.parentNode.id\n    if (debug.selectAll('.tag').size()) {debug.selectAll('.tag, .line').remove()}\n    if (id === 'toggleCountries') {$('#regions').fadeToggle()}\n    if (id === 'toggleCultures') {toggleCultures()}\n    if (id === 'toggleFlux') {toggleFlux()}\n    if (parent === 'mapLayers' || parent === 'styleContent') {$(this).toggleClass('buttonoff')}\n    if (id === 'randomMap' || id === 'regenerate') {\n      changeSeed()\n      exitCustomization()\n      undraw()\n      resetZoom(1000)\n      generate()\n      return\n    }\n    if (id === 'editCountries') editCountries()\n    if (id === 'editCultures') editCultures()\n    if (id === 'editScale' || id === 'editScaleCountries' || id === 'editScaleBurgs') editScale()\n    if (id === 'countriesManually') {\n      customization = 2\n      tip('Click to select a country, drag the circle to re-assign', true)\n      mockRegions()\n      let temp = regions.append('g').attr('id', 'temp')\n      $('#countriesBottom').children().hide()\n      $('#countriesManuallyButtons').show()\n      // highlight capital cells as it's not allowed to change capital's state that way\n      states.map(function(s) {\n        if (s.capital === 'neutral' || s.capital === 'select') return\n        const capital = s.capital\n        const index = manors[capital].cell\n        temp.append('path')\n            .attr('data-cell', index).attr('data-state', s.i)\n            .attr('d', 'M' + polygons[index].join('L') + 'Z')\n            .attr('fill', s.color).attr('stroke', 'red').attr('stroke-width', .7)\n      })\n      viewbox.style('cursor', 'crosshair').call(drag).on('click', changeSelectedOnClick)\n    }\n    if (id === 'countriesRegenerate') {\n      customization = 3\n      tip('Manually change \"Expansion\" value for a country or click on \"Randomize\" button',\n        true)\n      mockRegions()\n      regions.append('g').attr('id', 'temp')\n      $('#countriesBottom').children().hide()\n      $('#countriesRegenerateButtons').show()\n      $('.statePower, .icon-resize-full, .stateCells, .icon-check-empty').toggleClass('hidden')\n      $('div[data-sortby=\\'expansion\\'],div[data-sortby=\\'cells\\']').toggleClass('hidden')\n    }\n    if (id === 'countriesManuallyComplete') {\n      debug.selectAll('.circle').remove()\n      const changedCells = regions.select('#temp').selectAll('path')\n      let changedStates = []\n      changedCells.each(function() {\n        const el = d3.select(this)\n        const cell = +el.attr('data-cell')\n        let stateOld = cells[cell].region\n        if (stateOld === 'neutral') {stateOld = states.length - 1}\n        const stateNew = +el.attr('data-state')\n        const region = states[stateNew].color === 'neutral' ? 'neutral' : stateNew\n        cells[cell].region = region\n        if (cells[cell].manor !== undefined) {manors[cells[cell].manor].region = region}\n        changedStates.push(stateNew, stateOld)\n      })\n      changedStates = [...new Set(changedStates)]\n      changedStates.map(function(s) {recalculateStateData(s)})\n      const last = states.length - 1\n      if (states[last].capital === 'neutral' && states[last].cells === 0) {\n        $('#state' + last).remove()\n        states.splice(-1)\n      }\n      $('#countriesManuallyCancel').click()\n      if (changedStates.length) {editCountries()}\n    }\n    if (id === 'countriesManuallyCancel') {\n      redrawRegions()\n      debug.selectAll('.circle').remove()\n      if (grid.style('display') === 'inline') {toggleGrid.click()}\n      if (labels.style('display') === 'none') {toggleLabels.click()}\n      $('#countriesBottom').children().show()\n      $('#countriesManuallyButtons, #countriesRegenerateButtons').hide()\n      $('.selected').removeClass('selected')\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').addClass('hidden')\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').removeClass('hidden')\n      customization = 0\n      restoreDefaultEvents()\n    }\n    if (id === 'countriesApply') {$('#countriesManuallyCancel').click()}\n    if (id === 'countriesRandomize') {\n      const mod = +powerInput.value * 2\n      $('.statePower').each(function(e, i) {\n        const state = +(this.parentNode.id).slice(5)\n        if (states[state].capital === 'neutral') return\n        const power = _.round(Math.random() * mod / 2 + 1, 1)\n        $(this).val(power)\n        $(this).parent().attr('data-expansion', power)\n        states[state].power = power\n      })\n      regenerateCountries()\n    }\n    if (id === 'countriesAddM' || id === 'countriesAddR' || id === 'countriesAddG') {\n      let i = states.length\n      // move neutrals to the last line\n      if (states[i - 1].capital === 'neutral') {\n        states[i - 1].i = i\n        i -= 1\n      }\n      var name = generateStateName(0)\n      const color = colors20(i)\n      states.push({\n        i,\n        color,\n        name,\n        capital: 'select',\n        cells: 0,\n        burgs: 0,\n        urbanPopulation: 0,\n        ruralPopulation: 0,\n        area: 0,\n        power: 1\n      })\n      states.sort(function(a, b) {return a.i - b.i})\n      editCountries()\n    }\n    if (id === 'countriesRegenerateNames') {\n      const editor = d3.select('#countriesBody')\n      states.forEach(function(s) {\n        if (s.capital === 'neutral') return\n        s.name = generateStateName(s.i)\n        labels.select('#regionLabel' + s.i).text(s.name)\n        editor.select('#state' + s.i).select('.stateName').attr('value', s.name)\n      })\n    }\n    if (id === 'countriesPercentage') {\n      var el = $('#countriesEditor')\n      if (el.attr('data-type') === 'absolute') {\n        el.attr('data-type', 'percentage')\n        const totalCells = land.length\n        const totalBurgs = +countriesFooterBurgs.innerHTML\n        let totalArea = countriesFooterArea.innerHTML\n        totalArea = getInteger(totalArea.split(' ')[0])\n        const totalPopulation = getInteger(countriesFooterPopulation.innerHTML)\n        $('#countriesBody > .states').each(function() {\n          const cells = Math.round($(this).attr('data-cells') / totalCells * 100)\n          const burgs = Math.round($(this).attr('data-burgs') / totalBurgs * 100)\n          const area = Math.round($(this).attr('data-area') / totalArea * 100)\n          const population = Math.round($(this).attr('data-population') / totalPopulation * 100)\n          $(this).children().filter('.stateCells').text(cells + '%')\n          $(this).children().filter('.stateBurgs').text(burgs + '%')\n          $(this).children().filter('.stateArea').text(area + '%')\n          $(this).children().filter('.statePopulation').val(population + '%')\n        })\n      } else {\n        el.attr('data-type', 'absolute')\n        editCountries()\n      }\n    }\n    if (id === 'countriesExport') {\n      if ($('.statePower').length === 0) {return}\n      const unit = areaUnit.value === 'square' ? distanceUnit.value + '2' : areaUnit.value\n      let data = 'Country,Capital,Cells,Burgs,Area (' + unit + '),Population\\n' // countries headers\n      $('#countriesBody > .states').each(function() {\n        const country = $(this).attr('data-country')\n        if (country === 'bottom') {data += 'neutral,'} else {data += country + ','}\n        const capital = $(this).attr('data-capital')\n        if (capital === 'bottom' || capital === 'select') {data += ','} else {\n          data += capital + ','\n        }\n        data += $(this).attr('data-cells') + ','\n        data += $(this).attr('data-burgs') + ','\n        data += $(this).attr('data-area') + ','\n        const population = +$(this).attr('data-population')\n        data += population + '\\n'\n      })\n      data += '\\nBurg,Country,Culture,Population\\n' // burgs headers\n      manors.map(function(m) {\n        if (m.region === 'removed') return // skip removed burgs\n        data += m.name + ','\n        const country = m.region === 'neutral' ? 'neutral' : states[m.region].name\n        data += country + ','\n        data += cultures[m.culture].name + ','\n        const population = m.population * urbanization.value * populationRate.value * 1000\n        data += population + '\\n'\n      })\n      const dataBlob = new Blob([data], {type: 'text/plain'})\n      const url = window.URL.createObjectURL(dataBlob)\n      const link = document.createElement('a')\n      document.body.appendChild(link)\n      link.download = 'countries_data' + Date.now() + '.csv'\n      link.href = url\n      link.click()\n      window.setTimeout(function() {window.URL.revokeObjectURL(url)}, 2000)\n    }\n\n    if (id === 'burgNamesImport') burgsListToLoad.click()\n\n    if (id === 'removeCountries') {\n      alertMessage.innerHTML = `Are you sure you want remove all countries?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove countries',\n        buttons: {\n          Cancel: function() {$(this).dialog('close')},\n          Remove: function() {\n            $(this).dialog('close')\n            $('#countriesBody').empty()\n            manors.map(function(m) {m.region = 'neutral'})\n            land.map(function(l) {l.region = 'neutral'})\n            states.map(function(s) {\n              const c = +s.capital\n              if (isNaN(c)) return\n              moveBurgToGroup(c, 'towns')\n            })\n            removeAllLabelsInGroup('countries')\n            regions.selectAll('path').remove()\n            states = []\n            states.push({i: 0, color: 'neutral', capital: 'neutral', name: 'Neutrals'})\n            recalculateStateData(0)\n            if ($('#burgsEditor').is(':visible')) {$('#burgsEditor').dialog('close')}\n            editCountries()\n          }\n        }\n      })\n    }\n    if (id === 'removeBurgs') {\n      alertMessage.innerHTML =\n        `Are you sure you want to remove all burgs associated with the country?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove associated burgs',\n        buttons: {\n          Cancel: function() {$(this).dialog('close')},\n          Remove: function() {\n            $(this).dialog('close')\n            const state = +$('#burgsEditor').attr('data-state')\n            const region = states[state].capital === 'neutral' ? 'neutral' : state\n            $('#burgsBody').empty()\n            manors.map(function(m) {\n              if (m.region !== region) {return}\n              m.region = 'removed'\n              cells[m.cell].manor = undefined\n              labels.select('[data-id=\\'' + m.i + '\\']').remove()\n              icons.selectAll('[data-id=\\'' + m.i + '\\']').remove()\n            })\n            states[state].urbanPopulation = 0\n            states[state].burgs = 0\n            states[state].capital = 'select'\n            if ($('#countriesEditor').is(':visible')) {\n              editCountries()\n              $('#burgsEditor').dialog('moveToTop')\n            }\n            burgsFooterBurgs.innerHTML = 0\n            burgsFooterPopulation.value = 0\n          }\n        }\n      })\n    }\n    if (id === 'changeCapital') {\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed')\n      } else {\n        $('.pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n      }\n    }\n    if (id === 'regenerateBurgNames') {\n      var s = +$('#burgsEditor').attr('data-state')\n      $('.burgName').each(function(e, i) {\n        const b = +(this.parentNode.id).slice(5)\n        const name = generateName(manors[b].culture)\n        $(this).val(name)\n        $(this).parent().attr('data-burg', name)\n        manors[b].name = name\n        labels.select('[data-id=\\'' + b + '\\']').text(name)\n      })\n      if ($('#countriesEditor').is(':visible')) {\n        if (states[s].capital === 'neutral') {return}\n        var c = states[s].capital\n        $('#state' + s).attr('data-capital', manors[c].name)\n        $('#state' + s + ' > .stateCapital').val(manors[c].name)\n      }\n    }\n    if (id === 'burgAdd') {\n      var state = +$('#burgsEditor').attr('data-state')\n      clickToAdd() // to load on click event function\n      $('#addBurg').click().attr('data-state', state)\n    }\n    if (id === 'toggleScaleBar') {$('#scaleBar').toggleClass('hidden')}\n    if (id === 'addRuler') {\n      $('#ruler').show()\n      const rulerNew = ruler.append('g').attr('class', 'linear')\n                            .call(d3.drag().on('start', elementDrag))\n      const factor = _.round(1 / Math.pow(scale, 0.3), 1)\n      const y = Math.floor(Math.random() * graphHeight * 0.5 + graphHeight * 0.25)\n      const x1 = graphWidth * 0.2, x2 = graphWidth * 0.8\n      const dash = _.round(30 / distanceScale.value, 2)\n      rulerNew.append('line').attr('x1', x1).attr('y1', y).attr('x2', x2).attr('y2', y)\n              .attr('class', 'white').attr('stroke-width', factor)\n      rulerNew.append('line').attr('x1', x1).attr('y1', y).attr('x2', x2).attr('y2', y)\n              .attr('class', 'gray').attr('stroke-width', factor).attr('stroke-dasharray', dash)\n      rulerNew.append('circle').attr('r', 2 * factor).attr('stroke-width', 0.5 * factor)\n              .attr('cx', x1).attr('cy', y).attr('data-edge', 'left')\n              .call(d3.drag().on('drag', rulerEdgeDrag))\n      rulerNew.append('circle').attr('r', 2 * factor).attr('stroke-width', 0.5 * factor)\n              .attr('cx', x2).attr('cy', y).attr('data-edge', 'rigth')\n              .call(d3.drag().on('drag', rulerEdgeDrag))\n      rulerNew.append('circle').attr('r', 1.2 * factor).attr('stroke-width', 0.3 * factor)\n              .attr('cx', graphWidth / 2).attr('cy', y).attr('class', 'center')\n              .call(d3.drag().on('start', rulerCenterDrag))\n      const dist = Math.round(x2 - x1)\n      const label = Math.round(dist * distanceScale.value) + ' ' + distanceUnit.value\n      rulerNew.append('text').attr('x', graphWidth / 2).attr('y', y).attr('dy', -1)\n              .attr('data-dist', dist).text(label).text(label).on('click', removeParent)\n              .attr('font-size', 10 * factor)\n      return\n    }\n    if (id === 'addOpisometer' || id === 'addPlanimeter') {\n      if ($(this).hasClass('pressed')) {\n        restoreDefaultEvents()\n        $(this).removeClass('pressed')\n      } else {\n        $(this).addClass('pressed')\n        viewbox.style('cursor', 'crosshair').call(drag)\n      }\n      return\n    }\n    if (id === 'removeAllRulers') {\n      if ($('#ruler > g').length < 1) {return}\n      alertMessage.innerHTML = `Are you sure you want to remove all placed rulers?`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove all rulers',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            $('#ruler > g').remove()\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n      return\n    }\n    if (id === 'editHeightmap') {$('#customizeHeightmap').slideToggle()}\n    if (id === 'fromScratch') {\n      alertMessage.innerHTML =\n        'Are you sure you want to clear the map? All progress will be lost'\n      $('#alert').dialog({\n        resizable: false, title: 'Clear map',\n        buttons: {\n          Clear: function() {\n            closeDialogs()\n            undraw()\n            placePoints()\n            calculateVoronoi(points)\n            detectNeighbors('grid')\n            drawScaleBar()\n            customizeHeightmap()\n            openBrushesPanel()\n            $(this).dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    }\n    if (id === 'fromHeightmap') {\n      const message = `Hightmap is a basic element on which secondary data (rivers, burgs, countries etc) is based.\n    If you want to significantly change the hightmap, it may be better to clean up all the secondary data\n    and let the system to re-generate it based on the updated hightmap. In case of minor changes, you can keep the data.\n    Newly added lands will be considered as neutral. Burgs located on a removed land cells will be deleted.\n    Rivers and small lakes will be re-gerenated based on updated heightmap. Routes won't be regenerated.`\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        resizable: false, title: 'Edit Heightmap',\n        buttons: {\n          'Clean up': function() {\n            editHeightmap('clean')\n            $(this).dialog('close')\n          },\n          Keep: function() {\n            $(this).dialog('close')\n            editHeightmap('keep')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n      return\n    }\n    // heightmap customization buttons\n    if (customization === 1) {\n      if (id === 'paintBrushes') {openBrushesPanel()}\n      if (id === 'rescaleExecute') {\n        const subject = rescaleLower.value + '-' + rescaleHigher.value\n        const sign = conditionSign.value\n        let modifier = rescaleModifier.value\n        if (sign === '×') {modifyHeights(subject, 0, +modifier)}\n        if (sign === '÷') {modifyHeights(subject, 0, (1 / modifier))}\n        if (sign === '+') {modifyHeights(subject, +modifier, 1)}\n        if (sign === '-') {modifyHeights(subject, (-1 * modifier), 1)}\n        if (sign === '^') {modifyHeights(subject, 0, '^' + modifier)}\n        updateHeightmap()\n        updateHistory()\n      }\n      if (id === 'rescaleButton') {\n        $('#modifyButtons').children().not('#rescaleButton, .condition').toggle()\n      }\n      if (id === 'rescaleCondButton') {\n        $('#modifyButtons').children().not('#rescaleCondButton, #rescaler').toggle()\n      }\n      if (id === 'undo' || id === 'templateUndo') {restoreHistory(historyStage - 1)}\n      if (id === 'redo' || id === 'templateRedo') {restoreHistory(historyStage + 1)}\n      if (id === 'smoothHeights') {\n        smoothHeights(4)\n        updateHeightmap()\n        updateHistory()\n      }\n      if (id === 'disruptHeights') {\n        disruptHeights()\n        updateHeightmap()\n        updateHistory()\n      }\n      if (id === 'getMap') getMap()\n      if (id === 'applyTemplate') {\n        if ($('#templateEditor').is(':visible')) {return}\n        $('#templateEditor').dialog({\n          title: 'Template Editor',\n          minHeight: 'auto', width: 'auto', resizable: false,\n          position: {my: 'right top', at: 'right-10 top+10', of: 'svg'}\n        })\n      }\n      if (id === 'convertImage') {convertImage()}\n      if (id === 'convertImageGrid') {$('#grid').fadeToggle()}\n      if (id === 'convertImageHeights') {$('#landmass').fadeToggle()}\n      if (id === 'perspectiveView') {\n        if ($('#perspectivePanel').is(':visible')) return\n        $('#perspectivePanel').dialog({\n          title: 'Perspective View',\n          width: 520, height: 190,\n          position: {my: 'center center', at: 'center center', of: 'svg'}\n        })\n        drawPerspective()\n        return\n      }\n    }\n    if (parent === 'mapFilters') {\n      $('svg').attr('filter', '')\n      if ($(this).hasClass('pressed')) {\n        $('#mapFilters .pressed').removeClass('pressed')\n      } else {\n        $('#mapFilters .pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        $('svg').attr('filter', 'url(#filter-' + id + ')')\n      }\n      return\n    }\n    if (id === 'updateFullscreen') {\n      mapWidthInput.value = window.innerWidth\n      mapHeightInput.value = window.innerHeight\n      localStorage.removeItem('mapHeight')\n      localStorage.removeItem('mapWidth')\n      changeMapSize()\n    }\n    if (id === 'zoomExtentDefault') {\n      zoomExtentMin.value = 1\n      zoomExtentMax.value = 20\n      zoom.scaleExtent([1, 20]).scaleTo(svg, 1)\n    }\n    if (id === 'saveButton') {$('#saveDropdown').slideToggle()}\n    if (id === 'loadMap') {mapToLoad.click()}\n    if (id === 'zoomReset') {resetZoom(1000)}\n    if (id === 'zoomPlus') {\n      scale += 1\n      if (scale > 40) {scale = 40}\n      invokeActiveZooming()\n    }\n    if (id === 'zoomMinus') {\n      scale -= 1\n      if (scale <= 1) {\n        scale = 1\n        viewX = 0\n        viewY = 0\n      }\n      invokeActiveZooming()\n    }\n    if (id === 'styleFontPlus' || id === 'styleFontMinus') {\n      var el = viewbox.select('#' + styleElementSelect.value)\n      var mod = id === 'styleFontPlus' ? 1.1 : 0.9\n      el.selectAll('g').each(function() {\n        const el = d3.select(this)\n        let size = _.round(el.attr('data-size') * mod, 2)\n        if (size < 2) {size = 2}\n        el.attr('data-size', size).attr('font-size', _.round((size + (size / scale)) / 2, 2))\n      })\n      invokeActiveZooming()\n      return\n    }\n    if (id === 'brushClear') {\n      if (customization === 1) {\n        var message = 'Are you sure you want to clear the map?'\n        alertMessage.innerHTML = message\n        $('#alert').dialog({\n          resizable: false, title: 'Clear map',\n          buttons: {\n            Clear: function() {\n              $(this).dialog('close')\n              viewbox.style('cursor', 'crosshair').call(drag)\n              landmassCounter.innerHTML = '0'\n              $('#landmass').empty()\n              heights = new Uint8Array(heights.length)\n              // clear history\n              history = []\n              historyStage = 0\n              updateHistory()\n              redo.disabled = templateRedo.disabled = true\n              undo.disabled = templateUndo.disabled = true\n            },\n            Cancel: function() {$(this).dialog('close')}\n          }\n        })\n      } else {\n        start.click()\n      }\n    }\n    if (id === 'templateComplete') getMap()\n    if (id === 'convertColorsMinus') {\n      var current = +convertColors.value - 1\n      if (current < 4) {current = 3}\n      convertColors.value = current\n      heightsFromImage(current)\n    }\n    if (id === 'convertColorsPlus') {\n      var current = +convertColors.value + 1\n      if (current > 255) {current = 256}\n      convertColors.value = current\n      heightsFromImage(current)\n    }\n    if (id === 'convertOverlayButton') {\n      $('#convertImageButtons').children().not(this).not('#convertColors').toggle()\n    }\n    if (id === 'convertAutoLum') {autoAssing('lum')}\n    if (id === 'convertAutoHue') {autoAssing('hue')}\n    if (id === 'convertComplete') {completeConvertion()}\n  })\n\n  // support save options\n  $('#saveDropdown > div').click(function() {\n    const id = this.id\n    let dns_allow_popup_message = localStorage.getItem('dns_allow_popup_message')\n    if (!dns_allow_popup_message) {\n      localStorage.clear()\n      let message = 'Generator uses pop-up window to download files. '\n      message += 'Please ensure your browser does not block popups. '\n      message += 'Please check browser settings and turn off adBlocker if it is enabled'\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        title: 'File saver. Please enable popups!',\n        buttons: {\n          'Don\\'t show again': function() {\n            localStorage.setItem('dns_allow_popup_message', true)\n            $(this).dialog('close')\n          },\n          Close: function() {$(this).dialog('close')}\n        },\n        position: {my: 'center', at: 'center', of: 'svg'}\n      })\n    }\n    if (id === 'saveMap') {saveMap()}\n    if (id === 'saveSVG') {saveAsImage('svg')}\n    if (id === 'savePNG') {saveAsImage('png')}\n    $('#saveDropdown').slideUp('fast')\n  })\n\n  function editHeightmap(type) {\n    closeDialogs()\n    const regionData = [], cultureData = []\n    if (type !== 'clean') {\n      for (let i = 0; i < points.length; i++) {\n        let cell = diagram.find(points[i][0], points[i][1]).index\n        // if closest cell is a small lake, try to find a land neighbor\n        if (cells[cell].lake === 2) cells[cell].neighbors.forEach(function(n) {\n          if (cells[n].height >= 20) {cell = n }\n        })\n        let region = cells[cell].region\n        if (region === undefined) region = -1\n        regionData.push(region)\n        let culture = cells[cell].culture\n        if (culture === undefined) culture = -1\n        cultureData.push(culture)\n      }\n    } else {undraw()}\n    calculateVoronoi(points)\n    detectNeighbors('grid')\n    drawScaleBar()\n    if (type === 'keep') {\n      svg.selectAll(\n        '#lakes, #coastline, #terrain, #rivers, #grid, #terrs, #landmass, #ocean, #regions')\n         .selectAll('path, circle, line').remove()\n      svg.select('#shape').remove()\n      for (let i = 0; i < points.length; i++) {\n        if (regionData[i] !== -1) cells[i].region = regionData[i]\n        if (cultureData[i] !== -1) cells[i].culture = cultureData[i]\n      }\n    }\n    mockHeightmap()\n    customizeHeightmap()\n    openBrushesPanel()\n  }\n\n  function openBrushesPanel() {\n    if ($('#brushesPanel').is(':visible')) {return}\n    $('#brushesPanel').dialog({\n      title: 'Paint Brushes',\n      minHeight: 40, width: 'auto', maxWidth: 200, resizable: false,\n      position: {my: 'right top', at: 'right-10 top+10', of: 'svg'}\n    }).on('dialogclose', function() {\n      restoreDefaultEvents()\n      $('#brushesButtons > .pressed').removeClass('pressed')\n    })\n\n    if (modules.openBrushesPanel) return\n    modules.openBrushesPanel = true\n\n    $('#brushesButtons > button').on('click', function() {\n      const rSlider = $('#brushRadiusLabel, #brushRadius')\n      debug.selectAll('.circle, .tag, .line').remove()\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed')\n        restoreDefaultEvents()\n        rSlider.attr('disabled', true).addClass('disabled')\n      } else {\n        $('#brushesButtons > .pressed').removeClass('pressed')\n        $(this).addClass('pressed')\n        viewbox.style('cursor', 'crosshair')\n        const id = this.id\n        if (id === 'brushRange' || id === 'brushTrough') {\n          viewbox.on('click', placeLinearFeature)\n        } // on click brushes\n        else {viewbox.call(drag).on('click', null)} // on drag brushes\n        if ($(this).hasClass('feature')) {\n          rSlider.attr('disabled', true).addClass('disabled')\n        } else {rSlider.attr('disabled', false).removeClass('disabled')}\n      }\n    })\n  }\n\n  function drawPerspective() {\n    console.time('drawPerspective')\n    const width = 320, height = 180\n    const wRatio = graphWidth / width, hRatio = graphHeight / height\n    const lineCount = 320, lineGranularity = 90\n    const perspective = document.getElementById('perspective')\n    const pContext = perspective.getContext('2d')\n    const lines = []\n    let i = lineCount\n    while (i--) {\n      const x = i / lineCount * width | 0\n      const canvasPoints = []\n      lines.push(canvasPoints)\n      let j = Math.floor(lineGranularity)\n      while (j--) {\n        const y = j / lineGranularity * height | 0\n        let index = getCellIndex(x * wRatio, y * hRatio)\n        let h = heights[index] - 20\n        if (h < 1) h = 0\n        canvasPoints.push([x, y, h])\n      }\n    }\n    pContext.clearRect(0, 0, perspective.width, perspective.height)\n    for (let canvasPoints of lines) {\n      for (let i = 0; i < canvasPoints.length - 1; i++) {\n        const pt1 = canvasPoints[i]\n        const pt2 = canvasPoints[i + 1]\n        const avHeight = (pt1[2] + pt2[2]) / 200\n        pContext.beginPath()\n        pContext.moveTo(...transformPt(pt1))\n        pContext.lineTo(...transformPt(pt2))\n        let clr = 'rgb(81, 103, 169)' // water\n        if (avHeight !== 0) {clr = color(1 - avHeight - 0.2)}\n        pContext.strokeStyle = clr\n        pContext.stroke()\n      }\n      for (let i = 0; i < canvasPoints.length - 1; i++) {\n\n      }\n    }\n    console.timeEnd('drawPerspective')\n  }\n\n  // get square grid cell index based on coords\n  function getCellIndex(x, y) {\n    const index = diagram.find(x, y).index\n    // let cellsX = Math.round(graphWidth / spacing);\n    // let index = Math.ceil(y / spacing) * cellsX + Math.round(x / spacing);\n    return index\n  }\n\n  function transformPt(pt) {\n    const width = 320, maxHeight = 0.2\n    var [x, y] = projectIsometric(pt[0], pt[1])\n    return [x + width / 2 + 10, y + 10 - pt[2] * maxHeight]\n  }\n\n  function projectIsometric(x, y) {\n    const scale = 1, yProj = 4\n    return [(x - y) * scale, (x + y) / yProj * scale]\n  }\n\n  // Execute custom template\n  $('#templateRun').on('click', function() {\n    if (customization !== 1) return\n    let steps = $('#templateBody > div').length\n    if (!steps) return\n    heights = new Uint8Array(heights.length) // clean all heights\n    for (let step = 1; step <= steps; step++) {\n      const type = $('#templateBody div:nth-child(' + step + ')').attr('data-type')\n      if (type === 'Mountain') {\n        addMountain()\n        continue\n      }\n      let count = $('#templateBody div:nth-child(' + step + ') .templateElCount').val()\n      const dist = $('#templateBody div:nth-child(' + step + ') .templateElDist').val()\n      if (count) {\n        if (count[0] !== '-' && count.includes('-')) {\n          const lim = count.split('-')\n          count = Math.floor(Math.random() * (+lim[1] - +lim[0] + 1) + +lim[0])\n        } else {\n          count = +count // parse string\n        }\n      }\n      if (type === 'Hill') {addHill(count, +dist)}\n      if (type === 'Pit') {addPit(count)}\n      if (type === 'Range') {addRange(count)}\n      if (type === 'Trough') {addRange(-1 * count)}\n      if (type === 'Strait') {addStrait(count)}\n      if (type === 'Add') {modifyHeights(dist, count, 1)}\n      if (type === 'Multiply') {modifyHeights(dist, 0, count)}\n      if (type === 'Smooth') {smoothHeights(count)}\n    }\n    mockHeightmap()\n    updateHistory()\n  })\n\n  $('#templateToLoad').change(function() {\n    const fileToLoad = this.files[0]\n    this.value = ''\n    const fileReader = new FileReader()\n    fileReader.onload = function(fileLoadedEvent) {\n      const dataLoaded = fileLoadedEvent.target.result\n      const data = dataLoaded.split('\\r\\n')\n      $('#templateBody').empty()\n      if (data.length > 0) {\n        $('#templateBody').attr('data-changed', 1)\n        $('#templateSelect').attr('data-prev', 'templateCustom').val('templateCustom')\n      }\n      for (let i = 0; i < data.length; i++) {\n        const line = data[i].split(' ')\n        this.addStep(line[0], line[1], line[2])\n      }\n    }\n    fileReader.readAsText(fileToLoad, 'UTF-8')\n  })\n\n  // Image to Heightmap Converter dialog\n  function convertImage() {\n    canvas.width = svgWidth\n    canvas.height = svgHeight\n    // turn off paint brushes drag and cursor\n    $('.pressed').removeClass('pressed')\n    restoreDefaultEvents()\n    const div = d3.select('#colorScheme')\n    if (div.selectAll('*').size() === 0) {\n      for (let i = 0; i <= 100; i++) {\n        let width = i < 20 || i > 70 ? '1px' : '3px'\n        if (i === 0) width = '4px'\n        const clr = color(1 - i / 100)\n        const style = 'background-color: ' + clr + '; width: ' + width\n        div.append('div').attr('data-color', i).attr('style', style)\n      }\n      div.selectAll('*').on('touchmove mousemove', showHeight).on('click', assignHeight)\n    }\n    if ($('#imageConverter').is(':visible')) {return}\n    $('#imageConverter').dialog({\n      title: 'Image to Heightmap Converter',\n      minHeight: 30, width: 260, resizable: false,\n      position: {my: 'right top', at: 'right-10 top+10', of: 'svg'}\n    })\n                        .on('dialogclose', function() {completeConvertion()})\n  }\n\n  // Load image to convert\n  $('#convertImageLoad').on('click', function() {imageToLoad.click()})\n  $('#imageToLoad').change(function() {\n    console.time('loadImage')\n    // set style\n    resetZoom()\n    grid.attr('stroke-width', .2)\n    // load image\n    const file = this.files[0]\n    this.value = '' // reset input value to get triggered if the same file is uploaded\n    const reader = new FileReader()\n    const img = new Image\n    // draw image\n    img.onload = function() {\n      ctx.drawImage(img, 0, 0, svgWidth, svgHeight)\n      heightsFromImage(+convertColors.value)\n      console.timeEnd('loadImage')\n    }\n    reader.onloadend = function() {img.src = reader.result}\n    reader.readAsDataURL(file)\n  })\n\n  function heightsFromImage(count) {\n    const imageData = ctx.getImageData(0, 0, svgWidth, svgHeight)\n    const data = imageData.data\n    $('#landmass > path, .color-div').remove()\n    $('#landmass, #colorsUnassigned').fadeIn()\n    $('#colorsAssigned').fadeOut()\n    const colors = [], palette = []\n    points.map(function(i) {\n      let x = Math.round(i[0]), y = Math.round(i[1])\n      if (y == svgHeight) {y--}\n      if (x == svgWidth) {x--}\n      const p = (x + y * svgWidth) * 4\n      const r = data[p], g = data[p + 1], b = data[p + 2]\n      colors.push([r, g, b])\n    })\n    const cmap = quantize(colors, count)\n    heights = new Uint8Array(points.length)\n    polygons.map(function(i, d) {\n      const nearest = cmap.nearest(colors[d])\n      const rgb = 'rgb(' + nearest[0] + ', ' + nearest[1] + ', ' + nearest[2] + ')'\n      const hex = toHEX(rgb)\n      if (palette.indexOf(hex) === -1) {palette.push(hex)}\n      landmass.append('path')\n              .attr('d', 'M' + i.join('L') + 'Z').attr('data-i', d)\n              .attr('fill', hex).attr('stroke', hex)\n    })\n    landmass.selectAll('path').on('click', landmassClicked)\n    palette.sort(function(a, b) {return d3.lab(a).b - d3.lab(b).b}).map(function(i) {\n      $('#colorsUnassigned').append(\n        '<div class=\"color-div\" id=\"' + i.substr(1) + '\" style=\"background-color: ' + i + ';\"/>')\n    })\n    $('.color-div').click(selectColor)\n  }\n\n  function landmassClicked() {\n    const color = d3.select(this).attr('fill')\n    $('#' + color.slice(1)).click()\n  }\n\n  function selectColor() {\n    landmass.selectAll('.selectedCell').classed('selectedCell', 0)\n    const el = d3.select(this)\n    if (el.classed('selectedColor')) {\n      el.classed('selectedColor', 0)\n    } else {\n      $('.selectedColor').removeClass('selectedColor')\n      el.classed('selectedColor', 1)\n      $('#colorScheme .hoveredColor').removeClass('hoveredColor')\n      $('#colorsSelectValue').text(0)\n      if (el.attr('data-height')) {\n        const height = el.attr('data-height')\n        $('#colorScheme div[data-color=\\'' + height + '\\']').addClass('hoveredColor')\n        $('#colorsSelectValue').text(height)\n      }\n      const color = '#' + d3.select(this).attr('id')\n      landmass.selectAll('path').classed('selectedCell', 0)\n      landmass.selectAll('path[fill=\\'' + color + '\\']').classed('selectedCell', 1)\n    }\n  }\n\n  function showHeight() {\n    let el = d3.select(this)\n    let height = el.attr('data-color')\n    $('#colorsSelectValue').text(height)\n    $('#colorScheme .hoveredColor').removeClass('hoveredColor')\n    el.classed('hoveredColor', 1)\n  }\n\n  function assignHeight() {\n    const sel = $('.selectedColor')[0]\n    const height = +d3.select(this).attr('data-color')\n    const rgb = color(1 - height / 100)\n    const hex = toHEX(rgb)\n    sel.style.backgroundColor = rgb\n    sel.setAttribute('data-height', height)\n    const cur = '#' + sel.id\n    sel.id = hex.substr(1)\n    landmass.selectAll('.selectedCell').each(function() {\n      d3.select(this).attr('fill', hex).attr('stroke', hex)\n      let i = +d3.select(this).attr('data-i')\n      heights[i] = height\n    })\n    const parent = sel.parentNode\n    if (parent.id === 'colorsUnassigned') {\n      colorsAssigned.appendChild(sel)\n      $('#colorsAssigned').fadeIn()\n      if ($('#colorsUnassigned .color-div').length < 1) {$('#colorsUnassigned').fadeOut()}\n    }\n    if ($('#colorsAssigned .color-div').length > 1) {sortAssignedColors()}\n  }\n\n  // sort colors based on assigned height\n  function sortAssignedColors() {\n    const data = []\n    const colors = d3.select('#colorsAssigned').selectAll('.color-div')\n    colors.each(function(d) {\n      const id = d3.select(this).attr('id')\n      const height = +d3.select(this).attr('data-height')\n      data.push({id, height})\n    })\n    data.sort(function(a, b) {return a.height - b.height}).map(function(i) {\n      $('#colorsAssigned').append($('#' + i.id))\n    })\n  }\n\n  // auto assign color based on luminosity or hue\n  function autoAssing(type) {\n    const imageData = ctx.getImageData(0, 0, svgWidth, svgHeight)\n    const data = imageData.data\n    $('#landmass > path, .color-div').remove()\n    $('#colorsAssigned').fadeIn()\n    $('#colorsUnassigned').fadeOut()\n    polygons.forEach(function(i, d) {\n      let x = Math.round(i.data[0]), y = Math.round(i.data[1])\n      if (y == svgHeight) y--\n      if (x == svgWidth) x--\n      const p = (x + y * svgWidth) * 4\n      const r = data[p], g = data[p + 1], b = data[p + 2]\n      const lab = d3.lab('rgb(' + r + ', ' + g + ', ' + b + ')')\n      if (type === 'hue') {\n        var normalized = _.round(normalize(lab.b + lab.a / 2, -50, 200), 2)\n      } else {\n        var normalized = _.round(normalize(lab.l, 0, 100), 2)\n      }\n      const rgb = color(1 - normalized)\n      const hex = toHEX(rgb)\n      heights[d] = normalized * 100\n      landmass.append('path').attr('d', 'M' + i.join('L') + 'Z').attr('data-i', d)\n              .attr('fill', hex).attr('stroke', hex)\n    })\n    let unique = [...new Set(heights)].sort()\n    unique.forEach(function(h) {\n      const rgb = color(1 - h / 100)\n      const hex = toHEX(rgb)\n      $('#colorsAssigned').append('<div class=\"color-div\" id=\"' + hex.substr(\n        1) + '\" data-height=\"' + h + '\" style=\"background-color: ' + hex + ';\"/>')\n    })\n    $('.color-div').click(selectColor)\n  }\n\n  function normalize(val, min, max) {\n    let normalized = (val - min) / (max - min)\n    if (normalized < 0) {normalized = 0}\n    if (normalized > 1) {normalized = 1}\n    return normalized\n  }\n\n  function completeConvertion() {\n    mockHeightmap()\n    restartHistory()\n    $('.color-div').remove()\n    $('#colorsAssigned, #colorsUnassigned').fadeOut()\n    grid.attr('stroke-width', .1)\n    canvas.style.opacity = convertOverlay.value = convertOverlayValue.innerHTML = 0\n    // turn on paint brushes drag and cursor\n    viewbox.style('cursor', 'crosshair').call(drag)\n    $('#imageConverter').dialog('close')\n  }\n\n  // Clear the map\n  function undraw() {\n    viewbox.selectAll('path, circle, line, text, use, #ruler > g').remove()\n    defs.selectAll('*').remove()\n    landmass.select('rect').remove()\n    cells = [], land = [], riversData = [], manors = [], states = [], features = [], queue = []\n  }\n\n  // Enter Heightmap Customization mode\n  function customizeHeightmap() {\n    customization = 1\n    tip('Heightmap customization mode is active. Click on \"Complete\" to finalize the Heightmap',\n      true)\n    $('#getMap').removeClass('buttonoff').addClass('glow')\n    resetZoom()\n    landmassCounter.innerHTML = '0'\n    $('#grid').fadeIn()\n    $('#toggleGrid').removeClass('buttonoff')\n    restartHistory()\n    $('#customizationMenu').slideDown()\n    $('#openEditor').slideUp()\n  }\n\n  // Remove all customization related styles, reset values\n  function exitCustomization() {\n    customization = 0\n    tip('', true)\n    canvas.style.opacity = 0\n    $('#customizationMenu').slideUp()\n    $('#getMap').addClass('buttonoff').removeClass('glow')\n    $('#landmass').empty()\n    $('#grid').empty().fadeOut()\n    $('#toggleGrid').addClass('buttonoff')\n    restoreDefaultEvents()\n    if (!$('#toggleHeight').hasClass('buttonoff')) {toggleHeight()}\n    closeDialogs()\n    history = []\n    historyStage = 0\n    $('#customizeHeightmap').slideUp()\n    $('#openEditor').slideDown()\n    debug.selectAll('.circle, .tag, .line').remove()\n  }\n\n  // open editCountries dialog\n  function editCountries() {\n    if (cults.selectAll('path').size()) $('#toggleCultures').click()\n    if (regions.style('display') === 'none') $('#toggleCountries').click()\n    layoutPreset.value = 'layoutPolitical'\n    $('#countriesBody').empty()\n    $('#countriesHeader').children().removeClass(\n      'icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down')\n    let totalArea = 0, totalBurgs = 0, unit, areaConv\n    if (areaUnit.value === 'square') {unit = ' ' + distanceUnit.value + '²'} else {\n      unit = ' ' + areaUnit.value\n    }\n    let totalPopulation = 0\n    for (let s = 0; s < states.length; s++) {\n      $('#countriesBody').append('<div class=\"states\" id=\"state' + s + '\"></div>')\n      const el = $('#countriesBody div:last-child')\n      const burgsCount = states[s].burgs\n      totalBurgs += burgsCount\n      // calculate user-friendly area and population\n      const area = Math.round(states[s].area * Math.pow(distanceScale.value, 2))\n      totalArea += area\n      areaConv = si(area) + unit\n      const urban = Math.round(states[s].urbanPopulation * urbanization.value * populationRate.value)\n      const rural = _.round(states[s].ruralPopulation * populationRate.value)\n      var population = (urban + rural) * 1000\n      totalPopulation += population\n      const populationConv = si(population)\n      const title = '\\'Total population: ' + populationConv + '; Rural population: ' + rural + 'K; Urban population: ' + urban + 'K\\''\n      let neutral = states[s].color === 'neutral' || states[s].capital === 'neutral'\n      // append elements to countriesBody\n      if (!neutral) {\n        el.append(\n          '<input onmouseover=\"tip(\\'Country color. Click to change\\')\" class=\"stateColor\" type=\"color\" value=\"' + states[s].color + '\"/>')\n        el.append(\n          '<input onmouseover=\"tip(\\'Country name. Click and type to change\\')\" class=\"stateName\" value=\"' + states[s].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>')\n        var capital = states[s].capital !== 'select' ? manors[states[s].capital].name : 'select'\n        if (capital === 'select') {\n          el.append(\n            '<button onmouseover=\"tip(\\'Click on map to select a capital or to create a new capital\\')\" class=\"selectCapital\" id=\"selectCapital' + s + '\">★ select</button>')\n        } else {\n          el.append(\n            '<span onmouseover=\"tip(\\'Country capital. Click to enlange\\')\" class=\"icon-star-empty enlange\"></span>')\n          el.append(\n            '<input onmouseover=\"tip(\\'Capital name. Click and type to rename\\')\" class=\"stateCapital\" value=\"' + capital + '\" autocorrect=\"off\" spellcheck=\"false\"/>')\n        }\n        el.append(\n          '<span onmouseover=\"tip(\\'Country expansionism (defines competitive size)\\')\" class=\"icon-resize-full hidden\"></span>')\n        el.append(\n          '<input onmouseover=\"tip(\\'Capital expansionism (defines competitive size)\\')\" class=\"statePower hidden\" type=\"number\" min=\"0\" max=\"99\" step=\"0.1\" value=\"' + states[s].power + '\"/>')\n      } else {\n        el.append('<input class=\"stateColor placeholder\" disabled type=\"color\"/>')\n        el.append(\n          '<input onmouseover=\"tip(\\'Neutral burgs are united into this group. Click to change the group name\\')\" class=\"stateName italic\" id=\"stateName' + s + '\" value=\"' + states[s].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>')\n        el.append('<span class=\"icon-star-empty placeholder\"></span>')\n        el.append('<input class=\"stateCapital placeholder\"/>')\n        el.append('<span class=\"icon-resize-full hidden placeholder\"></span>')\n        el.append('<input class=\"statePower hidden placeholder\" value=\"0.0\"/>')\n      }\n      el.append('<span onmouseover=\"tip(\\'Cells count\\')\" class=\"icon-check-empty\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(\\'Cells count\\')\" class=\"stateCells\">' + states[s].cells + '</div>')\n      el.append(\n        '<span onmouseover=\"tip(\\'Burgs count. Click to see a full list\\')\" style=\"padding-right: 1px\" class=\"stateBIcon icon-dot-circled\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(\\'Burgs count. Click to see a full list\\')\" class=\"stateBurgs\">' + burgsCount + '</div>')\n      el.append(\n        '<span onmouseover=\"tip(\\'Country area: ' + (area + unit) + '\\')\" style=\"padding-right: 4px\" class=\"icon-map-o\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(\\'Country area: ' + (area + unit) + '\\')\" class=\"stateArea\">' + areaConv + '</div>')\n      el.append('<span onmouseover=\"tip(' + title + ')\" class=\"icon-male\"></span>')\n      el.append(\n        '<input onmouseover=\"tip(' + title + ')\" class=\"statePopulation\" value=\"' + populationConv + '\">')\n      if (!neutral) {\n        el.append(\n          '<span onmouseover=\"tip(\\'Remove country, all assigned cells will become Neutral\\')\" class=\"icon-trash-empty\"></span>')\n        el.attr('data-country', states[s].name).attr('data-capital', capital)\n          .attr('data-expansion', states[s].power).attr('data-cells', states[s].cells)\n          .attr('data-burgs', states[s].burgs).attr('data-area', area)\n          .attr('data-population', population)\n      } else {\n        el.attr('data-country', 'bottom').attr('data-capital', 'bottom')\n          .attr('data-expansion', 'bottom').attr('data-cells', states[s].cells)\n          .attr('data-burgs', states[s].burgs).attr('data-area', area)\n          .attr('data-population', population)\n      }\n    }\n    // initialize jQuery dialog\n    if (!$('#countriesEditor').is(':visible')) {\n      $('#countriesEditor').dialog({\n        title: 'Countries Editor',\n        minHeight: 'auto', minWidth: Math.min(svgWidth, 390),\n        position: {my: 'right top', at: 'right-10 top+10', of: 'svg'}\n      }).on('dialogclose', function() {\n        if (customization === 2 || customization === 3) {\n          $('#countriesManuallyCancel').click()\n        }\n      })\n    }\n    // restore customization Editor version\n    if (customization === 3) {\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').removeClass('hidden')\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').addClass('hidden')\n    } else {\n      $('div[data-sortby=\\'expansion\\'],.statePower, .icon-resize-full').addClass('hidden')\n      $('div[data-sortby=\\'cells\\'],.stateCells, .icon-check-empty').removeClass('hidden')\n    }\n    // populate total line on footer\n    countriesFooterCountries.innerHTML = states.length\n    if (states[states.length - 1].capital === 'neutral') {\n      countriesFooterCountries.innerHTML = states.length - 1\n    }\n    countriesFooterBurgs.innerHTML = totalBurgs\n    countriesFooterArea.innerHTML = si(totalArea) + unit\n    countriesFooterPopulation.innerHTML = si(totalPopulation)\n    // handle events\n    $('#countriesBody .states').hover(focusOnState, unfocusState)\n    $('.enlange').click(function() {\n      const s = +(this.parentNode.id).slice(5)\n      const capital = states[s].capital\n      const l = labels.select('[data-id=\\'' + capital + '\\']')\n      const x = +l.attr('x'), y = +l.attr('y')\n      zoomTo(x, y, 8, 1600)\n    })\n    $('.stateName').on('input', function() {\n      const s = +(this.parentNode.id).slice(5)\n      states[s].name = this.value\n      labels.select('#regionLabel' + s).text(this.value)\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          const color = '<input title=\"Country color. Click to change\" type=\"color\" class=\"stateColor\" value=\"' + states[s].color + '\"/>'\n          $('div[aria-describedby=\\'burgsEditor\\'] .ui-dialog-title').text('Burgs of ' + this.value)\n                                                                   .prepend(color)\n        }\n      }\n    })\n    $('.states > .stateColor').on('change', function() {\n      const s = +(this.parentNode.id).slice(5)\n      states[s].color = this.value\n      regions.selectAll('.region' + s).attr('fill', this.value).attr('stroke', this.value)\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          $('.ui-dialog-title > .stateColor').val(this.value)\n        }\n      }\n    })\n    $('.stateCapital').on('input', function() {\n      const s = +(this.parentNode.id).slice(5)\n      const capital = states[s].capital\n      manors[capital].name = this.value\n      labels.select('[data-id=\\'' + capital + '\\']').text(this.value)\n      if ($('#burgsEditor').is(':visible')) {\n        if ($('#burgsEditor').attr('data-state') == s) {\n          $('#burgs' + capital + ' > .burgName').val(this.value)\n        }\n      }\n    }).hover(focusCapital, unfocus)\n    $('.stateBurgs, .stateBIcon').on('click', editBurgs).hover(focusBurgs, unfocus)\n\n    $('#countriesBody > .states').on('click', function() {\n      if (customization === 2) {\n        $('.selected').removeClass('selected')\n        $(this).addClass('selected')\n        const state = +$(this).attr('id').slice(5)\n        let color = states[state].color\n        if (color === 'neutral') {color = 'white'}\n        if (debug.selectAll('.circle').size()) debug.selectAll('.circle').attr('stroke', color)\n      }\n    })\n\n    $('.selectCapital').on('click', function() {\n      if ($(this).hasClass('pressed')) {\n        $(this).removeClass('pressed')\n        tooltip.setAttribute('data-main', '')\n        restoreDefaultEvents()\n      } else {\n        $(this).addClass('pressed')\n        viewbox.style('cursor', 'crosshair').on('click', selectCapital)\n        tip('Click on the map to select or create a new capital', true)\n      }\n    })\n\n    function selectCapital() {\n      const point = d3.mouse(this)\n      const index = getIndex(point)\n      const x = _.round(point[0], 2), y = _.round(point[1], 2)\n\n      if (cells[index].height < 20) {\n        tip('Cannot place capital on the water! Select a land cell')\n        return\n      }\n      const state = +$('.selectCapital.pressed').attr('id').replace('selectCapital', '')\n      let oldState = cells[index].region\n      if (oldState === 'neutral') {oldState = states.length - 1}\n      if (cells[index].manor !== undefined) {\n        // cell has burg\n        const burg = cells[index].manor\n        if (states[oldState].capital === burg) {\n          tip('Existing capital cannot be selected as a new state capital! Select other cell')\n          return\n        } else {\n          // make this burg a new capital\n          const urbanFactor = 0.9 // for old neutrals\n          manors[burg].region = state\n          if (oldState === 'neutral') {manors[burg].population *= (1 / urbanFactor)}\n          manors[burg].population *= 2 // give capital x2 population bonus\n          states[state].capital = burg\n          moveBurgToGroup(burg, 'capitals')\n        }\n      } else {\n        // free cell -> create new burg for a capital\n        const closest = cultureTree.find(x, y)\n        const culture = cultureTree.data().indexOf(closest) || 0\n        const name = generateName(culture)\n        const i = manors.length\n        cells[index].manor = i\n        states[state].capital = i\n        let score = cells[index].score\n        if (score <= 0) {score = _.round(Math.random(), 2)}\n        if (cells[index].crossroad) {score += cells[index].crossroad} // crossroads\n        if (cells[index].confluence) {score += Math.pow(cells[index].confluence, 0.3)} // confluences\n        if (cells[index].port !== undefined) {score *= 3} // port-capital\n        const population = _.round(score, 1)\n        manors.push({i, cell: index, x, y, region: state, culture, name, population})\n        burgIcons.select('#capitals').append('circle').attr('id', 'burg' + i).attr('data-id', i)\n                 .attr('cx', x).attr('cy', y).attr('r', 1).on('click', editBurg)\n        burgLabels.select('#capitals').append('text').attr('data-id', i).attr('x', x).attr('y', y)\n                  .attr('dy', '-0.35em').text(name).on('click', editBurg)\n      }\n      cells[index].region = state\n      cells[index].neighbors.map(function(n) {\n        if (cells[n].height < 20) {return}\n        if (cells[n].manor !== undefined) {return}\n        cells[n].region = state\n      })\n      redrawRegions()\n      recalculateStateData(oldState) // re-calc old state data\n      recalculateStateData(state) // calc new state data\n      editCountries()\n      restoreDefaultEvents()\n    }\n\n    $('.statePower').on('input', function() {\n      const s = +(this.parentNode.id).slice(5)\n      states[s].power = +this.value\n      regenerateCountries()\n    })\n    $('.statePopulation').on('change', function() {\n      let s = +(this.parentNode.id).slice(5)\n      const popOr = +$(this).parent().attr('data-population')\n      const popNew = getInteger(this.value)\n      if (!Number.isInteger(popNew) || popNew < 1000) {\n        this.value = si(popOr)\n        return\n      }\n      const change = popNew / popOr\n      states[s].urbanPopulation = _.round(states[s].urbanPopulation * change, 2)\n      states[s].ruralPopulation = _.round(states[s].ruralPopulation * change, 2)\n      const urban = Math.round(states[s].urbanPopulation * urbanization.value * populationRate.value)\n      const rural = Math.round(states[s].ruralPopulation * populationRate.value)\n      const population = (urban + rural) * 1000\n      $(this).parent().attr('data-population', population)\n      this.value = si(population)\n      let total = 0\n      $('#countriesBody > div').each(function(e, i) {\n        total += +$(this).attr('data-population')\n      })\n      countriesFooterPopulation.innerHTML = si(total)\n      if (states[s].capital === 'neutral') {s = 'neutral'}\n      manors.map(function(m) {\n        if (m.region !== s) {return}\n        m.population = _.round(m.population * change, 2)\n      })\n    })\n    // fully remove country\n    $('#countriesBody .icon-trash-empty').on('click', function() {\n      const s = +(this.parentNode.id).slice(5)\n      alertMessage.innerHTML =\n        `Are you sure you want to remove the country? All lands and burgs will become neutral`\n      $('#alert').dialog({\n        resizable: false, title: 'Remove country', buttons: {\n          Remove: function() {\n            removeCountry(s)\n            $(this).dialog('close')\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    function removeCountry(s) {\n      const cellsCount = states[s].cells\n      const capital = +states[s].capital\n      if (!isNaN(capital)) moveBurgToGroup(capital, 'towns')\n      states.splice(s, 1)\n      states.map(function(s, i) {s.i = i})\n      land.map(function(c) {\n        if (c.region === s) c.region = 'neutral'\n        else if (c.region > s) c.region -= 1\n      })\n      // do only if removed state had cells\n      if (cellsCount) {\n        manors.map(function(b) {if (b.region === s) b.region = 'neutral'})\n        // re-calculate neutral data\n        const i = states.length\n        if (states[i - 1].capital !== 'neutral') {\n          states.push({i, color: 'neutral', name: 'Neutrals', capital: 'neutral'})\n        }\n        recalculateStateData(i - 1) // re-calc data for neutrals\n        redrawRegions()\n      }\n      editCountries()\n    }\n\n    $('#countriesNeutral, #countriesNeutralNumber').on('change', regenerateCountries)\n  }\n\n  // burgs list + editor\n  function editBurgs(context, s) {\n    if (s === undefined) {s = +(this.parentNode.id).slice(5)}\n    $('#burgsEditor').attr('data-state', s)\n    $('#burgsBody').empty()\n    $('#burgsHeader').children().removeClass(\n      'icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down')\n    const region = states[s].capital === 'neutral' ? 'neutral' : s\n    const burgs = $.grep(manors, function(e) {\n      return (e.region === region)\n    })\n    const populationArray = []\n    burgs.map(function(b) {\n      $('#burgsBody').append('<div class=\"states\" id=\"burgs' + b.i + '\"></div>')\n      const el = $('#burgsBody div:last-child')\n      el.append(\n        '<span title=\"Click to enlarge the burg\" style=\"padding-right: 2px\" class=\"enlarge icon-globe\"></span>')\n      el.append(\n        '<input title=\"Burg name. Click and type to change\" class=\"burgName\" value=\"' + b.name + '\" autocorrect=\"off\" spellcheck=\"false\"/>')\n      el.append(\n        '<span title=\"Burg culture\" class=\"icon-book\" style=\"padding-right: 2px\"></span>')\n      el.append(\n        '<div title=\"Burg culture\" class=\"burgCulture\">' + cultures[b.culture].name + '</div>')\n      let population = b.population * urbanization.value * populationRate.value * 1000\n      populationArray.push(population)\n      population = population > 1e4 ? si(population) : _.round(population, -1)\n      el.append('<span title=\"Population\" class=\"icon-male\"></span>')\n      el.append(\n        '<input title=\"Population. Input to change\" class=\"burgPopulation\" value=\"' + population + '\"/>')\n      const capital = states[s].capital\n      let type = 'z-burg' // usual burg by default\n      if (b.i === capital) {\n        el.append('<span title=\"Capital\" class=\"icon-star-empty\"></span>')\n        type = 'c-capital'\n      } else {el.append('<span class=\"icon-star-empty placeholder\"></span>')}\n      if (cells[b.cell].port !== undefined) {\n        el.append('<span title=\"Port\" class=\"icon-anchor small\"></span>')\n        if (type === 'c-capital') {type = 'a-capital-port'} else {type = 'p-port'}\n      } else {\n        el.append('<span class=\"icon-anchor placeholder\"></span>')\n      }\n      if (b.i !== capital) {\n        el.append('<span title=\"Remove burg\" class=\"icon-trash-empty\"></span>')\n      }\n      el.attr('data-burg', b.name).attr('data-culture', cultures[b.culture].name)\n        .attr('data-population', b.population).attr('data-type', type)\n    })\n    if (!$('#burgsEditor').is(':visible')) {\n      $('#burgsEditor').dialog({\n        title: 'Burgs of ' + states[s].name,\n        minHeight: 'auto', width: 'auto',\n        position: {my: 'right bottom', at: 'right-10 bottom-10', of: 'svg'}\n      })\n      const color = '<input title=\"Country color. Click to change\" type=\"color\" class=\"stateColor\" value=\"' + states[s].color + '\"/>'\n      if (region !== 'neutral') {\n        $('div[aria-describedby=\\'burgsEditor\\'] .ui-dialog-title').prepend(color)\n      }\n    }\n    // populate total line on footer\n    burgsFooterBurgs.innerHTML = burgs.length\n    burgsFooterCulture.innerHTML = $('#burgsBody div:first-child .burgCulture').text()\n    const avPop = _.round(d3.mean(populationArray), -1)\n    burgsFooterPopulation.value = avPop\n    $('.enlarge').click(function() {\n      const b = +(this.parentNode.id).slice(5)\n      const l = labels.select('[data-id=\\'' + b + '\\']')\n      const x = +l.attr('x'), y = +l.attr('y')\n      zoomTo(x, y, 8, 1600)\n    })\n\n    $('#burgsBody > div').hover(focusBurg, unfocus)\n\n    $('#burgsBody > div').click(function() {\n      if (!$('#changeCapital').hasClass('pressed')) return\n      const s = +$('#burgsEditor').attr('data-state')\n      const newCap = +$(this).attr('id').slice(5)\n      const oldCap = +states[s].capital\n      if (newCap === oldCap) {\n        tip('This burg is already a capital! Please select a different burg', null, 'error')\n        return\n      }\n      $('#changeCapital').removeClass('pressed')\n      states[s].capital = newCap\n      if (!isNaN(oldCap)) moveBurgToGroup(oldCap, 'towns')\n      recalculateStateData(s)\n      moveBurgToGroup(newCap, 'capitals')\n    })\n\n    $('.burgName').on('input', function() {\n      const b = +(this.parentNode.id).slice(5)\n      manors[b].name = this.value\n      labels.select('[data-id=\\'' + b + '\\']').text(this.value)\n      if (b === s && $('#countriesEditor').is(':visible')) {\n        $('#state' + s + ' > .stateCapital').val(this.value)\n      }\n    })\n    $('.ui-dialog-title > .stateColor').on('change', function() {\n      states[s].color = this.value\n      regions.selectAll('.region' + s).attr('fill', this.value).attr('stroke', this.value)\n      if ($('#countriesEditor').is(':visible')) {\n        $('#state' + s + ' > .stateColor').val(this.value)\n      }\n    })\n    $('.burgPopulation').on('change', function() {\n      const b = +(this.parentNode.id).slice(5)\n      const pop = getInteger(this.value)\n      if (!Number.isInteger(pop) || pop < 10) {\n        const orig = _.round(manors[b].population * urbanization.value * populationRate.value * 1000,\n          2)\n        this.value = si(orig)\n        return\n      }\n      populationRaw = _.round(pop / urbanization.value / populationRate.value / 1000, 2)\n      const change = populationRaw - manors[b].population\n      manors[b].population = populationRaw\n      $(this).parent().attr('data-population', populationRaw)\n      this.value = si(pop)\n      let state = manors[b].region\n      if (state === 'neutral') {state = states.length - 1}\n      states[state].urbanPopulation += change\n      updateCountryPopulationUI(state)\n      const average = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000\n      burgsFooterPopulation.value = _.round(average, -1)\n    })\n    $('#burgsFooterPopulation').on('change', function() {\n      const state = +$('#burgsEditor').attr('data-state')\n      const newPop = +this.value\n      const avPop = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000\n      if (!Number.isInteger(newPop) || newPop < 10) {\n        this.value = _.round(avPop, -1)\n        return\n      }\n      const change = +this.value / avPop\n      $('#burgsBody > div').each(function(e, i) {\n        const b = +(this.id).slice(5)\n        const pop = _.round(manors[b].population * change, 2)\n        manors[b].population = pop\n        $(this).attr('data-population', pop)\n        let popUI = pop * urbanization.value * populationRate.value * 1000\n        popUI = popUI > 1e4 ? si(popUI) : _.round(popUI, -1)\n        $(this).children().filter('.burgPopulation').val(popUI)\n      })\n      states[state].urbanPopulation = _.round(states[state].urbanPopulation * change, 2)\n      updateCountryPopulationUI(state)\n    })\n    $('#burgsBody .icon-trash-empty').on('click', function() {\n      alertMessage.innerHTML = `Are you sure you want to remove the burg?`\n      const b = +(this.parentNode.id).slice(5)\n      $('#alert').dialog({\n        resizable: false, title: 'Remove burg',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            const state = +$('#burgsEditor').attr('data-state')\n            $('#burgs' + b).remove()\n            const cell = manors[b].cell\n            manors[b].region = 'removed'\n            cells[cell].manor = undefined\n            states[state].burgs = states[state].burgs - 1\n            burgsFooterBurgs.innerHTML = states[state].burgs\n            countriesFooterBurgs.innerHTML = +countriesFooterBurgs.innerHTML - 1\n            states[state].urbanPopulation = states[state].urbanPopulation - manors[b].population\n            const avPop = states[state].urbanPopulation / states[state].burgs * urbanization.value * populationRate.value * 1000\n            burgsFooterPopulation.value = _.round(avPop, -1)\n            if ($('#countriesEditor').is(':visible')) {\n              $('#state' + state + ' > .stateBurgs').text(states[state].burgs)\n            }\n            labels.select('[data-id=\\'' + b + '\\']').remove()\n            icons.select('[data-id=\\'' + b + '\\']').remove()\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n  }\n\n  // onhover style functions\n  function focusOnState() {\n    const s = +(this.id).slice(5)\n    labels.select('#regionLabel' + s).classed('drag', true)\n    document.getElementsByClassName('region' + s)[0].style.stroke = 'red'\n    document.getElementsByClassName('region' + s)[0].setAttribute('filter', 'url(#blur1)')\n  }\n\n  function unfocusState() {\n    const s = +(this.id).slice(5)\n    labels.select('#regionLabel' + s).classed('drag', false)\n    document.getElementsByClassName('region' + s)[0].style.stroke = 'none'\n    document.getElementsByClassName('region' + s)[0].setAttribute('filter', null)\n  }\n\n  function focusCapital() {\n    const s = +(this.parentNode.id).slice(5)\n    const capital = states[s].capital\n    labels.select('[data-id=\\'' + capital + '\\']').classed('drag', true)\n    icons.select('[data-id=\\'' + capital + '\\']').classed('drag', true)\n  }\n\n  function focusBurgs() {\n    const s = +(this.parentNode.id).slice(5)\n    const stateManors = $.grep(manors, function(e) {\n      return (e.region === s)\n    })\n    stateManors.map(function(m) {\n      labels.select('[data-id=\\'' + m.i + '\\']').classed('drag', true)\n      icons.select('[data-id=\\'' + m.i + '\\']').classed('drag', true)\n    })\n  }\n\n  function focusBurg() {\n    const b = +(this.id).slice(5)\n    const l = labels.select('[data-id=\\'' + b + '\\']')\n    l.classed('drag', true)\n  }\n\n  function unfocus() {$('.drag').removeClass('drag')}\n\n  // save dialog position if \"stable\" dialog window is dragged\n  $('.stable').on('dialogdragstop', function(event, ui) {\n    sessionStorage.setItem(this.id, [ui.offset.left, ui.offset.top])\n  })\n\n  // restore saved dialog position on \"stable\" dialog window open\n  $('.stable').on('dialogopen', function(event, ui) {\n    let pos = sessionStorage.getItem(this.id)\n    if (!pos) {return}\n    pos = pos.split(',')\n    if (pos[0] > $(window).width() - 100 || pos[1] > $(window).width() - 40) {return} // prevent showing out of screen\n    const at = `left+${pos[0]} top+${pos[1]}`\n    $(this).dialog('option', 'position', {my: 'left top', at: at, of: 'svg'})\n  })\n\n  // open editCultures dialog\n  function editCultures() {\n    if (!cults.selectAll('path').size()) $('#toggleCultures').click()\n    if (regions.style('display') !== 'none') $('#toggleCountries').click()\n    layoutPreset.value = 'layoutCultural'\n    $('#culturesBody').empty()\n    $('#culturesHeader').children().removeClass(\n      'icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down')\n\n    // collect data\n    const cellsC = [], areas = [], rurPops = [], urbPops = []\n    const unit = areaUnit.value === 'square' ? ' ' + distanceUnit.value + '²' :\n                 ' ' + areaUnit.value\n    land.map(function(l) {\n      const c = l.culture\n      if (c === undefined) return\n      cellsC[c] = cellsC[c] ? cellsC[c] + 1 : 1\n      areas[c] = areas[c] ? areas[c] + l.area : l.area\n      rurPops[c] = rurPops[c] ? rurPops[c] + l.pop : l.pop\n    })\n\n    manors.map(function(m) {\n      const c = m.culture\n      if (isNaN(c)) return\n      urbPops[c] = urbPops[c] ? urbPops[c] + m.population : m.population\n    })\n\n    if (!nameBases[0]) applyDefaultNamesData()\n    for (let c = 0; c < cultures.length; c++) {\n      $('#culturesBody').append('<div class=\"states cultures\" id=\"culture' + c + '\"></div>')\n      if (cellsC[c] === undefined) {\n        cellsC[c] = 0\n        areas[c] = 0\n        rurPops[c] = 0\n      }\n      if (urbPops[c] === undefined) urbPops[c] = 0\n      const area = Math.round(areas[c] * Math.pow(distanceScale.value, 2))\n      const areaConv = si(area) + unit\n      const urban = Math.round(urbPops[c] * +urbanization.value * populationRate.value)\n      const rural = Math.round(rurPops[c] * populationRate.value)\n      const population = (urban + rural) * 1000\n      const populationConv = si(population)\n      const title = '\\'Total population: ' + populationConv + '; Rural population: ' + rural + 'K; Urban population: ' + urban + 'K\\''\n      let b = cultures[c].base\n      if (b >= nameBases.length) b = 0\n      const base = nameBases[b].name\n      const el = $('#culturesBody div:last-child')\n      el.append(\n        '<input onmouseover=\"tip(\\'Culture color. Click to change\\')\" class=\"stateColor\" type=\"color\" value=\"' + cultures[c].color + '\"/>')\n      el.append(\n        '<input onmouseover=\"tip(\\'Culture name. Click and type to change\\')\" class=\"cultureName\" value=\"' + cultures[c].name + '\" autocorrect=\"off\" spellcheck=\"false\"/>')\n      el.append(\n        '<span onmouseover=\"tip(\\'Culture cells count\\')\" class=\"icon-check-empty\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(\\'Culture cells count\\')\" class=\"stateCells\">' + cellsC[c] + '</div>')\n      el.append(\n        '<span onmouseover=\"tip(\\'Culture area: ' + areaConv + '\\')\" style=\"padding-right: 4px\" class=\"icon-map-o\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(\\'Culture area: ' + areaConv + '\\')\" class=\"stateArea\">' + areaConv + '</div>')\n      el.append('<span onmouseover=\"tip(' + title + ')\" class=\"icon-male\"></span>')\n      el.append(\n        '<div onmouseover=\"tip(' + title + ')\" class=\"culturePopulation\">' + populationConv + '</div>')\n      el.append(\n        '<span onmouseover=\"tip(\\'Click to re-generate names for burgs with this culture assigned\\')\" class=\"icon-arrows-cw\"></span>')\n      el.append(\n        '<select onmouseover=\"tip(\\'Culture namesbase. Click to change\\')\" class=\"cultureBase\"></select>')\n      if (cultures.length > 1) {\n        el.append(\n          '<span onmouseover=\"tip(\\'Remove culture. Remaining cultures will be recalculated\\')\" class=\"icon-trash-empty\"></span>')\n      }\n      el.attr('data-color', cultures[c].color).attr('data-culture', cultures[c].name)\n        .attr('data-cells', cellsC[c]).attr('data-area', area).attr('data-population', population)\n        .attr('data-base', base)\n    }\n\n    addCultureBaseOptions()\n    drawCultureCenters()\n\n    let activeCultures = cellsC.reduce(function(s, v) {if (v) {return s + 1} else {return s}},\n      0)\n    culturesFooterCultures.innerHTML = activeCultures + '/' + cultures.length\n    culturesFooterCells.innerHTML = land.length\n    let totalArea = areas.reduce(function(s, v) {return s + v})\n    totalArea = Math.round(totalArea * Math.pow(distanceScale.value, 2))\n    culturesFooterArea.innerHTML = si(totalArea) + unit\n    let totalPopulation = rurPops.reduce(function(s, v) {return s + v}) * urbanization.value\n    totalPopulation += urbPops.reduce(function(s, v) {return s + v})\n    culturesFooterPopulation.innerHTML = si(totalPopulation * 1000 * populationRate.value)\n\n    // initialize jQuery dialog\n    if (!$('#culturesEditor').is(':visible')) {\n      $('#culturesEditor').dialog({\n        title: 'Cultures Editor',\n        minHeight: 'auto', minWidth: Math.min(svgWidth, 336),\n        position: {my: 'right top', at: 'right-10 top+10', of: 'svg'},\n        close: function() {\n          debug.select('#cultureCenters').selectAll('*').remove()\n          exitCulturesManualAssignment()\n        }\n      })\n    }\n\n    $('.cultures').hover(function() {\n      const c = +(this.id).slice(7)\n      debug.select('#cultureCenter' + c).attr('stroke', '#000000e6')\n    }, function() {\n      const c = +(this.id).slice(7)\n      debug.select('#cultureCenter' + c).attr('stroke', '#00000080')\n    })\n\n    $('.cultures').on('click', function() {\n      if (customization !== 4) return\n      const c = +(this.id).slice(7)\n      $('.selected').removeClass('selected')\n      $(this).addClass('selected')\n      let color = cultures[c].color\n      debug.selectAll('.circle').attr('stroke', color)\n    })\n\n    $('.cultures .stateColor').on('input', function() {\n      const c = +(this.parentNode.id).slice(7)\n      const old = cultures[c].color\n      cultures[c].color = this.value\n      debug.select('#cultureCenter' + c).attr('fill', this.value)\n      cults.selectAll('[fill=\"' + old + '\"]').attr('fill', this.value).attr('stroke', this.value)\n    })\n\n    $('.cultures .cultureName').on('input', function() {\n      const c = +(this.parentNode.id).slice(7)\n      cultures[c].name = this.value\n    })\n\n    $('.cultures .icon-arrows-cw').on('click', function() {\n      const c = +(this.parentNode.id).slice(7)\n      manors.forEach(function(m) {\n        if (m.region === 'removed') return\n        if (m.culture !== c) return\n        m.name = generateName(c)\n        labels.select('[data-id=\\'' + m.i + '\\']').text(m.name)\n      })\n    })\n\n    $('#culturesBody .icon-trash-empty').on('click', function() {\n      const c = +(this.parentNode.id).slice(7)\n      cultures.splice(c, 1)\n      const centers = cultures.map(function(c) {return c.center})\n      cultureTree = d3.quadtree(centers)\n      recalculateCultures('fullRedraw')\n      editCultures()\n    })\n\n    if (modules.editCultures) return\n    modules.editCultures = true\n\n    function addCultureBaseOptions() {\n      $('.cultureBase').each(function() {\n        const c = +(this.parentNode.id).slice(7)\n        for (let i = 0; i < nameBases.length; i++) {\n          this.options.add(new Option(nameBases[i].name, i))\n        }\n        this.value = cultures[c].base\n        this.addEventListener('change', function() {\n          cultures[c].base = +this.value\n        })\n      })\n    }\n\n    function drawCultureCenters() {\n      let cultureCenters = debug.select('#cultureCenters')\n      if (cultureCenters.size()) {cultureCenters.selectAll('*').remove()} else {\n        cultureCenters = debug.append('g').attr('id', 'cultureCenters')\n      }\n      for (let c = 0; c < cultures.length; c++) {\n        cultureCenters.append('circle').attr('id', 'cultureCenter' + c)\n                      .attr('cx', cultures[c].center[0]).attr('cy', cultures[c].center[1])\n                      .attr('r', 6).attr('stroke-width', 2).attr('stroke', '#00000080')\n                      .attr('fill', cultures[c].color)\n                      .on('mousemove', cultureCenterTip)\n                      .on('mouseleave', function() {tip('', true)})\n                      .call(d3.drag().on('start', cultureCenterDrag))\n      }\n    }\n\n    function cultureCenterTip() {\n      tip('Drag to move culture center and re-calculate cultures', true)\n    }\n\n    function cultureCenterDrag() {\n      const el = d3.select(this)\n      const c = +this.id.slice(13)\n\n      d3.event.on('drag', function() {\n        const x = d3.event.x, y = d3.event.y\n        el.attr('cx', x).attr('cy', y)\n        cultures[c].center = [x, y]\n        const centers = cultures.map(function(c) {return c.center})\n        cultureTree = d3.quadtree(centers)\n        recalculateCultures()\n      })\n    }\n\n    $('#culturesPercentage').on('click', function() {\n      const el = $('#culturesEditor')\n      if (el.attr('data-type') === 'absolute') {\n        el.attr('data-type', 'percentage')\n        const totalCells = land.length\n        let totalArea = culturesFooterArea.innerHTML\n        totalArea = getInteger(totalArea.split(' ')[0])\n        const totalPopulation = getInteger(culturesFooterPopulation.innerHTML)\n        $('#culturesBody > .cultures').each(function() {\n          const cells = Math.round($(this).attr('data-cells') / totalCells * 100)\n          const area = Math.round($(this).attr('data-area') / totalArea * 100)\n          const population = Math.round($(this).attr('data-population') / totalPopulation * 100)\n          $(this).children().filter('.stateCells').text(cells + '%')\n          $(this).children().filter('.stateArea').text(area + '%')\n          $(this).children().filter('.culturePopulation').text(population + '%')\n        })\n      } else {\n        el.attr('data-type', 'absolute')\n        editCultures()\n      }\n    })\n\n    $('#culturesManually').on('click', function() {\n      customization = 4\n      tip('Click to select a culture, drag the circle to re-assign', true)\n      $('#culturesBottom').children().hide()\n      $('#culturesManuallyButtons').show()\n      viewbox.style('cursor', 'crosshair').call(drag).on('click', changeSelectedOnClick)\n      debug.select('#cultureCenters').selectAll('*').remove()\n    })\n\n    $('#culturesManuallyComplete').on('click', function() {\n      const changed = cults.selectAll('[data-culture]')\n      changed.each(function() {\n        const i = +(this.id).slice(4)\n        const c = +this.getAttribute('data-culture')\n        this.removeAttribute('data-culture')\n        cells[i].culture = c\n        const manor = cells[i].manor\n        if (manor !== undefined) manors[manor].culture = c\n      })\n      exitCulturesManualAssignment()\n      if (changed.size()) editCultures()\n    })\n\n    $('#culturesManuallyCancel').on('click', function() {\n      cults.selectAll('[data-culture]').each(function() {\n        const i = +(this.id).slice(4)\n        const c = cells[i].culture\n        this.removeAttribute('data-culture')\n        const color = cultures[c].color\n        this.setAttribute('fill', color)\n        this.setAttribute('stroke', color)\n      })\n      exitCulturesManualAssignment()\n      drawCultureCenters()\n    })\n\n    function exitCulturesManualAssignment() {\n      debug.selectAll('.circle').remove()\n      $('#culturesBottom').children().show()\n      $('#culturesManuallyButtons').hide()\n      $('.selected').removeClass('selected')\n      customization = 0\n      restoreDefaultEvents()\n    }\n\n    $('#culturesRandomize').on('click', function() {\n      const centers = cultures.map(function(c) {\n        const x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1)\n        const y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1)\n        const center = [x, y]\n        c.center = center\n        return center\n      })\n      cultureTree = d3.quadtree(centers)\n      recalculateCultures()\n      drawCultureCenters()\n      editCultures()\n    })\n\n    $('#culturesExport').on('click', function() {\n      const unit = areaUnit.value === 'square' ? distanceUnit.value + '2' : areaUnit.value\n      let data = 'Culture,Cells,Area (' + unit + '),Population,Namesbase\\n' // headers\n      $('#culturesBody > .cultures').each(function() {\n        data += $(this).attr('data-culture') + ','\n        data += $(this).attr('data-cells') + ','\n        data += $(this).attr('data-area') + ','\n        data += $(this).attr('data-population') + ','\n        data += $(this).attr('data-base') + '\\n'\n      })\n\n      const dataBlob = new Blob([data], {type: 'text/plain'})\n      const url = window.URL.createObjectURL(dataBlob)\n      const link = document.createElement('a')\n      document.body.appendChild(link)\n      link.download = 'cultures_data' + Date.now() + '.csv'\n      link.href = url\n      link.click()\n      window.setTimeout(function() {window.URL.revokeObjectURL(url)}, 2000)\n    })\n\n    $('#culturesRegenerateNames').on('click', function() {\n      manors.forEach(function(m) {\n        if (m.region === 'removed') return\n        const culture = m.culture\n        m.name = generateName(culture)\n        labels.select('[data-id=\\'' + m.i + '\\']').text(m.name)\n      })\n    })\n\n    $('#culturesEditNamesBase').on('click', editNamesbase)\n\n    $('#culturesAdd').on('click', function() {\n      const x = Math.floor(Math.random() * graphWidth * 0.8 + graphWidth * 0.1)\n      const y = Math.floor(Math.random() * graphHeight * 0.8 + graphHeight * 0.1)\n      const center = [x, y]\n\n      let culture, base, name, color\n      if (cultures.length < defaultCultures.length) {\n        // add one of the default cultures\n        culture = cultures.length\n        base = defaultCultures[culture].base\n        color = defaultCultures[culture].color\n        name = defaultCultures[culture].name\n      } else {\n        // add random culture besed on one of the current ones\n        culture = _.random(cultures.length - 1)\n        name = generateName(culture)\n        color = colors20(cultures.length % 20)\n        base = cultures[culture].base\n      }\n      cultures.push({name, color, base, center})\n      const centers = cultures.map(function(c) {return c.center})\n      cultureTree = d3.quadtree(centers)\n      recalculateCultures()\n      editCultures()\n    })\n  }\n\n  // open editNamesbase dialog\n  function editNamesbase() {\n    // update list of bases\n    const select = document.getElementById('namesbaseSelect')\n    for (let i = select.options.length; i < nameBases.length; i++) {\n      const option = new Option(nameBases[i].name, i)\n      select.options.add(option)\n    }\n\n    // restore previous state\n    const textarea = document.getElementById('namesbaseTextarea')\n    let selected = +textarea.getAttribute('data-base')\n    if (selected >= nameBases.length) selected = 0\n    select.value = selected\n    if (textarea.value === '') namesbaseUpdateInputs(selected)\n    const examples = document.getElementById('namesbaseExamples')\n    if (examples.innerHTML === '') namesbaseUpdateExamples(selected)\n\n    // open a dialog\n    $('#namesbaseEditor').dialog({\n      title: 'Namesbase Editor',\n      minHeight: 'auto', minWidth: Math.min(svgWidth, 400),\n      position: {my: 'center', at: 'center', of: 'svg'}\n    })\n\n    if (modules.editNamesbase) return\n    modules.editNamesbase = true\n\n    function namesbaseUpdateInputs(selected) {\n      const textarea = document.getElementById('namesbaseTextarea')\n      textarea.value = nameBase[selected].join(', ')\n      textarea.setAttribute('data-base', selected)\n      const name = document.getElementById('namesbaseName')\n      const method = document.getElementById('namesbaseMethod')\n      const min = document.getElementById('namesbaseMin')\n      const max = document.getElementById('namesbaseMax')\n      const dublication = document.getElementById('namesbaseDouble')\n      name.value = nameBases[selected].name\n      method.value = nameBases[selected].method\n      min.value = nameBases[selected].min\n      max.value = nameBases[selected].max\n      dublication.value = nameBases[selected].d\n    }\n\n    function namesbaseUpdateExamples(selected) {\n      const examples = document.getElementById('namesbaseExamples')\n      let text = ''\n      for (let i = 0; i < 10; i++) {\n        const name = generateName(false, selected)\n        if (name === undefined) {\n          text = 'Cannot generate examples. Please verify the data'\n          break\n        }\n        if (i !== 0) text += ', '\n        text += name\n      }\n      examples.innerHTML = text\n    }\n\n    $('#namesbaseSelect').on('change', function() {\n      const selected = +this.value\n      namesbaseUpdateInputs(selected)\n      namesbaseUpdateExamples(selected)\n    })\n\n    $('#namesbaseName').on('input', function() {\n      const base = +textarea.getAttribute('data-base')\n      const select = document.getElementById('namesbaseSelect')\n      select.options[base].innerHTML = this.value\n      nameBases[base].name = this.value\n    })\n\n    $('#namesbaseTextarea').on('input', function() {\n      const base = +this.getAttribute('data-base')\n      const data = textarea.value.replace(/ /g, '').split(',')\n      nameBase[base] = data\n      if (data.length < 3) {\n        chain[base] = []\n        const examples = document.getElementById('namesbaseExamples')\n        examples.innerHTML = 'Please provide a correct source data'\n        return\n      }\n      const method = document.getElementById('namesbaseMethod').value\n      if (method !== 'selection') chain[base] = calculateChain(base)\n    })\n\n    $('#namesbaseMethod').on('change', function() {\n      const base = +textarea.getAttribute('data-base')\n      nameBases[base].method = this.value\n      if (this.value !== 'selection') chain[base] = calculateChain(base)\n    })\n\n    $('#namesbaseMin').on('change', function() {\n      const base = +textarea.getAttribute('data-base')\n      if (+this.value > nameBases[base].max) {\n        tip('Minimal length cannot be greated that maximal')\n      } else {\n        nameBases[base].min = +this.value\n      }\n    })\n\n    $('#namesbaseMax').on('change', function() {\n      const base = +textarea.getAttribute('data-base')\n      if (+this.value < nameBases[base].min) {\n        tip('Maximal length cannot be less than minimal')\n      } else {\n        nameBases[base].max = +this.value\n      }\n    })\n\n    $('#namesbaseDouble').on('change', function() {\n      const base = +textarea.getAttribute('data-base')\n      nameBases[base].d = this.value\n    })\n\n    $('#namesbaseDefault').on('click', function() {\n      alertMessage.innerHTML = `Are you sure you want to restore the default namesbase?\n      All custom bases will be removed and default ones will be assigned to existing cultures.\n      Meanwhile existing names will not be changed.`\n      $('#alert').dialog({\n        resizable: false, title: 'Restore default data',\n        buttons: {\n          Restore: function() {\n            $(this).dialog('close')\n            $('#namesbaseEditor').dialog('close')\n            const select = document.getElementById('namesbaseSelect')\n            select.options.length = 0\n            document.getElementById('namesbaseTextarea').value = ''\n            document.getElementById('namesbaseTextarea').setAttribute('data-base', 0)\n            document.getElementById('namesbaseExamples').innerHTML === ''\n            applyDefaultNamesData()\n            const baseMax = nameBases.length - 1\n            cultures.forEach(function(c) {if (c.base > baseMax) c.base = baseMax})\n            chains = {}\n            calculateChains()\n            editCultures()\n            editNamesbase()\n          },\n          Cancel: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    $('#namesbaseAdd').on('click', function() {\n      const base = nameBases.length\n      const name = 'Base' + base\n      const method = document.getElementById('namesbaseMethod').value\n      const select = document.getElementById('namesbaseSelect')\n      select.options.add(new Option(name, base))\n      select.value = base\n      nameBases.push({name, method, min: 4, max: 10, d: '', m: 1})\n      nameBase.push([])\n      document.getElementById('namesbaseName').value = name\n      const textarea = document.getElementById('namesbaseTextarea')\n      textarea.value = ''\n      textarea.setAttribute('data-base', base)\n      document.getElementById('namesbaseExamples').innerHTML = ''\n      chain[base] = []\n      editCultures()\n    })\n\n    $('#namesbaseExamples, #namesbaseUpdateExamples').on('click', function() {\n      const select = document.getElementById('namesbaseSelect')\n      namesbaseUpdateExamples(+select.value)\n    })\n\n    $('#namesbaseDownload').on('click', function() {\n      const nameBaseString = JSON.stringify(nameBase) + '\\r\\n'\n      const nameBasesString = JSON.stringify(nameBases)\n      const dataBlob = new Blob([nameBaseString + nameBasesString], {type: 'text/plain'})\n      const url = window.URL.createObjectURL(dataBlob)\n      const link = document.createElement('a')\n      link.download = 'namebase' + Date.now() + '.txt'\n      link.href = url\n      link.click()\n    })\n\n    $('#namesbaseUpload').on('click', function() {namesbaseToLoad.click()})\n    $('#namesbaseToLoad').change(function() {\n      const fileToLoad = this.files[0]\n      this.value = ''\n      const fileReader = new FileReader()\n      fileReader.onload = function(fileLoadedEvent) {\n        const dataLoaded = fileLoadedEvent.target.result\n        const data = dataLoaded.split('\\r\\n')\n        if (data[0] && data[1]) {\n          nameBase = JSON.parse(data[0])\n          nameBases = JSON.parse(data[1])\n          const select = document.getElementById('namesbaseSelect')\n          select.options.length = 0\n          document.getElementById('namesbaseTextarea').value = ''\n          document.getElementById('namesbaseTextarea').setAttribute('data-base', 0)\n          document.getElementById('namesbaseExamples').innerHTML === ''\n          const baseMax = nameBases.length - 1\n          cultures.forEach(function(c) {if (c.base > baseMax) c.base = baseMax})\n          chains = {}\n          calculateChains()\n          editCultures()\n          editNamesbase()\n        } else {\n          tip('Cannot load a namesbase. Please check the data format')\n        }\n      }\n      fileReader.readAsText(fileToLoad, 'UTF-8')\n    })\n  }\n\n  // open editLegends dialog\n  function editLegends(id, name) {\n    // update list of objects\n    const select = document.getElementById('legendSelect')\n    for (let i = select.options.length; i < notes.length; i++) {\n      let option = new Option(notes[i].id, notes[i].id)\n      select.options.add(option)\n    }\n\n    // select an object\n    if (id) {\n      let note = notes.find(note => note.id === id)\n      if (note === undefined) {\n        if (!name) name = id\n        note = {id, name, legend: ''}\n        notes.push(note)\n        let option = new Option(id, id)\n        select.options.add(option)\n      }\n      select.value = id\n      legendName.value = note.name\n      legendText.value = note.legend\n    }\n\n    // open a dialog\n    $('#legendEditor').dialog({\n      title: 'Legends Editor',\n      minHeight: 'auto', minWidth: Math.min(svgWidth, 400),\n      position: {my: 'center', at: 'center', of: 'svg'}\n    })\n\n    if (modules.editLegends) return\n    modules.editLegends = true\n\n    // select another object\n    document.getElementById('legendSelect').addEventListener('change', function() {\n      let note = notes.find(note => note.id === this.value)\n      legendName.value = note.name\n      legendText.value = note.legend\n    })\n\n    // change note name on input\n    document.getElementById('legendName').addEventListener('input', function() {\n      let select = document.getElementById('legendSelect')\n      let id = select.value\n      let note = notes.find(note => note.id === id)\n      note.name = this.value\n    })\n\n    // change note text on input\n    document.getElementById('legendText').addEventListener('input', function() {\n      let select = document.getElementById('legendSelect')\n      let id = select.value\n      let note = notes.find(note => note.id === id)\n      note.legend = this.value\n    })\n\n    // hightlight DOM element\n    document.getElementById('legendFocus').addEventListener('click', function() {\n      let select = document.getElementById('legendSelect')\n      let element = document.getElementById(select.value)\n\n      // if element is not found\n      if (element === null) {\n        const message = 'Related element is not found. Would you like to remove the note (legend item)?'\n        alertMessage.innerHTML = message\n        $('#alert').dialog({\n          resizable: false, title: 'Element not found',\n          buttons: {\n            Remove: function() {\n              $(this).dialog('close')\n              removeLegend()\n            },\n            Keep: function() {$(this).dialog('close')}\n          }\n        })\n        return\n      }\n\n      // if element is found\n      highlightElement(element)\n    })\n\n    function highlightElement(element) {\n      if (debug.select('.highlighted').size()) return // allow only 1 highlight element simultaniosly\n      let box = element.getBBox()\n      let transform = element.getAttribute('transform') || null\n      let t = d3.transition().duration(1000).ease(d3.easeBounceOut)\n      let r = d3.transition().duration(500).ease(d3.easeLinear)\n      let highlight = debug.append('rect').attr('x', box.x).attr('y', box.y)\n                           .attr('width', box.width).attr('height', box.height)\n                           .attr('transform', transform)\n      highlight.classed('highlighted', 1)\n               .transition(t).style('outline-offset', '0px')\n               .transition(r).style('outline-color', 'transparent').remove()\n      let tr = parseTransform(transform)\n      let x = box.x + box.width / 2\n      if (tr[0]) x += tr[0]\n      let y = box.y + box.height / 2\n      if (tr[1]) y += tr[1]\n      if (scale >= 2) zoomTo(x, y, scale, 1600)\n    }\n\n    // download legends object as text file\n    document.getElementById('legendDownload').addEventListener('click', function() {\n      const legendString = JSON.stringify(notes)\n      const dataBlob = new Blob([legendString], {type: 'text/plain'})\n      const url = window.URL.createObjectURL(dataBlob)\n      const link = document.createElement('a')\n      link.download = 'legends' + Date.now() + '.txt'\n      link.href = url\n      link.click()\n    })\n\n    // upload legends object as text file and parse to json\n    document.getElementById('legendUpload').addEventListener('click', function() {\n      document.getElementById('lagendsToLoad').click()\n    })\n    document.getElementById('lagendsToLoad').addEventListener('change', function() {\n      const fileToLoad = this.files[0]\n      this.value = ''\n      const fileReader = new FileReader()\n      fileReader.onload = function(fileLoadedEvent) {\n        const dataLoaded = fileLoadedEvent.target.result\n        if (dataLoaded) {\n          notes = JSON.parse(dataLoaded)\n          const select = document.getElementById('legendSelect')\n          select.options.length = 0\n          editLegends(notes[0].id, notes[0].name)\n        } else {\n          tip('Cannot load a file. Please check the data format')\n        }\n      }\n      fileReader.readAsText(fileToLoad, 'UTF-8')\n    })\n\n    // remove the legend item\n    document.getElementById('legendRemove').addEventListener('click', function() {\n      alertMessage.innerHTML = 'Are you sure you want to remove the selected legend?'\n      $('#alert').dialog({\n        resizable: false, title: 'Remove legend element',\n        buttons: {\n          Remove: function() {\n            $(this).dialog('close')\n            removeLegend()\n          },\n          Keep: function() {$(this).dialog('close')}\n        }\n      })\n    })\n\n    function removeLegend() {\n      let select = document.getElementById('legendSelect')\n      let index = notes.findIndex(n => n.id === select.value)\n      notes.splice(index, 1)\n      select.options.length = 0\n      if (notes.length === 0) {\n        $('#legendEditor').dialog('close')\n        return\n      }\n      editLegends(notes[0].id, notes[0].name)\n    }\n\n  }\n\n  // Map scale and measurements editor\n  function editScale() {\n    $('#ruler').fadeIn()\n    $('#scaleEditor').dialog({\n      title: 'Scale Editor',\n      minHeight: 'auto', width: 'auto', resizable: false,\n      position: {my: 'center bottom', at: 'center bottom-10', of: 'svg'}\n    })\n  }\n\n  // update only UI and sorting value in countryEditor screen\n  function updateCountryPopulationUI(s) {\n    if ($('#countriesEditor').is(':visible')) {\n      const urban = Math.round(states[s].urbanPopulation * +urbanization.value * populationRate.value)\n      const rural = Math.round(states[s].ruralPopulation * populationRate.value)\n      const population = (urban + rural) * 1000\n      $('#state' + s).attr('data-population', population)\n      $('#state' + s).children().filter('.statePopulation').val(si(population))\n    }\n  }\n\n  // update dialogs if measurements are changed\n  function updateCountryEditors() {\n    if ($('#countriesEditor').is(':visible')) {editCountries()}\n    if ($('#burgsEditor').is(':visible')) {\n      const s = +$('#burgsEditor').attr('data-state')\n      editBurgs(this, s)\n    }\n  }\n\n  // remove drawn regions and draw all regions again\n  function redrawRegions() {\n    regions.selectAll('*').remove()\n    borders.selectAll('path').remove()\n    removeAllLabelsInGroup('countries')\n    drawRegions()\n  }\n\n  // remove all labels in group including textPaths\n  function removeAllLabelsInGroup(group) {\n    labels.select('#' + group).selectAll('text').each(function() {\n      defs.select('#textPath_' + this.id).remove()\n      this.remove()\n    })\n    if (group !== 'countries') {\n      labels.select('#' + group).remove()\n      updateLabelGroups()\n    }\n  }\n\n  // restore keeped region / burgs / cultures data on edit heightmap completion\n  function restoreRegions() {\n    borders.selectAll('path').remove()\n    removeAllLabelsInGroup('countries')\n    manors.map(function(m) {\n      const cell = diagram.find(m.x, m.y).index\n      if (cells[cell].height < 20) {\n        // remove manor in ocean\n        m.region = 'removed'\n        m.cell = cell\n        d3.selectAll('[data-id=\\'' + m.i + '\\']').remove()\n      } else {\n        m.cell = cell\n        cells[cell].manor = m.i\n      }\n    })\n    cells.map(function(c) {\n      if (c.height < 20) {\n        // no longer a land cell\n        delete c.region\n        delete c.culture\n        return\n      }\n      if (c.region === undefined) {\n        c.region = 'neutral'\n        if (states[states.length - 1].capital !== 'neutral') {\n          states.push({i: states.length, color: 'neutral', capital: 'neutral', name: 'Neutrals'})\n        }\n      }\n      if (c.culture === undefined) {\n        const closest = cultureTree.find(c.data[0], c.data[1])\n        c.culture = cultureTree.data().indexOf(closest)\n      }\n    })\n    states.map(function(s) {recalculateStateData(s.i)})\n    drawRegions()\n  }\n\n  function regenerateCountries() {\n    regions.selectAll('*').remove()\n    const neutral = neutralInput.value = +countriesNeutral.value\n    manors.forEach(function(m) {\n      if (m.region === 'removed') return\n      let state = 'neutral', closest = neutral\n      states.map(function(s) {\n        if (s.capital === 'neutral' || s.capital === 'select') return\n        const c = manors[s.capital]\n        let dist = Math.hypot(c.x - m.x, c.y - m.y) / s.power\n        if (cells[m.cell].fn !== cells[c.cell].fn) dist *= 3\n        if (dist < closest) {\n          state = s.i\n          closest = dist\n        }\n      })\n      m.region = state\n      cells[m.cell].region = state\n    })\n\n    defineRegions()\n    const temp = regions.append('g').attr('id', 'temp')\n    land.forEach(function(l) {\n      if (l.region === undefined) return\n      if (l.region === 'neutral') return\n      const color = states[l.region].color\n      temp.append('path')\n          .attr('data-cell', l.index).attr('data-state', l.region)\n          .attr('d', 'M' + polygons[l.index].join('L') + 'Z')\n          .attr('fill', color).attr('stroke', color)\n    })\n    const neutralCells = $.grep(cells, function(e) {return e.region === 'neutral'})\n    const last = states.length - 1\n    const type = states[last].color\n    if (type === 'neutral' && !neutralCells.length) {\n      // remove neutral line\n      $('#state' + last).remove()\n      states.splice(-1)\n    }\n    // recalculate data for all countries\n    states.map(function(s) {\n      recalculateStateData(s.i)\n      $('#state' + s.i + ' > .stateCells').text(s.cells)\n      $('#state' + s.i + ' > .stateBurgs').text(s.burgs)\n      const area = Math.round(s.area * Math.pow(distanceScale.value, 2))\n      const unit = areaUnit.value === 'square' ? ' ' + distanceUnit.value + '²' :\n                   ' ' + areaUnit.value\n      $('#state' + s.i + ' > .stateArea').text(si(area) + unit)\n      const urban = Math.round(s.urbanPopulation * urbanization.value * populationRate.value)\n      const rural = Math.round(s.ruralPopulation * populationRate.value)\n      const population = (urban + rural) * 1000\n      $('#state' + s.i + ' > .statePopulation').val(si(population))\n      $('#state' + s.i).attr('data-cells', s.cells).attr('data-burgs', s.burgs)\n                       .attr('data-area', area).attr('data-population', population)\n    })\n    if (type !== 'neutral' && neutralCells.length) {\n      // add neutral line\n      states.push({i: states.length, color: 'neutral', capital: 'neutral', name: 'Neutrals'})\n      recalculateStateData(states.length - 1)\n      editCountries()\n    }\n  }\n\n  // enter state edit mode\n  function mockRegions() {\n    if (grid.style('display') !== 'inline') {toggleGrid.click()}\n    if (labels.style('display') !== 'none') {toggleLabels.click()}\n    stateBorders.selectAll('*').remove()\n    neutralBorders.selectAll('*').remove()\n  }\n\n  // handle DOM elements sorting on header click\n  $('.sortable').on('click', function() {\n    const el = $(this)\n    // remove sorting for all siglings except of clicked element\n    el.siblings().removeClass(\n      'icon-sort-name-up icon-sort-name-down icon-sort-number-up icon-sort-number-down')\n    const type = el.hasClass('alphabetically') ? 'name' : 'number'\n    let state = 'no'\n    if (el.is('[class*=\\'down\\']')) {state = 'asc'}\n    if (el.is('[class*=\\'up\\']')) {state = 'desc'}\n    const sortby = el.attr('data-sortby')\n    const list = el.parent().next() // get list container element (e.g. \"countriesBody\")\n    const lines = list.children('div') // get list elements\n    if (state === 'no' || state === 'asc') { // sort desc\n      el.removeClass('icon-sort-' + type + '-down')\n      el.addClass('icon-sort-' + type + '-up')\n      lines.sort(function(a, b) {\n        let an = a.getAttribute('data-' + sortby)\n        if (an === 'bottom') {return 1}\n        let bn = b.getAttribute('data-' + sortby)\n        if (bn === 'bottom') {return -1}\n        if (type === 'number') {\n          an = +an\n          bn = +bn\n        }\n        if (an > bn) {return 1}\n        if (an < bn) {return -1}\n        return 0\n      })\n    }\n    if (state === 'desc') { // sort asc\n      el.removeClass('icon-sort-' + type + '-up')\n      el.addClass('icon-sort-' + type + '-down')\n      lines.sort(function(a, b) {\n        let an = a.getAttribute('data-' + sortby)\n        if (an === 'bottom') {return 1}\n        let bn = b.getAttribute('data-' + sortby)\n        if (bn === 'bottom') {return -1}\n        if (type === 'number') {\n          an = +an\n          bn = +bn\n        }\n        if (an < bn) {return 1}\n        if (an > bn) {return -1}\n        return 0\n      })\n    }\n    lines.detach().appendTo(list)\n  })\n\n  // load text file with new burg names\n  $('#burgsListToLoad').change(function() {\n    const fileToLoad = this.files[0]\n    this.value = ''\n    const fileReader = new FileReader()\n    fileReader.onload = function(fileLoadedEvent) {\n      const dataLoaded = fileLoadedEvent.target.result\n      const data = dataLoaded.split('\\r\\n')\n      if (data.length === 0) {return}\n      let change = []\n      let message = `Burgs will be renamed as below. Please confirm`\n      message +=\n        `<div class=\"overflow-div\"><table class=\"overflow-table\"><tr><th>Id</th><th>Current name</th><th>New Name</th></tr>`\n      for (let i = 0; i < data.length && i < manors.length; i++) {\n        const v = data[i]\n        if (v === '' || v === undefined) {continue}\n        if (v === manors[i].name) {continue}\n        change.push({i, name: v})\n        message +=\n          `<tr><td style=\"width:20%\">${i}</td><td style=\"width:40%\">${manors[i].name}</td><td style=\"width:40%\">${v}</td></tr>`\n      }\n      message += `</tr></table></div>`\n      alertMessage.innerHTML = message\n      $('#alert').dialog({\n        title: 'Burgs bulk renaming', position: {my: 'center', at: 'center', of: 'svg'},\n        buttons: {\n          Cancel: function() {$(this).dialog('close')},\n          Confirm: function() {\n            for (let i = 0; i < change.length; i++) {\n              const id = change[i].i\n              manors[id].name = change[i].name\n              labels.select('[data-id=\\'' + id + '\\']').text(change[i].name)\n            }\n            $(this).dialog('close')\n            updateCountryEditors()\n          }\n        }\n      })\n    }\n    fileReader.readAsText(fileToLoad, 'UTF-8')\n  })\n\n  // just apply map size that was already set, apply graph size!\n  function applyMapSize() {\n    svgWidth = graphWidth = +mapWidthInput.value\n    svgHeight = graphHeight = +mapHeightInput.value\n    svg.attr('width', svgWidth).attr('height', svgHeight)\n    // set extent to map borders + 100px to get infinity world reception\n    voronoi = d3.voronoi().extent([[-1, -1], [graphWidth + 1, graphHeight + 1]])\n    zoom.translateExtent([[0, 0], [graphWidth, graphHeight]]).scaleExtent([1, 20])\n        .scaleTo(svg, 1)\n    viewbox.attr('transform', null)\n    ocean.selectAll('rect').attr('x', 0).attr('y', 0).attr('width', graphWidth)\n         .attr('height', graphHeight)\n  }\n\n  // change svg size on manual size change or window resize, do not change graph size\n  function changeMapSize() {\n    fitScaleBar()\n    svgWidth = +mapWidthInput.value\n    svgHeight = +mapHeightInput.value\n    svg.attr('width', svgWidth).attr('height', svgHeight)\n    const width = Math.max(svgWidth, graphWidth)\n    const height = Math.max(svgHeight, graphHeight)\n    zoom.translateExtent([[0, 0], [width, height]])\n    svg.select('#ocean').selectAll('rect').attr('x', 0)\n       .attr('y', 0).attr('width', width).attr('height', height)\n  }\n\n  // fit full-screen map if window is resized\n  $(window).resize(function(e) {\n    // trick to prevent resize on download bar opening\n    if (autoResize === false) return\n    mapWidthInput.value = window.innerWidth\n    mapHeightInput.value = window.innerHeight\n    changeMapSize()\n  })\n\n  // fit ScaleBar to map size\n  function fitScaleBar() {\n    const el = d3.select('#scaleBar')\n    if (!el.select('rect').size()) return\n    const bbox = el.select('rect').node().getBBox()\n    let tr = [svgWidth - bbox.width, svgHeight - (bbox.height - 10)]\n    if (sessionStorage.getItem('scaleBar')) {\n      const scalePos = sessionStorage.getItem('scaleBar').split(',')\n      tr = [+scalePos[0] - bbox.width, +scalePos[1] - bbox.height]\n    }\n    el.attr('transform', 'translate(' + Math.round(tr[0]) + ',' + Math.round(tr[1]) + ')')\n  }\n\n  // Other Options handlers\n  $('input, select').on('input change', function() {\n    const id = this.id\n    if (id === 'hideLabels') invokeActiveZooming()\n    if (id === 'mapWidthInput' || id === 'mapHeightInput') {\n      changeMapSize()\n      autoResize = false\n      localStorage.setItem('mapWidth', mapWidthInput.value)\n      localStorage.setItem('mapHeight', mapHeightInput.value)\n    }\n    if (id === 'sizeInput') {\n      graphSize = sizeOutput.value = +this.value\n      if (graphSize === 3) {sizeOutput.style.color = 'red'}\n      if (graphSize === 2) {sizeOutput.style.color = 'yellow'}\n      if (graphSize === 1) {sizeOutput.style.color = 'green'}\n      // localStorage.setItem(\"graphSize\", this.value); - temp off to always start with size 1\n    }\n    if (id === 'templateInput') {localStorage.setItem('template', this.value)}\n    if (id === 'manorsInput') {\n      manorsOutput.value = this.value\n      localStorage.setItem('manors', this.value)\n    }\n    if (id === 'regionsInput') {\n      regionsOutput.value = this.value\n      let size = Math.round(6 - this.value / 20)\n      if (size < 3) {size = 3}\n      burgLabels.select('#capitals').attr('data-size', size)\n      size = Math.round(18 - this.value / 6)\n      if (size < 4) {size = 4}\n      labels.select('#countries').attr('data-size', size)\n      localStorage.setItem('regions', this.value)\n    }\n    if (id === 'powerInput') {\n      powerOutput.value = this.value\n      localStorage.setItem('power', this.value)\n    }\n    if (id === 'neutralInput') {\n      neutralOutput.value = countriesNeutral.value = this.value\n      localStorage.setItem('neutal', this.value)\n    }\n    if (id === 'culturesInput') {\n      culturesOutput.value = this.value\n      localStorage.setItem('cultures', this.value)\n    }\n    if (id === 'precInput') {\n      precOutput.value = +precInput.value\n      localStorage.setItem('prec', this.value)\n    }\n    if (id === 'swampinessInput') {\n      swampinessOutput.value = this.value\n      localStorage.setItem('swampiness', this.value)\n    }\n    if (id === 'outlineLayersInput') localStorage.setItem('outlineLayers', this.value)\n    if (id === 'transparencyInput') changeDialogsTransparency(this.value)\n    if (id === 'pngResolutionInput') localStorage.setItem('pngResolution', this.value)\n    if (id === 'zoomExtentMin' || id === 'zoomExtentMax') {\n      zoom.scaleExtent([+zoomExtentMin.value, +zoomExtentMax.value])\n      zoom.scaleTo(svg, +this.value)\n    }\n\n    if (id === 'convertOverlay') {\n      canvas.style.opacity = convertOverlayValue.innerHTML = +this.value\n    }\n    if (id === 'populationRate') {\n      populationRateOutput.value = si(+populationRate.value * 1000)\n      updateCountryEditors()\n    }\n    if (id === 'urbanization') {\n      urbanizationOutput.value = this.value\n      updateCountryEditors()\n    }\n    if (id === 'distanceUnit' || id === 'distanceScale' || id === 'areaUnit') {\n      const dUnit = distanceUnit.value\n      if (id === 'distanceUnit' && dUnit === 'custom_name') {\n        const custom = prompt('Provide a custom name for distance unit')\n        if (custom) {\n          const opt = document.createElement('option')\n          opt.value = opt.innerHTML = custom\n          distanceUnit.add(opt)\n          distanceUnit.value = custom\n        } else {\n          this.value = 'km'\n          return\n        }\n      }\n      const scale = distanceScale.value\n      scaleOutput.value = scale + ' ' + dUnit\n      ruler.selectAll('g').each(function() {\n        let label\n        const g = d3.select(this)\n        const area = +g.select('text').attr('data-area')\n        if (area) {\n          const areaConv = area * Math.pow(scale, 2) // convert area to distanceScale\n          let unit = areaUnit.value\n          if (unit === 'square') {unit = dUnit + '²'} else {unit = areaUnit.value}\n          label = si(areaConv) + ' ' + unit\n        } else {\n          const dist = +g.select('text').attr('data-dist')\n          label = Math.round(dist * scale) + ' ' + dUnit\n        }\n        g.select('text').text(label)\n      })\n      ruler.selectAll('.gray').attr('stroke-dasharray', _.round(30 / scale, 2))\n      drawScaleBar()\n      updateCountryEditors()\n    }\n    if (id === 'barSize') {\n      barSizeOutput.innerHTML = this.value\n      $('#scaleBar').removeClass('hidden')\n      drawScaleBar()\n    }\n    if (id === 'barLabel') {\n      $('#scaleBar').removeClass('hidden')\n      drawScaleBar()\n    }\n    if (id === 'barBackOpacity' || id === 'barBackColor') {\n      d3.select('#scaleBar > rect')\n        .attr('opacity', +barBackOpacity.value)\n        .attr('fill', barBackColor.value)\n      $('#scaleBar').removeClass('hidden')\n    }\n  })\n\n  $('#scaleOutput').change(function() {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0.01 || this.value > 10) {\n      tip('Manually entered distance scale should be a number in a [0.01; 10] range')\n      this.value = distanceScale.value + ' ' + distanceUnit.value\n      return\n    }\n    distanceScale.value = +this.value\n    scaleOutput.value = this.value + ' ' + distanceUnit.value\n    updateCountryEditors()\n  })\n\n  $('#populationRateOutput').change(function() {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0.001 || this.value > 10) {\n      tip('Manually entered population rate should be a number in a [0.001; 10] range')\n      this.value = si(populationRate.value * 1000)\n      return\n    }\n    populationRate.value = +this.value\n    populationRateOutput.value = si(this.value * 1000)\n    updateCountryEditors()\n  })\n\n  $('#urbanizationOutput').change(function() {\n    if (this.value === '' || isNaN(+this.value) || this.value < 0 || this.value > 10) {\n      tip('Manually entered urbanization rate should be a number in a [0; 10] range')\n      this.value = urbanization.value\n      return\n    }\n    const val = parseFloat(+this.value)\n    if (val > 2) urbanization.setAttribute('max', val)\n    urbanization.value = urbanizationOutput.value = val\n    updateCountryEditors()\n  })\n\n  // lock manually changed option to restrict it randomization\n  $('#optionsContent input, #optionsContent select').change(function() {\n    const icon = 'lock' + this.id.charAt(0).toUpperCase() + this.id.slice(1)\n    const el = document.getElementById(icon)\n    if (!el) return\n    el.setAttribute('data-locked', 1)\n    el.className = 'icon-lock'\n  })\n\n  $('#optionsReset').click(restoreDefaultOptions)\n\n  $('#rescaler').change(function() {\n    const change = _.round((+this.value - 5), 2)\n    modifyHeights('all', change, 1)\n    updateHeightmap()\n    updateHistory()\n    rescaler.value = 5\n  })\n\n  $('#layoutPreset').on('change', function() {\n    const preset = this.value\n    $('#mapLayers li').not('#toggleOcean').addClass('buttonoff')\n    $('#toggleOcean').removeClass('buttonoff')\n    $('#oceanPattern').fadeIn()\n    $('#rivers, #terrain, #borders, #regions, #icons, #labels, #routes, #grid, #markers')\n      .fadeOut()\n    cults.selectAll('path').remove()\n    terrs.selectAll('path').remove()\n    if (preset === 'layoutPolitical') {\n      toggleRivers.click()\n      toggleRelief.click()\n      toggleBorders.click()\n      toggleCountries.click()\n      toggleIcons.click()\n      toggleLabels.click()\n      toggleRoutes.click()\n      toggleMarkers.click()\n    }\n    if (preset === 'layoutCultural') {\n      toggleRivers.click()\n      toggleRelief.click()\n      toggleBorders.click()\n      $('#toggleCultures').click()\n      toggleIcons.click()\n      toggleLabels.click()\n      toggleMarkers.click()\n    }\n    if (preset === 'layoutHeightmap') {\n      $('#toggleHeight').click()\n      toggleRivers.click()\n    }\n  })\n\n  // UI Button handlers\n  $('.tab > button').on('click', function() {\n    $('.tabcontent').hide()\n    $('.tab > button').removeClass('active')\n    $(this).addClass('active')\n    const id = this.id\n    if (id === 'layoutTab') {$('#layoutContent').show()}\n    if (id === 'styleTab') {$('#styleContent').show()}\n    if (id === 'optionsTab') {$('#optionsContent').show()}\n    if (id === 'customizeTab') {$('#customizeContent').show()}\n    if (id === 'aboutTab') {$('#aboutContent').show()}\n  })\n\n  // re-load page with provided seed\n  $('#optionsSeedGenerate').on('click', function() {\n    if ($('#optionsSeed').value == seed) return\n    seed = $('#optionsSeed').value\n    const url = new URL(window.location.href)\n    window.location.href = url.pathname + '?seed=' + seed\n  })\n\n  // Pull request from @evyatron\n  // https://github.com/Azgaar/Fantasy-Map-Generator/pull/49\n  function addDragToUpload() {\n    document.addEventListener('dragover', function(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      $('#map-dragged').show()\n    })\n\n    document.addEventListener('dragleave', function(e) {\n      $('#map-dragged').hide()\n    })\n\n    document.addEventListener('drop', function(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      $('#map-dragged').hide()\n      // no files or more than one\n      if (e.dataTransfer.items == null || e.dataTransfer.items.length != 1) {return}\n      const file = e.dataTransfer.items[0].getAsFile()\n      // not a .map file\n      if (file.name.indexOf('.map') == -1) {\n        alertMessage.innerHTML =\n          'Please upload a <b>.map</b> file you have previously downloaded'\n        $('#alert').dialog({\n          resizable: false, title: 'Invalid file format',\n          width: 400, buttons: {\n            Close: function() { $(this).dialog('close') }\n          }, position: {my: 'center', at: 'center', of: 'svg'}\n        })\n        return\n      }\n      // all good - show uploading text and load the map\n      $('#map-dragged > p').text('Uploading<span>.</span><span>.</span><span>.</span>')\n      uploadFile(file, function onUploadFinish() {\n        $('#map-dragged > p').text('Drop to upload')\n      })\n    })\n  }\n}\n\nfunction tip(tip, main, error) {\n  const tooltip = d3.select('#tooltip')\n  const reg = 'linear-gradient(0.1turn, #ffffff00, #5e5c5c4d, #ffffff00)'\n  const red = 'linear-gradient(0.1turn, #ffffff00, #c71d1d66, #ffffff00)'\n  tooltip.text(tip).style('background', error ? red : reg)\n  if (main) tooltip.attr('data-main', tip)\n}\n\nwindow.tip = tip\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}